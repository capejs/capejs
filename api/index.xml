<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apis on Cape.JS: Documentation</title>
    <link>http://oiax.github.io/capejs/api/</link>
    <description>Recent content in Apis on Cape.JS: Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://oiax.github.io/capejs/api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>API Reference</title>
      <link>http://oiax.github.io/capejs/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt; -
&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt; -
&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt; -
&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt; -
&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt; -
&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-cape-object:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;The &lt;code&gt;Cape&lt;/code&gt; object&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; defines a single global variable &lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt;.
It has some utility methods, such as &lt;code&gt;extend&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;overview-of-classes:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Overview of classes&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; consists of following five classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These classes are defined as properties of the &lt;code&gt;Cape&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The most basic class is &lt;code&gt;Cape.Component&lt;/code&gt;.
You need to define a class extending it in order to create a web widget using Cape.JS.
At least, instances of this class must have a method called &lt;code&gt;render&lt;/code&gt;, which defines
how the component should be rendered in HTML.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; is a class whose instances build &lt;em&gt;virtual dom trees.&lt;/em&gt;
Usually you don&amp;rsquo;t instantiate markup builders by yourself.
Instances of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are passed to the &lt;code&gt;render&lt;/code&gt; method of
component classes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.DataStore&lt;/code&gt; is a class to store and manipulate data, which is used by
components to render themselves.&lt;/p&gt;

&lt;p&gt;If you want to create a single page application (SPA), you may need an instance of &lt;code&gt;Cape.Router&lt;/code&gt;.
After you start it, it continues to watch the changes of &lt;em&gt;hash fragment&lt;/em&gt; of URL
and mount components according to the &lt;em&gt;routes&lt;/em&gt;
(associations between hashes and components) which you defined in advance.&lt;/p&gt;

&lt;p&gt;You have to call methods of &lt;code&gt;Cape.RoutingMapper&lt;/code&gt; in order to define the routes.
You will never instantiate it by youself, but will get its instance through the &lt;code&gt;draw&lt;/code&gt;
method of &lt;code&gt;Cape.Router&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape - API Reference</title>
      <link>http://oiax.github.io/capejs/api/cape/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/cape/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#create-component-class&#34;&gt;Cape.createComponentClass&lt;/a&gt; -
&lt;a href=&#34;#create-data-store-class&#34;&gt;Cape.createDataStoreClass&lt;/a&gt; -
&lt;a href=&#34;#deep-extend&#34;&gt;Cape.deepExtend&lt;/a&gt; -
&lt;a href=&#34;#extend&#34;&gt;Cape.extend&lt;/a&gt; -
&lt;a href=&#34;#merge&#34;&gt;Cape.merge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createcomponentclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createComponentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createComponentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.Component&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HelloMessage extends Cape.Component {
  render(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createdatastoreclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createDataStoreClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createDataStoreClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.DataStore&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-1:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var TodoItemStore = Cape.createDataStoreClass({
  init: function() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
    this.propagate();
  },
  addItem: function(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  },
  toggle: function(item) {
    item.done = !item.done;
    this.propagate();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TodoItemStore extends Cape.DataStore {
  init() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
    this.propagate();
  }
  addItem(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  }
  toggle(item) {
    item.done = !item.done;
    this.propagate();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;deep-extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-deepextend:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.deepExtend&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object recursively.&lt;/p&gt;

&lt;h4 id=&#34;example-2:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-extend:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.extend&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object.&lt;/p&gt;

&lt;h4 id=&#34;example-3:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;merge&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-merge:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.merge&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.merge(target&lt;em&gt;[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge (but not override) the properties of two or more objects together
into the first object&lt;/p&gt;

&lt;h4 id=&#34;example-4:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  apple: 2,
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 100 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Component - API Reference</title>
      <link>http://oiax.github.io/capejs/api/component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/component/</guid>
      <description>

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-component-formdata:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Cape.Component#formData()&lt;/h3&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-component-mount-id:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Cape.Component#mount(id)&lt;/h3&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-component-refresh:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Cape.Component#refresh()&lt;/h3&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;unmount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-component-unmount:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Cape.Component#unmount()&lt;/h3&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;val&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-component-val:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Cape.Component#val()&lt;/h3&gt;

&lt;h4 id=&#34;cape-component-val-name:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Cape.Component#val(name)&lt;/h4&gt;

&lt;h4 id=&#34;cape-component-val-name-value:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Cape.Component#val(name, value)&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Cape.DataStore - API Reference</title>
      <link>http://oiax.github.io/capejs/api/data_store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/data_store/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cape.MarkupBuilder - API Reference</title>
      <link>http://oiax.github.io/capejs/api/markup_builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/markup_builder/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#general-notes&#34;&gt;General notes&lt;/a&gt; -
&lt;a href=&#34;#a-abbr-address-etc&#34;&gt;#a(), #abbr(), #address()&lt;/a&gt; -
&lt;a href=&#34;#area-base-br-etc&#34;&gt;#area(), #base(), #br()&lt;/a&gt; -
&lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt; -
&lt;a href=&#34;#check-box&#34;&gt;#checkBox()&lt;/a&gt; -
&lt;a href=&#34;#class&#34;&gt;#class()&lt;/a&gt; -
&lt;a href=&#34;#css&#34;&gt;#css()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data()&lt;/a&gt; -
&lt;a href=&#34;#elem&#34;&gt;#elem()&lt;/a&gt; -
&lt;a href=&#34;#fa&#34;&gt;#fa()&lt;/a&gt; -
&lt;a href=&#34;#fields-for&#34;&gt;#fieldsFor()&lt;/a&gt; -
&lt;a href=&#34;#form-for&#34;&gt;#formFor()&lt;/a&gt; -
&lt;a href=&#34;#hidden-field&#34;&gt;#hiddenField()&lt;/a&gt; -
&lt;a href=&#34;#label-for&#34;&gt;#labelFor()&lt;/a&gt; -
&lt;a href=&#34;#markup&#34;&gt;#markup()&lt;/a&gt; -
&lt;a href=&#34;#password-field&#34;&gt;#passwordField()&lt;/a&gt; -
&lt;a href=&#34;#radio-button&#34;&gt;#radioButton()&lt;/a&gt; -
&lt;a href=&#34;#select-box&#34;&gt;#selectBox()&lt;/a&gt; -
&lt;a href=&#34;#sp&#34;&gt;#sp()&lt;/a&gt; -
&lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt; -
&lt;a href=&#34;#text&#34;&gt;#text()&lt;/a&gt; -
&lt;a href=&#34;#textarea-field&#34;&gt;#textareaField()&lt;/a&gt; -
&lt;a href=&#34;#text-field&#34;&gt;#textField()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;general-notes&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;general-notes:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;General notes&lt;/h3&gt;

&lt;p&gt;All instance methods of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are &lt;em&gt;chainable.&lt;/em&gt;
Each method returns the instance itself.&lt;/p&gt;

&lt;h4 id=&#34;example:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.text(&#39;Hello,&#39;).sp().text(this.guest.name).text(&#39;!&#39;);
      // The above single statement is equivalent to the
      // following four statement;
      //   m.text(&#39;Hello,&#39;);
      //   m.sp();
      //   m.text(this.guest.name);
      //   m.text(&#39;!&#39;);
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All instance methods except &lt;code&gt;#attr&lt;/code&gt;, &lt;code&gt;#class&lt;/code&gt;, &lt;code&gt;#css&lt;/code&gt;, &lt;code&gt;#data&lt;/code&gt;, &lt;code&gt;#sp&lt;/code&gt;, &lt;code&gt;#space&lt;/code&gt;
and &lt;code&gt;#text&lt;/code&gt; take the &lt;em&gt;options&lt;/em&gt; argument, which will be translated into the
attributes of element to be created.&lt;/p&gt;

&lt;h4 id=&#34;example-1:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;, { title: &#39;greeting&#39; });
      // The above code generates the following &amp;lt;p&amp;gt; tag:
      //   &amp;lt;p title=&amp;quot;greeting&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;em&gt;options&lt;/em&gt; argument has a &lt;code&gt;visible&lt;/code&gt; key and its value is &lt;em&gt;falsey&lt;/em&gt;
(&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;),
it sets the &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt; to make this element invisible.&lt;/p&gt;

&lt;h4 id=&#34;example-2:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;,
        { visible: Date.now().getDay() === 0 });
      // On sunday, the above code generates the following:
      //   &amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
      // On other days:
      //   &amp;lt;p style=&amp;quot;display: none&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;a-abbr-address-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-abbr-address-etc:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#a(), #abbr(), #address(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a, abbr, address, article, aside, audio, b, bdi, bdo,
  blockquote, body, button, canvas, caption, cite, code,
  colgroup, datalist, dd, del, details, dfn, dialog, div,
  dl, dt, em, embed, fieldset, figcaption, figure, footer,
  h1, h2, h3, h4, h5, h6, head, header, html,
  i, iframe, ins, kbd, label, legend, li, main, map, mark,
  menu, menuitem, meter, nav, noscript, object, ol, optgroup,
  option, output, p, pre, progress, q, rp, rt, ruby, s,
  samp, script, section, select, small, span, strong, style,
  sub, summary, sup, table, tbody, td, textarea, tfoot,
  th, thead, time, title, tr, u, ul, var, video&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the first argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-3:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article(function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;);
      m.ul(function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-4:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article({ id: &#39;agenda&#39; }, function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;,
        { className: &#39;statement&#39; });
      m.ul({ style: &#39;color: blue&#39; }, function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;area-base-br-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;area-base-br-etc:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#area(), #base(), #br(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;area([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;base([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;br([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 &lt;em&gt;void&lt;/em&gt; elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;area, base, br, col, embed, hr, img, input, keygen,
link, menuitem, meta, param, source, track, wbr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They don&amp;rsquo;t take a string argument nor a function argument, though.
They only accept a hash object to set the attribute values of the element.&lt;/p&gt;

&lt;h4 id=&#34;example-5:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var LogoMark = Cape.createComponentClass({
  render: function(m) {
    m.div({ id: &#39;agenda&#39; }, function(m) {
      m.img({ src: &#39;../images/logo.png&#39;, alt: &#39;Logo Image&#39; })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attr&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attr:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#attr()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attr(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the value of attributes for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-6:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute values are set cumulatively.&lt;/p&gt;

&lt;h4 id=&#34;example-7:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.attr(&#39;width&#39;, &#39;180&#39;);
  m.attr(&#39;height&#39;, &#39;120&#39;);
  m.attr(&#39;title&#39;, &#39;Cape.JS&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39;,
  //           width: &#39;180&#39;, height: &#39;120&#39;,
  //           title: &#39;Cape.JS&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The values set by &lt;code&gt;#attr&lt;/code&gt; does not affect the elements created after the next element.&lt;/p&gt;

&lt;h4 id=&#34;example-8:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  m.img({ src: &#39;../images/download.png&#39; });
  // The last statement creates a &amp;lt;img&amp;gt; tag without
  // alt attribute.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;check-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkbox:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#checkBox()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkBox(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.
See &lt;a href=&#34;#formFor&#34;&gt;#formFor&lt;/a&gt; for details.&lt;/p&gt;

&lt;h4 id=&#34;example-9:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelOf(&#39;privileged&#39;, function(m) {
      m.checkBox(&#39;privileged&#39;);
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //       &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //         id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //     &amp;lt;/label&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;class:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#class()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;class(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;class&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-10:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;container&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#class&lt;/code&gt; method add classes cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;css&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;css:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#css()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#data()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;data-*&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-11:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data(&#39;id&#39;, &#39;7&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div data-id=&amp;quot;7&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#data&lt;/code&gt; method sets attribute values cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;elem&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;elem:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#elem()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;elem(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elem([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create an HTML element. The first argument is a CSS selector, such as &lt;code&gt;&amp;quot;div.container&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the second argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-12:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;);
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-13:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, { style: &#39;margin-top: 10px&#39; },
    function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;,
          { style: &#39;font-weight: bold&#39; });
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot; style=&amp;quot;margin-top: 10px&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;
  //           style=&amp;quot;font-weight: bold&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fa&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fa:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#fa()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fa(name [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;font awesome&lt;/a&gt; icon
(actually, it is just an empty &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag) to the virtual dom tree.
Its first argument is the icon&amp;rsquo;s name, such as &lt;code&gt;&amp;quot;download&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;gear&amp;quot;&lt;/code&gt;, etc.
You can pass a hash object as the optional second argument to set the
attribute values of &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h4 id=&#34;example-14:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.a({ href: &#39;./download.html&#39; }, function(m) {
    m.fa(&#39;download&#39;).text(&#39; Download&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;a href=&amp;quot;./download.html&amp;quot;&amp;gt;
  //     &amp;lt;i class=&amp;quot;fa fa-download&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Download&amp;lt;/a&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fields-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fieldsfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#fieldsFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fieldsFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a scope for nested forms. In this scope, a prefix is
addded to the name of each form control.&lt;/p&gt;

&lt;h4 id=&#34;example-15:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you pass the &lt;code&gt;index&lt;/code&gt; option to this method, the prefix is numbered:&lt;/p&gt;

&lt;h4 id=&#34;example-16:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;address&#39;, { index: 1 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
    m.fieldsFor(&#39;address&#39;, { index: 2 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/street&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#formFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-9:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag whose name attribute is &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Using this method instead of &lt;code&gt;#form&lt;/code&gt;, the form name prefix is
added to the &lt;code&gt;name&lt;/code&gt; attribute of subordinate form controls.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; attribute is set automatically. When the form name is &lt;code&gt;&#39;foo&#39;&lt;/code&gt;,
the &lt;code&gt;id&lt;/code&gt; attribute of a form control whose name is &lt;code&gt;bar&lt;/code&gt; becomes &lt;code&gt;&#39;foo-field-bar&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-17:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;name&#39;);
    m.checkBox(&#39;privileged&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //       id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       value=&amp;quot;0&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;hidden-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hiddenfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#hiddenField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hiddenField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-18:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.hiddenField(&#39;privileged&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;label-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;labelfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#labelFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-11:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;labelFor(name, label)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag whose &lt;code&gt;name&lt;/code&gt; attribute is &lt;code&gt;name&lt;/code&gt;.
Its &lt;code&gt;for&lt;/code&gt; attribute is set appropriately.&lt;/p&gt;

&lt;h4 id=&#34;example-19:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.div(function(m) {
      m.labelFor(&#39;name&#39;, &#39;User name&#39;).sp().textField(&#39;name&#39;);
    });
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.div(function(m) {
        m.labelFor(&#39;city&#39;, &#39;City&#39;).sp().textField(&#39;city&#39;);
      });
      m.div(function(m) {
        m.labelFor(&#39;street&#39;, &#39;Street&#39;).sp().textField(&#39;street&#39;);
      });
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-name&amp;quot;&amp;gt;User name&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //         id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //         City&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.home-address/city&amp;quot;
  //         id=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //         Street&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot;
  //         name=&amp;quot;user.home-address/street&amp;quot;
  //         id=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;markup&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;markup:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#markup()&lt;/h3&gt;

&lt;p&gt;This method is for internal use. Do not override it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;password-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;passwordfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#passwordField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;passwordField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;password&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-20:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.passwordField(&#39;password&#39;);
    m.passwordField(&#39;password_confirmation&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;user.password&amp;quot;
  //       id=&amp;quot;user-field-password&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot;
  //       name=&amp;quot;user.password_confirmation&amp;quot;
  //       id=&amp;quot;user-field-password-confirmation&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;radio-button&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;radiobutton:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#radioButton()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;select-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;selectbox:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#selectBox()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;sp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sp:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#sp()&lt;/h3&gt;

&lt;p&gt;This is an alias to &lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;space&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;space:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#space()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;space()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a single space character. Same as &lt;code&gt;text(&#39; &#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-21:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p(function(m) {
    m.text(this.message);
    m.space();
    m.strong(this.name);
    m.text(&#39;!&#39;);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;text:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#text()&lt;/h3&gt;

&lt;h4 id=&#34;usage-14:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text(string)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;em&gt;string&lt;/em&gt; as a text node to the virtual dom tree.
The special characters (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;) are escaped automatically.&lt;/p&gt;

&lt;h4 id=&#34;example-22:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.h1(function(m) {
    m.text(this.title).sp();
    m.small(this.subtitle);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to create a content from a string without escaping it,
use &lt;code&gt;innerHTML&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p({ innerHTML: &#39;&amp;amp;copy; &amp;lt;span&amp;gt;Foo Bar, Inc.&amp;lt;/span&amp;gt;&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;textarea-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textareafield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#textareaField()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#textField()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Router - API Reference</title>
      <link>http://oiax.github.io/capejs/api/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/router/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#action&#34;&gt;#action&lt;/a&gt; -
&lt;a href=&#34;#attach&#34;&gt;#attach()&lt;/a&gt; -
&lt;a href=&#34;#before-navigation&#34;&gt;#beforeNavigation()&lt;/a&gt; -
&lt;a href=&#34;#component&#34;&gt;#component&lt;/a&gt; -
&lt;a href=&#34;#container&#34;&gt;#container&lt;/a&gt; -
&lt;a href=&#34;#detach&#34;&gt;#detach()&lt;/a&gt; -
&lt;a href=&#34;#draw&#34;&gt;#draw()&lt;/a&gt; -
&lt;a href=&#34;#error-handler&#34;&gt;#errorHandler()&lt;/a&gt; -
&lt;a href=&#34;#flash&#34;&gt;#flash&lt;/a&gt; -
&lt;a href=&#34;#namespace&#34;&gt;#namespace&lt;/a&gt; -
&lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; -
&lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; -
&lt;a href=&#34;#mount&#34;&gt;#mount()&lt;/a&gt; -
&lt;a href=&#34;#params&#34;&gt;#params&lt;/a&gt; -
&lt;a href=&#34;#query&#34;&gt;#query&lt;/a&gt; -
&lt;a href=&#34;#redirect-to&#34;&gt;#redirectTo&lt;/a&gt; -
&lt;a href=&#34;#resource&#34;&gt;#resource&lt;/a&gt; -
&lt;a href=&#34;#route-for&#34;&gt;#routeFor()&lt;/a&gt; -
&lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; -
&lt;a href=&#34;#start&#34;&gt;#start()&lt;/a&gt; -
&lt;a href=&#34;#stop&#34;&gt;#stop()&lt;/a&gt; -
&lt;a href=&#34;#vars&#34;&gt;#vars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;flash&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;flash:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#flash&lt;/h3&gt;

&lt;h4 id=&#34;usage:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flash[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flash.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;flash&lt;/em&gt; object,
which is emptied after each navigation.&lt;/p&gt;

&lt;h4 id=&#34;example:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.flash.alert = &#39;The specified article has been deleted.&#39;;
router.navigate(&#39;articles&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;vars&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;vars:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#vars&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vars[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vars.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;vars&lt;/em&gt; object.&lt;/p&gt;

&lt;h4 id=&#34;example-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.vars.signedIn = Date.now();
router.vars.currentUser = { id: 99, name: &#39;john&#39;, privileged: true };
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.RoutingMapper - API Reference</title>
      <link>http://oiax.github.io/capejs/api/routing_mapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/routing_mapper/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>