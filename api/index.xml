<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apis on Cape.JS: Documentation</title>
    <link>http://oiax.github.io/capejs/api/</link>
    <description>Recent content in Apis on Cape.JS: Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://oiax.github.io/capejs/api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>API Reference</title>
      <link>http://oiax.github.io/capejs/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt; -
&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt; -
&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt; -
&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt; -
&lt;a href=&#34;./collection_agent&#34;&gt;Cape.CollectionAgent&lt;/a&gt; -
&lt;a href=&#34;./resource_agent&#34;&gt;Cape.ResourceAgent&lt;/a&gt; -
&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt; -
&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-cape-object:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;The &lt;code&gt;Cape&lt;/code&gt; object&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; defines a single global variable &lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt;.
It has some utility methods, such as &lt;code&gt;extend&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;overview-of-classes:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Overview of classes&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; consists of following five classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./collection_agent&#34;&gt;Cape.CollectionAgent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./resource_agent&#34;&gt;Cape.ResourceAgent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These classes are defined as properties of the &lt;code&gt;Cape&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The most basic class is &lt;code&gt;Cape.Component&lt;/code&gt;.
You need to define a class extending it in order to create a web widget using Cape.JS.
At least, instances of this class must have a method called &lt;code&gt;render&lt;/code&gt;, which defines
how the component should be rendered in HTML.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; is a class whose instances build &lt;em&gt;virtual dom trees.&lt;/em&gt;
Usually you don&amp;rsquo;t instantiate markup builders by yourself.
Instances of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are passed to the &lt;code&gt;render&lt;/code&gt; method of
component classes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.DataStore&lt;/code&gt; is a class to store and manipulate data, which is used by
components to render themselves.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.CollectionAgent&lt;/code&gt; has a role similar to the &lt;code&gt;Cape.DataStore&lt;/code&gt;,
but is much more powerful.
Using it you can perform REST requests to the web resources through simple API.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.ResourceAgent&lt;/code&gt; is a class to represent a particular resource on the web
and performs REST manipulations on it.&lt;/p&gt;

&lt;p&gt;Note that these two classes make use of the built-in
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&#34;&gt;Fetch API&lt;/a&gt;
in order to send Ajax requests to the servers.
They will help you to remove dependencies on jQuery from your applications.&lt;/p&gt;

&lt;p&gt;If you want to create a single page application (SPA), you may need an instance of &lt;code&gt;Cape.Router&lt;/code&gt;.
After you start it, it continues to watch the changes of &lt;em&gt;hash fragment&lt;/em&gt; of URL
and mount components according to the &lt;em&gt;routes&lt;/em&gt;
(associations between hashes and components) which you defined in advance.&lt;/p&gt;

&lt;p&gt;You have to call methods of &lt;code&gt;Cape.RoutingMapper&lt;/code&gt; in order to define the routes.
You will never instantiate it by youself, but will get its instance through the &lt;code&gt;draw&lt;/code&gt;
method of &lt;code&gt;Cape.Router&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape - API Reference</title>
      <link>http://oiax.github.io/capejs/api/cape/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/cape/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#create-collection-agent-class&#34;&gt;Cape.createCollectionAgentClass()&lt;/a&gt; -
&lt;a href=&#34;#create-component-class&#34;&gt;Cape.createComponentClass()&lt;/a&gt; -
&lt;a href=&#34;#create-data-store-class&#34;&gt;Cape.createDataStoreClass()&lt;/a&gt; -
&lt;a href=&#34;#create-resource-agent-class&#34;&gt;Cape.createResourceAgentClass()&lt;/a&gt; -
&lt;a href=&#34;#deep-extend&#34;&gt;Cape.deepExtend()&lt;/a&gt; -
&lt;a href=&#34;#default-agent-adapter&#34;&gt;Cape.defaultAgentAdapter&lt;/a&gt; -
&lt;a href=&#34;#extend&#34;&gt;Cape.extend()&lt;/a&gt; -
&lt;a href=&#34;#merge&#34;&gt;Cape.merge()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-collection-agent-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createcollectionagentclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createCollectionAgentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createCollectionAgentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.CollectionAgentClass&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createcomponentclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createComponentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createComponentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.Component&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HelloMessage extends Cape.Component {
  render(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createdatastoreclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createDataStoreClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createDataStoreClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.DataStore&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-1:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var TodoItemStore = Cape.createDataStoreClass({
  init: function() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
  },
  addItem: function(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  },
  toggle: function(item) {
    item.done = !item.done;
    this.propagate();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TodoItemStore extends Cape.DataStore {
  init() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
  }
  addItem(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  }
  toggle(item) {
    item.done = !item.done;
    this.propagate();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-resource-agent-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createresourceagentclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createResourceAgentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createResourceAgentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.ResourceAgentClass&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;default-agent-adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-defaultagentadapter:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.defaultAgentAdapter&lt;/h3&gt;

&lt;p&gt;This property is used as the default value of &lt;code&gt;adapter&lt;/code&gt; property of
collection agents and resource agents.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;../collection_agent#adapter&#34;&gt;CollectionAgent#adapter&lt;/a&gt; and
&lt;a href=&#34;../resource_agent#adapter&#34;&gt;ResourceAgent#adapter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;deep-extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-deepextend:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.deepExtend&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object recursively.&lt;/p&gt;

&lt;h4 id=&#34;example-2:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-extend:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.extend&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object.&lt;/p&gt;

&lt;h4 id=&#34;example-3:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;merge&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-merge:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.merge&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.merge(target&lt;em&gt;[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge (but not override) the properties of two or more objects together
into the first object&lt;/p&gt;

&lt;h4 id=&#34;example-4:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  apple: 2,
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 100 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.CollectionAgent - API Reference</title>
      <link>http://oiax.github.io/capejs/api/collection_agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/collection_agent/</guid>
      <description>

&lt;p&gt;&lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt; -
&lt;a href=&#34;#_&#34;&gt;#_&lt;/a&gt; -
&lt;a href=&#34;#adapter&#34;&gt;#adapter&lt;/a&gt; -
&lt;a href=&#34;#after-refresh&#34;&gt;#afterRefresh()&lt;/a&gt; -
&lt;a href=&#34;#ajax&#34;&gt;#ajax()&lt;/a&gt; -
&lt;a href=&#34;#auto-refresh&#34;&gt;#autoRefresh&lt;/a&gt; -
&lt;a href=&#34;#base-path&#34;&gt;#basePath&lt;/a&gt; -
&lt;a href=&#34;#collection-path&#34;&gt;#collectionPath()&lt;/a&gt; -
&lt;a href=&#34;#create&#34;&gt;#create()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data&lt;/a&gt; -
&lt;a href=&#34;#data-type&#34;&gt;#dataType&lt;/a&gt; -
&lt;a href=&#34;#default-error-handler&#34;&gt;#defaultErrorHandler()&lt;/a&gt; -
&lt;a href=&#34;#delete&#34;&gt;#delete()&lt;/a&gt; -
&lt;a href=&#34;#destroy&#34;&gt;#destroy()&lt;/a&gt; -
&lt;a href=&#34;#get&#34;&gt;#get()&lt;/a&gt; -
&lt;a href=&#34;#head&#34;&gt;#head()&lt;/a&gt; -
&lt;a href=&#34;#headers&#34;&gt;#headers&lt;/a&gt; -
&lt;a href=&#34;#index&#34;&gt;#index()&lt;/a&gt; -
&lt;a href=&#34;#member-path&#34;&gt;#memberPath()&lt;/a&gt; -
&lt;a href=&#34;#nested-in&#34;&gt;#nestedIn&lt;/a&gt; -
&lt;a href=&#34;#object&#34;&gt;#objects&lt;/a&gt; -
&lt;a href=&#34;#param-name&#34;&gt;#paramName&lt;/a&gt; -
&lt;a href=&#34;#params-for-refresh&#34;&gt;#paramsForRefresh()&lt;/a&gt; -
&lt;a href=&#34;#patch&#34;&gt;#patch()&lt;/a&gt; -
&lt;a href=&#34;#post&#34;&gt;#post()&lt;/a&gt; -
&lt;a href=&#34;#put&#34;&gt;#put()&lt;/a&gt; -
&lt;a href=&#34;#refresh&#34;&gt;#refresh()&lt;/a&gt; -
&lt;a href=&#34;#resource-name&#34;&gt;#resourceName&lt;/a&gt; -
&lt;a href=&#34;#shallow&#34;&gt;#shallow&lt;/a&gt; -
&lt;a href=&#34;#update&#34;&gt;#update()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;constructor&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;constructor:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cape.CollectionAgent&lt;/code&gt; constructor takes an object &lt;em&gt;(options)&lt;/em&gt; as the first argument.&lt;/p&gt;

&lt;h4 id=&#34;options:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Options&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resourceName:&lt;/strong&gt; the name of resource which is located on the web.
The collection agents use it in order to construct the paths of server-side API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;basePath:&lt;/strong&gt; the string that is added to the request path.
Default value is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nestedIn:&lt;/strong&gt; the string that is inserted between path prefix and the resource
name. Default value is &lt;code&gt;&#39;&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;adapter:&lt;/strong&gt; the name of adapter (e.g., &lt;code&gt;&#39;rails&#39;&lt;/code&gt;). Default is &lt;code&gt;undefined&lt;/code&gt;.
Default value can be changed by setting &lt;code&gt;Cape.defaultAgentAdapter&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autoRefresh:&lt;/strong&gt; a boolean value that controls if a &lt;code&gt;POST/PATCH/PUT/DELETE&lt;/code&gt; request
triggers &lt;code&gt;this.refresh()&lt;/code&gt; after its completion. Default is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dataType:&lt;/strong&gt; the type of data that you&amp;rsquo;re expecting from the server.
The value must be &lt;code&gt;undefined&lt;/code&gt; (default), &lt;code&gt;&#39;json&#39;&lt;/code&gt; or &lt;code&gt;&#39;text&#39;&lt;/code&gt;.
If this property is not set, the collection agents detect the data type
automatically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paramName:&lt;/strong&gt; the name of parameter to be used when the &lt;code&gt;objects&lt;/code&gt;
property is refreshed. Default is &lt;code&gt;undefiend&lt;/code&gt;.
When the &lt;code&gt;paramName&lt;/code&gt; option is not defined, the name is derived from the
&lt;code&gt;resourceName&lt;/code&gt; property, e.g. &lt;code&gt;users&lt;/code&gt; if the resource name is &lt;code&gt;users&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shallow:&lt;/strong&gt; a boolean value that controls whether the agent should omit
the &lt;code&gt;nestedIn&lt;/code&gt; string from the member path. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;
var comp = new Cape.Component();
var agent1 = new Cape.CollectionAgent(comp, { resourceName: &#39;users&#39; });
var agent2 = new Cape.CollectionAgent(comp, { resourceName: &#39;tags&#39;, basePath: &#39;/api/&#39; });
var agent3 = new Cape.CollectionAgent(comp, { resourceName: &#39;members&#39;, nestedIn: &#39;teams/123/&#39; });
var agent4 = new Cape.CollectionAgent(comp, { resourceName: &#39;articles&#39;, dataType: &#39;text&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;_&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_3:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#_&lt;/h3&gt;

&lt;p&gt;This property holds the agent&amp;rsquo;s &lt;em&gt;inner object,&lt;/em&gt; which keeps &lt;em&gt;private&lt;/em&gt; properties
and methods. Developers should not tamper with it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adapter:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#adapter&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;after-refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;afterrefresh:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#afterRefresh&lt;/h3&gt;

&lt;p&gt;This method gets called by the &lt;code&gt;refresh()&lt;/code&gt; method after it updates the &lt;code&gt;data&lt;/code&gt;
and &lt;code&gt;objects&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;afterRefresh()&lt;/code&gt; does &lt;code&gt;this.client.refresh()&lt;/code&gt; by default.
Developers may override this method to let the agent do some
post-processing jobs.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adapter-1:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#adapter&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;ajax&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ajax:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#ajax()&lt;/h3&gt;

&lt;h4 id=&#34;usage:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;auto-refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;autorefresh:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#autoRefresh&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;base-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;basepath:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#basePath&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;collection-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;collectionpath:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#collectionPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a collection of resources in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#collectionPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#create()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;create(params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with POST method to the URL that is constructed
by the &lt;a href=&#34;#collection-path&#34;&gt;collectionPath()&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The first argument (&lt;code&gt;params&lt;/code&gt;) must be an object (hash).&lt;/p&gt;

&lt;p&gt;The optional second argument (&lt;code&gt;callback&lt;/code&gt;) must be a function, which takes the
agent itself as the single argument and does some post-processing jobs.&lt;/p&gt;

&lt;p&gt;Ths optional third argument (&lt;code&gt;errorHandler&lt;/code&gt;) must be a function,
which takes an exception and does some error-handling jobs.&lt;/p&gt;

&lt;h4 id=&#34;example-1:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserList extends Cape.Component {
  init() {
    this.agent = new Cape.CollectionAgent(this, { resourceName: &#39;users&#39; })
    this.agent.refresh()
  }

  render(m) {
    m.ol(m =&amp;gt; {
      this.agent.objects.forEach(user =&amp;gt; {
        m.li(m =&amp;gt; {
          m.text(user.name);
        });
      });
    });
    m.formFor(&#39;user&#39;, m =&amp;gt; {
      m.labelFor(&#39;name&#39;, &#39;Name&#39;);
      m.textField(&#39;name&#39;);
      m.onclick(e =&amp;gt; {
        this.agent.create(this.paramsFor(&#39;user&#39;))
      });
      m.btn(&#39;Add User&#39;);
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#data&lt;/h3&gt;

&lt;p&gt;This property holds an object (hash)
if the response data is a valid JSON string.
Otherwise, it holds the original string value.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;datatype:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#dataType&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;default-error-hander&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;defaulterrorhandler:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#defaultErrorHandler()&lt;/h3&gt;

&lt;p&gt;This method handles the exception thrown during the Fetch API.&lt;/p&gt;

&lt;p&gt;The default implementation is just &lt;code&gt;console.log(ex)&lt;/code&gt;.
Developers may override this for a better exception handling.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;delete&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;delete:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#delete()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;delete(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;delete(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;delete(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with DELETE method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;destroy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;destroy:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#destroy()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;destroy(id)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(id, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(id, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with DELETE method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The first argument (&lt;code&gt;id&lt;/code&gt;) specifies the &lt;em&gt;id&lt;/em&gt; of the resource to be updated.
This is usually the value of primary key of a database record, but is not
always the case.&lt;/p&gt;

&lt;p&gt;The optional second argument (&lt;code&gt;callback&lt;/code&gt;) must be a function, which takes the
agent itself as the single argument and does some post-processing jobs.&lt;/p&gt;

&lt;p&gt;Ths optional third argument (&lt;code&gt;errorHandler&lt;/code&gt;) must be a function,
which takes an exception and does some error-handling jobs.&lt;/p&gt;

&lt;h4 id=&#34;example-2:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserList extends Cape.Component {
  init() {
    this.agent = new Cape.CollectionAgent(this, { resourceName: &#39;users&#39; })
    this.agent.refresh()
  }

  render(m) {
    m.ol(m =&amp;gt; {
      this.agent.objects.forEach(user =&amp;gt; {
        m.li(m =&amp;gt; {
          m.text(user.name);
          m.onclick(e =&amp;gt; {
            this.agent.destroy(user.id);
          });
          m.btn(&#39;Delete&#39;);
        });
      });
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;get&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;get:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#get()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;get(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;get(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;get(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with GET method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;get-instance&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;getinstance:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;.getInstance()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;p&gt;Returns an instance of collection agent.&lt;/p&gt;

&lt;p&gt;This class method is implemented as a &lt;em&gt;multiton&lt;/em&gt; method,
which keeps a map of named instances
of the class as key-value pairs in order to ensure a single instance per key.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; options are used to construct
the key.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;head&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;head:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#head()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;head(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;head(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;head(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with HEAD method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;headers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;headers:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#headers&lt;/h3&gt;

&lt;p&gt;This property holds the HTTP headers for Ajax requests.&lt;/p&gt;

&lt;p&gt;The default value is &lt;code&gt;{ &#39;Content-Type&#39;: &#39;application/json&#39; }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;index&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;index:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#index()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index(params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index(params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index(params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with GET method to the URL that is constructed
by the &lt;code&gt;collectionPath()&lt;/code&gt; method and the &lt;code&gt;params&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;member-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;memberpath:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#memberPath()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;memberPath(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the URL path to a resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#memberPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; part of the URL path (&lt;code&gt;9&lt;/code&gt;) derives from the &lt;code&gt;id&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;nested-in&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;nestedin:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#nestedIn&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;objects&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;objects:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#objects&lt;/h3&gt;

&lt;p&gt;This property holds an array of objects (hashes) that represents the
collection of resources which the agent is associated to.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;param-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramname:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#paramName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params-for-refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramsforrefresh:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#paramsForRefresh()&lt;/h3&gt;

&lt;h4 id=&#34;usage-9:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;paramsForRefresh()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns an empty object (&lt;code&gt;{}&lt;/code&gt;) always. This object is used to construct
the query string of the request URL during the &lt;code&gt;refresh()&lt;/code&gt; process.&lt;/p&gt;

&lt;p&gt;Developers may override this method to change this behavior.&lt;/p&gt;

&lt;h4 id=&#34;example-3:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserAgent extends Cape.CollectionAgent {
  constructor(options) {
    super(options);
    this.page = 1;
    this.perPage = 20;
  }

  paramsForRefresh() {
    return { page: this.page, per_page: this.perPage };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;patch&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;patch:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#patch()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;patch(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;patch(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;patch(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PATCH method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;post&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;post:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#post()&lt;/h3&gt;

&lt;h4 id=&#34;usage-11:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;post(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;post(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;post(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with POST method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;put&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;put:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#put()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;put(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;put(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;put(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PUT method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;refresh:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#refresh()&lt;/h3&gt;

&lt;p&gt;This method sends an Ajax request with GET method to the URL that is constructed
by the &lt;a href=&#34;#collection-path&#34;&gt;#collectionPath()&lt;/a&gt; and
&lt;a href=&#34;#params-for-refresh&#34;&gt;#paramsForRefresh()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resourcename:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#resourceName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;shallow&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shallow:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#shallow&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;update&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;update:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;#update()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;update(id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PATCH method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The first argument (&lt;code&gt;id&lt;/code&gt;) specifies the &lt;em&gt;id&lt;/em&gt; of the resource to be updated.
This is usually the value of primary key of a database record, but is not
always the case.&lt;/p&gt;

&lt;p&gt;The second argument (&lt;code&gt;params&lt;/code&gt;) must be an object (hash).&lt;/p&gt;

&lt;p&gt;The optional third argument (&lt;code&gt;callback&lt;/code&gt;) must be a function, which takes the
agent itself as the single argument and does some post-processing jobs.&lt;/p&gt;

&lt;p&gt;Ths optional fourth argument (&lt;code&gt;errorHandler&lt;/code&gt;) must be a function,
which takes an exception and does some error-handling jobs.&lt;/p&gt;

&lt;h4 id=&#34;example-4:7cf50d10a54b2c097102d0c8a749f9fb&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserList extends Cape.Component {
  init() {
    this.agent = new Cape.CollectionAgent(this, { resourceName: &#39;users&#39; })
    this.agent.refresh()
  }

  render(m) {
    m.ol(m =&amp;gt; {
      this.agent.objects.forEach(user =&amp;gt; {
        m.li(m =&amp;gt; {
          m.text(user.name);
          m.onclick(e =&amp;gt; {
            this.agent.update(user.id, { user: { deleted: 1 } });
          });
          m.btn(&#39;Delete&#39;);
        });
      });
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Component - API Reference</title>
      <link>http://oiax.github.io/capejs/api/component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/component/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#checked-on&#34;&gt;checkedOn()&lt;/a&gt; -
&lt;a href=&#34;#form-data&#34;&gt;formData()&lt;/a&gt; -
&lt;a href=&#34;#json-for&#34;&gt;jsonFor()&lt;/a&gt; -
&lt;a href=&#34;#mount&#34;&gt;mount()&lt;/a&gt; -
&lt;a href=&#34;#params-for&#34;&gt;paramsFor()&lt;/a&gt; -
&lt;a href=&#34;#refresh&#34;&gt;refresh()&lt;/a&gt; -
&lt;a href=&#34;#root&#34;&gt;root&lt;/a&gt; -
&lt;a href=&#34;#unmount&#34;&gt;unmount()&lt;/a&gt; -
&lt;a href=&#34;#val&#34;&gt;val()&lt;/a&gt; -
&lt;a href=&#34;#values-for&#34;&gt;valuesFor()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;checked-on&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkedon-span-class-badge-alert-info-1-2-span:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#checkedOn() &lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;usage:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkedOn(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; is checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; exists but is not checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.checkBox(&#39;done&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.checkedOn(&#39;done&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the form has a &lt;code&gt;name&lt;/code&gt; attribute, you should prepend its value and a dot
to the name of check box.&lt;/p&gt;

&lt;h4 id=&#34;example-1:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;task&#39;, function(m) {
    m.checkBox(&#39;done&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.checkedOn(&#39;task.done&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formdata:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#formData()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formData()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns a JavaScript object that represents the values of
all form controls within the component.&lt;/p&gt;

&lt;p&gt;The values are organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-2:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-3:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;,
    addresses: {
      &#39;0&#39;: {
        country: &#39;Japan&#39;,
        city: &#39;Tokyo&#39;
      },
      &#39;1&#39;: {
        country: &#39;USA&#39;,
        city: &#39;New York&#39;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;json-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;jsonfor-span-class-badge-alert-info-1-1-span:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#jsonFor() &lt;span class=&#34;badge alert-info&#34;&gt;1.1&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jsonFor(formName)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thid method returns a JSON string that represents the field values of
a named form.&lt;/p&gt;

&lt;p&gt;The values are organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-4:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;jsonFor()&lt;/code&gt; method of its instances returns a string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;user&amp;quot;: { &amp;quot;login_name&amp;quot;: &amp;quot;john&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-5:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;jsonFor()&lt;/code&gt; method of its instances returns a string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;user&amp;quot;: {&amp;quot;login_name&amp;quot;: &amp;quot;john&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;}, &amp;quot;addresses&amp;quot;: [{&amp;quot;country&amp;quot;: &amp;quot;Japan&amp;quot;, &amp;quot;city&amp;quot;: &amp;quot;Tokyo&amp;quot; }, {&amp;quot;country&amp;quot;: &amp;quot;USA&amp;quot;, &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mount:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#mount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mount(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method renders the component and inserts it within the element specified by &lt;em&gt;id.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-6:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
var HelloWorld = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, World!&#39;)
  }
});
var component = new HelloWorld();
component.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the component has the &lt;code&gt;init()&lt;/code&gt; method, the &lt;code&gt;mount()&lt;/code&gt; calls it
instead of rendering the component.&lt;/p&gt;

&lt;h4 id=&#34;example-7:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloWorld = Cape.createComponentClass({
  init: function() {
    this.name = &#39;World&#39;;
    this.refresh();
  },

  render: function(m) {
    m.p(&#39;Hello, &#39; + this.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should have to call the &lt;code&gt;refresh()&lt;/code&gt; method at the end
to render the component.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramsfor-span-class-badge-alert-info-1-1-span:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#paramsFor() &lt;span class=&#34;badge alert-info&#34;&gt;1.1&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Thid method returns an object that represents the field values of
a named form.&lt;/p&gt;

&lt;p&gt;The returned object is organized in hierarchical structure
so that you can pass it to the &lt;a href=&#34;http://api.jquery.com/jquery.ajax/&#34;&gt;ajax()&lt;/a&gt; method of jQuery.&lt;/p&gt;

&lt;h4 id=&#34;example-8:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose that you have a component defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;name&#39;);
      m.passwordField(&#39;password&#39;);
      m.btn(&#39;Sign in&#39;, { onclick: function(e) { this.save(); } });
    });
  },
  save: function() {
    $.ajax({
      url: &#39;/sessions/&#39;,
      method: &#39;POST&#39;,
      data: this.paramsFor(&#39;user&#39;)
    }).done(function(data) {
      // Do something.
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you fill in &lt;code&gt;name&lt;/code&gt; field with &amp;lsquo;john&amp;rsquo; and &lt;code&gt;password&lt;/code&gt; field with &lt;code&gt;1234&lt;/code&gt;
and click the &amp;lsquo;Sign in&amp;rsquo; button, &lt;code&gt;this.paramsFor(&#39;user&#39;)&lt;/code&gt; passes
to the &lt;code&gt;data&lt;/code&gt; option of the &lt;code&gt;ajax()&lt;/code&gt; the following object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    name: &amp;quot;john&amp;quot;,
    password: &amp;quot;1234&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that jQuery converts this object to a query string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user[name]=john&amp;amp;user[password]=1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-9:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose that you have a component defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  init: function() {
    this.user_id = 123;
    this.setValues({
      user: {
        name: &#39;john&#39;,
        addresses: [
          { country: &#39;Japan&#39;, city: &#39;Tokyo&#39; },
          { country: &#39;USA&#39;, city: &#39;New York&#39; }
        ]
      }
    });
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;name&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        });
      }
      m.btn(&#39;Save&#39;, { onclick: function(e) { this.save(); } });
    });
  },
  save: function() {
    $.ajax({
      url: &#39;/sessions/&#39; + this.user_id,
      method: &#39;PATH&#39;,
      data: this.paramsFor(&#39;user&#39;)
    }).done(function(data) {
      // Do something.
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you change the value of &lt;code&gt;name&lt;/code&gt; field from &amp;lsquo;john&amp;rsquo; to &amp;lsquo;mike&amp;rsquo; and click &amp;lsquo;Save&amp;rsquo;
button, &lt;code&gt;this.paramsFor(&#39;user&#39;)&lt;/code&gt; passes to the &lt;code&gt;data&lt;/code&gt; option of the &lt;code&gt;ajax()&lt;/code&gt;
the following object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    name: &amp;quot;mike&amp;quot;,
    addresses: {
      &#39;0&#39;: {
        country: &amp;quot;Japan&amp;quot;,
        city: &amp;quot;Tokyo&amp;quot;
      },
      &#39;1&#39;: {
        country: &amp;quot;USA&amp;quot;,
        city: &amp;quot;New York&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that jQuery converts this object to a query string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user[name]=mike&amp;amp;user[addresses][0][country]=Japan&amp;amp;user[addresses][0][city]=Tokyo&amp;amp;user[addresses][1][country]=USA&amp;amp;user[addresses][1][city]=New+York
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;refresh:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#refresh()&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;refresh()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method rerenders the component by calling its &lt;code&gt;render()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;root&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;root:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#root&lt;/h3&gt;

&lt;p&gt;This property refers to the HTML element which the component is mounted on.&lt;/p&gt;

&lt;p&gt;Its &lt;code&gt;data&lt;/code&gt; subproperty holds the values of &lt;code&gt;data-*&lt;/code&gt; attributes of the root element.&lt;/p&gt;

&lt;h4 id=&#34;example-10:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;The following example shows &amp;ldquo;Hello, John!&amp;rdquo; on your browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=&amp;quot;main&amp;quot; data-name=&amp;quot;John&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
var component = new HelloMessage();
component.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;unmount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;unmount:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#unmount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;unmount()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the component from the HTML document.&lt;/p&gt;

&lt;p&gt;If the component has the &lt;code&gt;beforeUnmount()&lt;/code&gt; method, it is called before the component is unmounted.
If the component has the &lt;code&gt;afterUnmount()&lt;/code&gt; method, it is called after the component has been unmounted.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;val&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;val:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#val()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;val(name)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get or set the value of a form field.&lt;/p&gt;

&lt;p&gt;When the number of arguments is one and that argument is a string,
this method returns the value of the corresponding field.&lt;/p&gt;

&lt;h4 id=&#34;example-11:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.val(&#39;user.family_name&#39;));
        console.log(this.val(&#39;user.given_name&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is two,
this method sets the value of a field whose name is corresponding
to the first argument to the second argument and returns
the original value of the field.&lt;/p&gt;

&lt;h4 id=&#34;example-12:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;message&#39;, function(m) {
    m.textField(&#39;body&#39;);
    m.button(&#39;Send&#39;, {
      onclick: function(e) {
        var body = this.val(&#39;message.body&#39;, &#39;&#39;),
            self = this;
        $.post(&#39;/api/messages&#39;, { body: body }, function() {
          self.refresh();
        });
        return false;
      }
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is one and that argument is an object,
this method sets the value of corresponding fields.&lt;/p&gt;

&lt;h4 id=&#34;example-13:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        var self = this,
            data = self.formData();
        self.val({ user: { family_name: &#39;&#39;, given_name: &#39;&#39; } });
        $.post(&#39;/api/users&#39;, data, function() {
          self.refresh();
        })
        return false;
      }
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;values-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;valuesfor-span-class-badge-alert-info-1-1-span:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#valuesFor() &lt;span class=&#34;badge alert-info&#34;&gt;1.1&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Thid method sets the field values of a named form by passing an object as the first argument.&lt;/p&gt;

&lt;p&gt;The values of this object must be organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-14:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you render a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  init: function() {
    this.valuesFor({
      user: {
        login_name: &#39;john&#39;,
        gender: &#39;m&#39;
      }
    });
    this.refresh();
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.radioButton(&#39;gender&#39;, &#39;m&#39;);
      m.radioButton(&#39;gender&#39;, &#39;f&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the only text field is filled with a string &amp;ldquo;john&amp;rdquo; and the first
radio button is checked.&lt;/p&gt;

&lt;h4 id=&#34;example-15:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you render a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  init: function() {
    this.valuesFor({
      user: {
        login_name: &#39;john&#39;,
        addresses: [
          { country: &#39;Japan&#39;, city: &#39;Tokyo&#39; },
          { country: &#39;USA&#39;, city: &#39;New York&#39; }
        ]
      }
    });
    this.refresh();
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the all text fields are filled in.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.DataStore - API Reference</title>
      <link>http://oiax.github.io/capejs/api/data_store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/data_store/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt; -
&lt;a href=&#34;#attach&#34;&gt;#attach()&lt;/a&gt; -
&lt;a href=&#34;#create&#34;&gt;.create()&lt;/a&gt; -
&lt;a href=&#34;#detach&#34;&gt;#detach()&lt;/a&gt; -
&lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;constructor&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;constructor:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cape.DataStore&lt;/code&gt; constructor takes no argument and calls its &lt;code&gt;#init&lt;/code&gt; method
if defined.&lt;/p&gt;

&lt;h4 id=&#34;example:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var cs = new CounterStore();
// cs.counter === 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also &lt;a href=&#34;../cape/#create-data-store-class&#34;&gt;Cape.createDataStoreClass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attach:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;#attach()&lt;/h3&gt;

&lt;h4 id=&#34;usage:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method registers the &lt;em&gt;component&lt;/em&gt; as a target of &lt;em&gt;propagation&lt;/em&gt; from this data store.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;.create()&lt;/h3&gt;

&lt;p&gt;This class method returns a singleton object of this Class.&lt;/p&gt;

&lt;h4 id=&#34;example-1:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var cs1 = CounterStore.create();
var cs2 = CounterStore.create();
// cs1 === cs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;detach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;detach:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;#detach()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;detach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the &lt;em&gt;component&lt;/em&gt; from the list of targets of &lt;em&gt;propagation&lt;/em&gt; from this data store.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;propagate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;propagate:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;#propagate()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;propagate()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method triggars the &lt;em&gt;propagation&lt;/em&gt; process, which calls the &lt;code&gt;#refresh()&lt;/code&gt; method
of all components registerd as targets of &lt;em&gt;propagation&lt;/em&gt; of this data store.&lt;/p&gt;

&lt;p&gt;Eventually, the &lt;code&gt;#refresh&lt;/code&gt; method of each component calls its &lt;code&gt;#render()&lt;/code&gt; method,
which has to be defined by developers.&lt;/p&gt;

&lt;p&gt;Thus, we can assure that each time the data of a data store changes,
its all dependent components get refreshed.&lt;/p&gt;

&lt;h4 id=&#34;example-2:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var ClickCounter = Cape.createComponentClass({
  render: function(m) {
    m.div(String(this.ds.counter),
      { onclick: function(e) { this.ds.increment() } })
  }
})

var ds = new CounterStore();
var comp1 = new ClickCounter();
var comp2 = new ClickCounter();

comp1.ds = ds;
comp2.ds = ds;
ds.attach(comp1);
ds.attach(comp2);

comp1.mount(&#39;counter1&#39;);
comp2.mount(&#39;counter2&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.MarkupBuilder - API Reference</title>
      <link>http://oiax.github.io/capejs/api/markup_builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/markup_builder/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#general-notes&#34;&gt;General notes&lt;/a&gt; -
&lt;a href=&#34;#a-abbr-address-etc&#34;&gt;#a(), #abbr(), #address()&lt;/a&gt; -
&lt;a href=&#34;#area-base-br-etc&#34;&gt;#area(), #base(), #br()&lt;/a&gt; -
&lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt; -
&lt;a href=&#34;#btn&#34;&gt;#btn()&lt;/a&gt; -
&lt;a href=&#34;#check-box&#34;&gt;#checkBox()&lt;/a&gt; -
&lt;a href=&#34;#checked&#34;&gt;#checked()&lt;/a&gt; -
&lt;a href=&#34;#class&#34;&gt;#class()&lt;/a&gt; -
&lt;a href=&#34;#css&#34;&gt;#css()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data()&lt;/a&gt; -
&lt;a href=&#34;#disabled&#34;&gt;#disabled()&lt;/a&gt; -
&lt;a href=&#34;#elem&#34;&gt;#elem()&lt;/a&gt; -
&lt;a href=&#34;#fa&#34;&gt;#fa()&lt;/a&gt; -
&lt;a href=&#34;#fields-for&#34;&gt;#fieldsFor()&lt;/a&gt; -
&lt;a href=&#34;#form-for&#34;&gt;#formFor()&lt;/a&gt; -
&lt;a href=&#34;#hidden-field&#34;&gt;#hiddenField()&lt;/a&gt; -
&lt;a href=&#34;#label-for&#34;&gt;#labelFor()&lt;/a&gt; -
&lt;a href=&#34;#markup&#34;&gt;#markup()&lt;/a&gt; -
&lt;a href=&#34;#on&#34;&gt;#on()&lt;/a&gt; -
&lt;a href=&#34;#onblur-onfocus-etc&#34;&gt;#onblur(), #onfocus(), etc.&lt;/a&gt; -
&lt;a href=&#34;#password-field&#34;&gt;#passwordField()&lt;/a&gt; -
&lt;a href=&#34;#radio-button&#34;&gt;#radioButton()&lt;/a&gt; -
&lt;a href=&#34;#select-box&#34;&gt;#selectBox()&lt;/a&gt; -
&lt;a href=&#34;#sp&#34;&gt;#sp()&lt;/a&gt; -
&lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt; -
&lt;a href=&#34;#text&#34;&gt;#text()&lt;/a&gt; -
&lt;a href=&#34;#textarea-field&#34;&gt;#textareaField()&lt;/a&gt; -
&lt;a href=&#34;#text-field&#34;&gt;#textField()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;general-notes&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;general-notes:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;General notes&lt;/h3&gt;

&lt;p&gt;All instance methods of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are &lt;em&gt;chainable.&lt;/em&gt;
Each method returns the instance itself.&lt;/p&gt;

&lt;h4 id=&#34;example:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.text(&#39;Hello,&#39;).sp().text(this.guest.name).text(&#39;!&#39;);
      // The above single statement is equivalent to the
      // following four statement;
      //   m.text(&#39;Hello,&#39;);
      //   m.sp();
      //   m.text(this.guest.name);
      //   m.text(&#39;!&#39;);
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All instance methods except &lt;code&gt;#attr&lt;/code&gt;, &lt;code&gt;#class&lt;/code&gt;, &lt;code&gt;#css&lt;/code&gt;, &lt;code&gt;#data&lt;/code&gt;, &lt;code&gt;#sp&lt;/code&gt;, &lt;code&gt;#space&lt;/code&gt;
and &lt;code&gt;#text&lt;/code&gt; take the &lt;em&gt;options&lt;/em&gt; argument, which will be translated into the
attributes of element to be created.&lt;/p&gt;

&lt;h4 id=&#34;example-1:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;, { title: &#39;greeting&#39; });
      // The above code generates the following &amp;lt;p&amp;gt; tag:
      //   &amp;lt;p title=&amp;quot;greeting&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;em&gt;options&lt;/em&gt; argument has a &lt;code&gt;visible&lt;/code&gt; key and its value is &lt;em&gt;falsey&lt;/em&gt;
(&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;),
it sets the &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt; to make this element invisible.&lt;/p&gt;

&lt;h4 id=&#34;example-2:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;,
        { visible: Date.now().getDay() === 0 });
      // On sunday, the above code generates the following:
      //   &amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
      // On other days:
      //   &amp;lt;p style=&amp;quot;display: none&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;a-abbr-address-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-abbr-address-etc:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#a(), #abbr(), #address(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a, abbr, address, article, aside, audio, b, bdi, bdo,
  blockquote, body, button, canvas, caption, cite, code,
  colgroup, datalist, dd, del, details, dfn, dialog, div,
  dl, dt, em, embed, fieldset, figcaption, figure, footer,
  h1, h2, h3, h4, h5, h6, head, header, html,
  i, iframe, ins, kbd, label, legend, li, main, map, mark,
  menu, menuitem, meter, nav, noscript, object, ol, optgroup,
  option, output, p, pre, progress, q, rp, rt, ruby, s,
  samp, script, section, select, small, span, strong, style,
  sub, summary, sup, table, tbody, td, textarea, tfoot,
  th, thead, time, title, tr, u, ul, var, video&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the first argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-3:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article(function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;);
      m.ul(function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-4:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article({ id: &#39;agenda&#39; }, function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;,
        { className: &#39;statement&#39; });
      m.ul({ style: &#39;color: blue&#39; }, function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;area-base-br-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;area-base-br-etc:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#area(), #base(), #br(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;area([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;base([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;br([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 &lt;em&gt;void&lt;/em&gt; elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;area, base, br, col, embed, hr, img, input, keygen,
link, menuitem, meta, param, source, track, wbr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They don&amp;rsquo;t take a string argument nor a function argument, though.
They only accept a hash object to set the attribute values of the element.&lt;/p&gt;

&lt;h4 id=&#34;example-5:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var LogoMark = Cape.createComponentClass({
  render: function(m) {
    m.div({ id: &#39;agenda&#39; }, function(m) {
      m.img({ src: &#39;../images/logo.png&#39;, alt: &#39;Logo Image&#39; })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attr&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attr:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#attr()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attr(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;attr({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the value of attributes for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-6:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  // Or, m.attr({ alt: &#39;Logo Image&#39; });
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute values are set cumulatively.&lt;/p&gt;

&lt;h4 id=&#34;example-7:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.attr(&#39;width&#39;, &#39;180&#39;);
  m.attr(&#39;height&#39;, &#39;120&#39;);
  m.attr(&#39;title&#39;, &#39;Cape.JS&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39;,
  //           width: &#39;180&#39;, height: &#39;120&#39;,
  //           title: &#39;Cape.JS&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The values set by &lt;code&gt;#attr&lt;/code&gt; does not affect the elements created after the next element.&lt;/p&gt;

&lt;h4 id=&#34;example-8:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  m.img({ src: &#39;../images/download.png&#39; });
  // The last statement creates a &amp;lt;img&amp;gt; tag without
  // alt attribute.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;check-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkbox:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#checkBox()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkBox(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.
See &lt;a href=&#34;#formFor&#34;&gt;#formFor&lt;/a&gt; for details.&lt;/p&gt;

&lt;h4 id=&#34;example-9:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelOf(&#39;privileged&#39;, function(m) {
      m.checkBox(&#39;privileged&#39;);
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //       &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //         id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //     &amp;lt;/label&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;btn&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;btn:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#btn()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;btn(content, options)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;btn(options, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element whose &lt;code&gt;type&lt;/code&gt; attribute is set to &lt;code&gt;button&lt;/code&gt; by default.&lt;/p&gt;

&lt;h4 id=&#34;example-10:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;test&#39;, function(m) {
    m.btn(&#39;Click&#39;);
  });
  // The above code generates the following HTML tags
  //   &amp;lt;form name=&amp;quot;test&amp;quot;&amp;gt;
  //     &amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;Click&amp;lt;/button&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;checked&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checked:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#checked()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checked(boolean)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a shortcut method which has the same effect with &lt;code&gt;#attr(&#39;checked&#39;, boolean)&lt;/code&gt;.
See &lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-11:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.checked(true).input({ type: &#39;checkbox&#39; })
  // The above code generates the following HTML tag
  //   &amp;lt;input type=&amp;quot;checkbox&amp;quot; checked&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;class:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#class()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;class(name)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;class(names)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;class({ name1: boolean1, name2: boolean2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;class&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-12:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;container&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-13:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;panel panel-standard&#39;);
  m.div(&#39;Hello World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;panel panel-standard&amp;quot;&amp;gt;
  //     Hello, World!
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-14:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class({ panel: true, &#39;panel-standard&#39;: true, top: false });
  m.div(&#39;Hello World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;panel panel-standard&amp;quot;&amp;gt;
  //     Hello, World!
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#class&lt;/code&gt; method add classes cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;css&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;css:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#css()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;css(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the styles for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-15:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.css(&#39;color&#39;, &#39;red&#39;).span(&#39;Danger&#39;);
  // This is equivalent to the following statement:
  //   m.span(&#39;Danger&#39;, { style: &#39;color: red&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should write names of style in camel case.&lt;/p&gt;

&lt;h4 id=&#34;example-16:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.css({ backgroundColor: &#39;red&#39; }).p(&#39;Danger&#39;);
  // This is equivalent to the following statement:
  //   m.p(&#39;Danger&#39;, { style: &#39;background-color: red&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#data()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;data-*&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-17:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data(&#39;id&#39;, &#39;7&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div data-id=&amp;quot;7&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#data&lt;/code&gt; method sets attribute values cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;h4 id=&#34;example-18:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data({ id: &#39;7&#39; });
  m.p(&#39;Hello, World!&#39;);
  m.p(&#39;Hello, World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;p data-id=&amp;quot;7&amp;quot;&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names specified in camel case are converted into a string separated by dashes.&lt;/p&gt;

&lt;h4 id=&#34;example-19:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data({ messageId: &#39;7&#39; });
  m.p(&#39;Hello, World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;p data-message-id=&amp;quot;7&amp;quot;&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;disabled&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;disabled:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#disabled()&lt;/h3&gt;

&lt;h4 id=&#34;usage-9:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;disabled(boolean)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a shortcut method which has the same effect with &lt;code&gt;#attr(&#39;disabled&#39;, boolean)&lt;/code&gt;.
See &lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-20:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.disabled(true).input({ type: &#39;text&#39; })
  // The above code generates the following HTML tag
  //   &amp;lt;input type=&amp;quot;text&amp;quot; disabled&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;elem&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;elem:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#elem()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;elem(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elem([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create an HTML element. The first argument is a CSS selector, such as &lt;code&gt;&amp;quot;div.container&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the second argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-21:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;);
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-22:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, { style: &#39;margin-top: 10px&#39; },
    function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;,
          { style: &#39;font-weight: bold&#39; });
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot; style=&amp;quot;margin-top: 10px&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;
  //           style=&amp;quot;font-weight: bold&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fa&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fa:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#fa()&lt;/h3&gt;

&lt;h4 id=&#34;usage-11:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fa(name [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;font awesome&lt;/a&gt; icon
(actually, it is just an empty &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag) to the virtual dom tree.
Its first argument is the icon&amp;rsquo;s name, such as &lt;code&gt;&amp;quot;download&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;gear&amp;quot;&lt;/code&gt;, etc.
You can pass a hash object as the optional second argument to set the
attribute values of &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h4 id=&#34;example-23:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.a({ href: &#39;./download.html&#39; }, function(m) {
    m.fa(&#39;download&#39;).text(&#39; Download&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;a href=&amp;quot;./download.html&amp;quot;&amp;gt;
  //     &amp;lt;i class=&amp;quot;fa fa-download&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Download&amp;lt;/a&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fields-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fieldsfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#fieldsFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fieldsFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a scope for nested forms. In this scope, a prefix is
addded to the name of each form control.&lt;/p&gt;

&lt;h4 id=&#34;example-24:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you pass the &lt;code&gt;index&lt;/code&gt; option to this method, the prefix is numbered:&lt;/p&gt;

&lt;h4 id=&#34;example-25:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;address&#39;, { index: 1 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
    m.fieldsFor(&#39;address&#39;, { index: 2 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/street&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#formFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag whose name attribute is &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Using this method instead of &lt;code&gt;#form&lt;/code&gt;, the form name prefix is
added to the &lt;code&gt;name&lt;/code&gt; attribute of subordinate form controls.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; attribute is set automatically. When the form name is &lt;code&gt;&#39;foo&#39;&lt;/code&gt;,
the &lt;code&gt;id&lt;/code&gt; attribute of a form control whose name is &lt;code&gt;bar&lt;/code&gt; becomes &lt;code&gt;&#39;foo-field-bar&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-26:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;name&#39;);
    m.checkBox(&#39;privileged&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //       id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       value=&amp;quot;0&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;hidden-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hiddenfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#hiddenField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-14:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hiddenField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-27:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.hiddenField(&#39;privileged&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;label-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;labelfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#labelFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-15:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;labelFor(name, label)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag whose &lt;code&gt;name&lt;/code&gt; attribute is &lt;code&gt;name&lt;/code&gt;.
Its &lt;code&gt;for&lt;/code&gt; attribute is set appropriately.&lt;/p&gt;

&lt;h4 id=&#34;example-28:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.div(function(m) {
      m.labelFor(&#39;name&#39;, &#39;User name&#39;).sp().textField(&#39;name&#39;);
    });
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.div(function(m) {
        m.labelFor(&#39;city&#39;, &#39;City&#39;).sp().textField(&#39;city&#39;);
      });
      m.div(function(m) {
        m.labelFor(&#39;street&#39;, &#39;Street&#39;).sp().textField(&#39;street&#39;);
      });
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-name&amp;quot;&amp;gt;User name&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //         id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //         City&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.home-address/city&amp;quot;
  //         id=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //         Street&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot;
  //         name=&amp;quot;user.home-address/street&amp;quot;
  //         id=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;markup&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;markup:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#markup()&lt;/h3&gt;

&lt;p&gt;This method is for internal use. Do not override it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;on&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;on:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#on()&lt;/h3&gt;

&lt;h4 id=&#34;usage-16:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;on(eventName, function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the handler of event &lt;em&gt;eventName&lt;/em&gt; for the element which will be added nextly
to &lt;em&gt;function.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-29:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.on(&#39;click&#39;, function(e) { this.counter++ });
  m.on(&#39;dblclick&#39;, function(e) { this.counter = 0 });
  m.span(&#39;Click me!&#39;);
  // These two statements are equivalent to the following
  // single statement:
  //   m.span(&#39;Click me!&#39;,
  //     { onclick: function(e) { this.counter++ },
  //       ondblclick: function(e) { this.counter = 0 } })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute values are set cumulatively.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;onblur-onfocus-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;onblur-onfocus-etc:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#onblur(), #onfocus(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage-17:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;onblur(function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onfocus(function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are shortcut methods which have same effects with &lt;code&gt;#on(&#39;blur&#39;, function)&lt;/code&gt;,
&lt;code&gt;#on(&#39;focus&#39;, function)&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Similar shortcut methods are defined for the following events:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;blur, focus, change, select, submit, reset, abort, error,
load, unload, click, dblclick, keyup, keydown, keypress,
mouseout, mouseover, mouseup, mousedown, mousemove&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;example-30:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.onclick(function(e) { this.counter++ });
  m.ondblclick(function(e) { this.counter = 0 });
  m.span(&#39;Click me!&#39;);
  // These two statements are equivalent to the following
  // single statement:
  //   m.span(&#39;Click me!&#39;,
  //     { onclick: function(e) { this.counter++ },
  //       ondblclick: function(e) { this.counter = 0 } })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;password-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;passwordfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#passwordField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-18:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;passwordField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;password&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-31:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.passwordField(&#39;password&#39;);
    m.passwordField(&#39;password_confirmation&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;user.password&amp;quot;
  //       id=&amp;quot;user-field-password&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot;
  //       name=&amp;quot;user.password_confirmation&amp;quot;
  //       id=&amp;quot;user-field-password-confirmation&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;radio-button&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;radiobutton:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#radioButton()&lt;/h3&gt;

&lt;h4 id=&#34;usage-19:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;radioButton(name, value[, options])&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second argument becomes the value of this radio button.&lt;/p&gt;

&lt;h4 id=&#34;example-32:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.label(&#39;A&#39;, function(m) {
      m.radioButton(&#39;plan&#39;, &#39;a&#39;);
    })
    m.label(&#39;B&#39;, function(m) {
      m.radioButton(&#39;plan&#39;, &#39;b&#39;);
    })
    m.label(&#39;C&#39;, function(m) {
      m.radioButton(&#39;plan&#39;, &#39;c&#39;);
    })
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label&amp;gt;
  //       &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;user.plan&amp;quot;
  //         id=&amp;quot;user-field-plan-a&amp;quot; value=&amp;quot;a&amp;quot;&amp;gt;A
  //     &amp;lt;/label&amp;gt;
  //     &amp;lt;label&amp;gt;
  //       &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;user.plan&amp;quot;
  //         id=&amp;quot;user-field-plan-b&amp;quot; value=&amp;quot;b&amp;quot;&amp;gt;B
  //     &amp;lt;/label&amp;gt;
  //     &amp;lt;label&amp;gt;
  //       &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;user.plan&amp;quot;
  //         id=&amp;quot;user-field-plan-c&amp;quot; value=&amp;quot;c&amp;quot;&amp;gt;C
  //     &amp;lt;/label&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;select-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;selectbox:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#selectBox()&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;selectBox(name, [options,] callback)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-33:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.selectBox(&#39;plan&#39;, function(m) {
      m.option(&#39;A&#39;, { value: &#39;a&#39; });
      m.option(&#39;B&#39;, { value: &#39;b&#39; });
      m.option(&#39;C&#39;, { value: &#39;c&#39; });
    })
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //      &amp;lt;select name=&amp;quot;plan&amp;quot; id=&amp;quot;user-field-plan&amp;quot;&amp;gt;
  //        &amp;lt;option value=&amp;quot;a&amp;quot;&amp;gt;A&amp;lt;/option&amp;gt;
  //        &amp;lt;option value=&amp;quot;b&amp;quot;&amp;gt;B&amp;lt;/option&amp;gt;
  //        &amp;lt;option value=&amp;quot;c&amp;quot;&amp;gt;C&amp;lt;/option&amp;gt;
  //      &amp;lt;/select&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;sp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sp:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#sp()&lt;/h3&gt;

&lt;p&gt;This is an alias to &lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;space&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;space:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#space()&lt;/h3&gt;

&lt;h4 id=&#34;usage-20:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;space()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a single space character. Same as &lt;code&gt;text(&#39; &#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-34:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p(function(m) {
    m.text(this.message);
    m.space();
    m.strong(this.name);
    m.text(&#39;!&#39;);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;text:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#text()&lt;/h3&gt;

&lt;h4 id=&#34;usage-21:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text(string)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;em&gt;string&lt;/em&gt; as a text node to the virtual dom tree.
The special characters (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;) are escaped automatically.&lt;/p&gt;

&lt;h4 id=&#34;example-35:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.h1(function(m) {
    m.text(this.title).sp();
    m.small(this.subtitle);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to create a content from a string without escaping it,
use &lt;code&gt;innerHTML&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p({ innerHTML: &#39;&amp;amp;copy; &amp;lt;span&amp;gt;Foo Bar, Inc.&amp;lt;/span&amp;gt;&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;textarea-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textareafield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#textareaField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-22:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;textField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-36:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelFor(&#39;remarks&#39;, &#39;Remarks&#39;).br();
    m.textareaField(&#39;remarks&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-remarks&amp;quot;&amp;gt;
  //       Remarks&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
  //     &amp;lt;textarea name=&amp;quot;user.remarks&amp;quot;
  //       id=&amp;quot;user-field-remarks&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#textField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-23:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;textField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-37:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelFor(&#39;login_name&#39;, &#39;Login Name&#39;).sp();
    m.textField(&#39;login_name&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-login-name&amp;quot;&amp;gt;
  //       Login Name&amp;lt;/label&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.login_name&amp;quot;
  //       id=&amp;quot;user-field-login-name&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.ResourceAgent - API Reference</title>
      <link>http://oiax.github.io/capejs/api/resource_agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/resource_agent/</guid>
      <description>

&lt;p&gt;&lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt; -
&lt;a href=&#34;#_&#34;&gt;#_&lt;/a&gt; -
&lt;a href=&#34;#adapter&#34;&gt;#adapter&lt;/a&gt; -
&lt;a href=&#34;#ajax&#34;&gt;#ajax()&lt;/a&gt; -
&lt;a href=&#34;#base-path&#34;&gt;#basePath&lt;/a&gt; -
&lt;a href=&#34;#client&#34;&gt;#client&lt;/a&gt; -
&lt;a href=&#34;#collection-path&#34;&gt;#collectionPath()&lt;/a&gt; -
&lt;a href=&#34;#create&#34;&gt;#create()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data&lt;/a&gt; -
&lt;a href=&#34;#data-type&#34;&gt;#dataType&lt;/a&gt; -
&lt;a href=&#34;#default-error-hander&#34;&gt;#defaultErrorHandler()&lt;/a&gt; -
&lt;a href=&#34;#destroy&#34;&gt;#destroy()&lt;/a&gt; -
&lt;a href=&#34;#errors&#34;&gt;#errors&lt;/a&gt; -
&lt;a href=&#34;#formName&#34;&gt;#formName&lt;/a&gt; -
&lt;a href=&#34;#headers&#34;&gt;#headers&lt;/a&gt; -
&lt;a href=&#34;#id&#34;&gt;#id&lt;/a&gt; -
&lt;a href=&#34;#init&#34;&gt;#init()&lt;/a&gt; -
&lt;a href=&#34;#member-path&#34;&gt;#memberPath()&lt;/a&gt; -
&lt;a href=&#34;#object&#34;&gt;#object&lt;/a&gt; -
&lt;a href=&#34;#new-path&#34;&gt;#newPath()&lt;/a&gt; -
&lt;a href=&#34;#nested-in&#34;&gt;#nestedIn&lt;/a&gt; -
&lt;a href=&#34;#param-name&#34;&gt;#paramName&lt;/a&gt; -
&lt;a href=&#34;#resource-name&#34;&gt;#resourceName&lt;/a&gt; -
&lt;a href=&#34;#shallow&#34;&gt;#shallow&lt;/a&gt; -
&lt;a href=&#34;#singular&#34;&gt;#singular&lt;/a&gt; -
&lt;a href=&#34;#singular-path&#34;&gt;#singularPath()&lt;/a&gt; -
&lt;a href=&#34;#update&#34;&gt;#update()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;constructor&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;constructor:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cape.ResourceAgent&lt;/code&gt; constructor takes
a &lt;code&gt;Cape.Component&lt;/code&gt; object and an optional object (options) as arguments.&lt;/p&gt;

&lt;h4 id=&#34;options:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Options&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resourceName:&lt;/strong&gt; the name of resource.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;basePath:&lt;/strong&gt; the string that is added to the request path. Default value is &amp;lsquo;/&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nestedIn:&lt;/strong&gt; the string that is inserted between path prefix and the resource
name. Default value is &amp;ldquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;adapter:&lt;/strong&gt; the name of adapter (e.g., &lt;code&gt;&#39;rails&#39;&lt;/code&gt;). Default is &lt;code&gt;undefined&lt;/code&gt;.
Default value can be changed by setting &lt;code&gt;Cape.defaultAgentAdapter&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autoRefresh:&lt;/strong&gt; a boolean value that controls if a &lt;code&gt;POST/PATCH/PUT/DELETE&lt;/code&gt; request
triggers &lt;code&gt;this.refresh()&lt;/code&gt; after its completion. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dataType:&lt;/strong&gt; the type of data that you&amp;rsquo;re expecting from the server.
The value must be &lt;code&gt;&#39;json&#39;&lt;/code&gt; (default) or &lt;code&gt;&#39;text&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pathPrefix:&lt;/strong&gt; the string that is added to the request path.
Default value is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;singular:&lt;/strong&gt; a boolean value that specifies if the resource is singular or not.
Resources are called &lt;em&gt;singular&lt;/em&gt; when they have a URL without ID. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;formName:&lt;/strong&gt; the name of form with which the users edit the properties
of the resource. Default is &lt;code&gt;undefiend&lt;/code&gt;.
When the &lt;code&gt;formName&lt;/code&gt; option is not defined, the name is derived from the
&lt;code&gt;resourceName&lt;/code&gt; property, e.g. &lt;code&gt;user&lt;/code&gt; if the resource name is &lt;code&gt;user&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paramName:&lt;/strong&gt; the name of parameter to be used when the &lt;code&gt;object&lt;/code&gt;
property is initialized and the request parameter is constructed.
Default is &lt;code&gt;undefiend&lt;/code&gt;.
When the &lt;code&gt;paramName&lt;/code&gt; option is not defined, the name is derived from the
&lt;code&gt;resourceName&lt;/code&gt; property, e.g. &lt;code&gt;user&lt;/code&gt; if the resource name is &lt;code&gt;user&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shallow:&lt;/strong&gt; a boolean value that controls whether the agent should omit
the &lt;code&gt;nestedIn&lt;/code&gt; string from the member path. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;adapters:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Adapters&lt;/h4&gt;

&lt;p&gt;Currently, Cape.JS provides only &lt;code&gt;RailsAdapter&lt;/code&gt;, which sets the &lt;code&gt;X-CSRF-Token&lt;/code&gt; header
for Ajax requests.&lt;/p&gt;

&lt;h4 id=&#34;example:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;

var Form = Cape.createComponentClass({
  init: function() {
    this.agent = new Cape.ResourceAgent(this, { resourceName: &#39;user&#39; });
    this.agent.id = 123;
    this.agent.init();
  },

  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.onclick(e =&amp;gt; this.agent.update()).btn(&#39;Update&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually, You will want to define a class inheriting &lt;code&gt;Cape.ResourceAgent&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;

var UserAgent = Cape.createResourceAgentClass({
  constructor: function(client, options) {
    super(client, options);
    this.resourceName = &#39;user&#39;;
  }
})

var Form = Cape.createComponentClass({
  init: function() {
    this.agent = new UserAgent(this);
    this.agent.id = 123;
    this.agent.init();
  },

  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.onclick(e =&amp;gt; this.agent.update()).btn(&#39;Update&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;_&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_4:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#_&lt;/h3&gt;

&lt;p&gt;This property holds the agent&amp;rsquo;s &lt;em&gt;inner object,&lt;/em&gt; which keeps &lt;em&gt;private&lt;/em&gt; properties
and methods. Developers should not tamper with it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adapter:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#adapter&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;ajax&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ajax:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#ajax()&lt;/h3&gt;

&lt;h4 id=&#34;usage:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request to the server.&lt;/p&gt;

&lt;h4 id=&#34;example-1:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;

var Page = Cape.createComponentClass({
  init: function() {
    this.agent = new Cape.ResourceAgent(this);
    this.refresh();
  },

  render: function(m) {
    m.onclick(e =&amp;gt; {
      this.agent.ajax(&#39;POST&#39;, &#39;/counter&#39;, {}, function(data) {
        alert(data);
      })
    });
    m.btn(&#39;Click&#39;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;base-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;basepath:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#basePath&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;client&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;client:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#client&lt;/h3&gt;

&lt;p&gt;This property holds an instance of &lt;code&gt;Cape.Component&lt;/code&gt; class, which has been
passed as the first argument of constructor.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;collection-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;collectionpath:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#collectionPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a collection of resources in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#collectionPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#create()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;create()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send an Ajax request with POST method to the URL that is constructed
by the &lt;code&gt;collectionPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#data&lt;/h3&gt;

&lt;p&gt;This property holds the object that is build from the JSON string returned
from the server during &lt;code&gt;refresh()&lt;/code&gt; process if the response data from the server
is a valid JSON string.&lt;/p&gt;

&lt;p&gt;Otherwise, it holds the response data from the server as is.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;datatype:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#dataType&lt;/h3&gt;

&lt;p&gt;This property holds the type of data that you&amp;rsquo;re expecting from the server.
The value must be &lt;code&gt;&#39;json&#39;&lt;/code&gt;, &lt;code&gt;&#39;text&#39;&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.
When the &lt;code&gt;dataType&lt;/code&gt; option is not defined, the type is detected automatically.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;default-error-hander&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;defaulterrorhandler:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#defaultErrorHandler()&lt;/h3&gt;

&lt;p&gt;This method handles the exception thrown during the Fetch API.&lt;/p&gt;

&lt;p&gt;The default implementation is just &lt;code&gt;console.log(ex)&lt;/code&gt;.
Developers may override this for a better exception handling.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;destroy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;destroy:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#destroy()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;destroy()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send an Ajax request with DELETE method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;errors&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;errors:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#errors&lt;/h3&gt;

&lt;p&gt;This property holds an object (key-value pairs) whose keys are the
attribute names of the resource and whose values are the validation
error messages.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formname:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#formName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;headers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;headers:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#headers&lt;/h3&gt;

&lt;p&gt;This property holds the HTTP headers for Ajax requests.
The default valued is &lt;code&gt;{ &#39;Content-Type&#39;: &#39;application/json&#39; }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;id&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;id:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#id&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;id&lt;/em&gt; of resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;init&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;init:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#init()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;init()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method initializes the &lt;a href=&#34;#object&#34;&gt;object&lt;/a&gt; property by sending an Ajax
request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;member-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;memberpath:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#memberPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#memberPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; part of the URL path (&lt;code&gt;9&lt;/code&gt;) derives from the &lt;code&gt;id&lt;/code&gt; property of the agent.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;object&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;object:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#object&lt;/h3&gt;

&lt;p&gt;This property holds an object (hash) that represents the resource which
the agent is associated to.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;new-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;newpath:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#newPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a &lt;em&gt;new&lt;/em&gt; resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#newPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users/new&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users/new&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users/new&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users/new&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A &lt;em&gt;new&lt;/em&gt; resource is a resource for a form for creating an resource.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;nested-in&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;nestedin:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#nestedIn&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;param-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramname:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#paramName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resourcename:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#resourceName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;shallow&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shallow:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#shallow&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;singular&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;singular:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#singular&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;singular-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;singularpath:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#singularPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a &lt;em&gt;singular&lt;/em&gt; resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#singularPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/account&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/account&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/account&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/account&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A singular resource is a resource that clients always look up without
referencing an ID.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;update&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;update:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;#update()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:04a8a0920f0d1f82717b9a315e5e6489&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;update()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PATCH method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Router - API Reference</title>
      <link>http://oiax.github.io/capejs/api/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/router/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#action&#34;&gt;#action&lt;/a&gt; -
&lt;a href=&#34;#attach&#34;&gt;#attach()&lt;/a&gt; -
&lt;a href=&#34;#before-navigation&#34;&gt;#beforeNavigation()&lt;/a&gt; -
&lt;a href=&#34;#component&#34;&gt;#component&lt;/a&gt; -
&lt;a href=&#34;#container&#34;&gt;#container&lt;/a&gt; -
&lt;a href=&#34;#detach&#34;&gt;#detach()&lt;/a&gt; -
&lt;a href=&#34;#draw&#34;&gt;#draw()&lt;/a&gt; -
&lt;a href=&#34;#error-handler&#34;&gt;#errorHandler()&lt;/a&gt; -
&lt;a href=&#34;#flash&#34;&gt;#flash&lt;/a&gt; -
&lt;a href=&#34;#namespace&#34;&gt;#namespace&lt;/a&gt; -
&lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; -
&lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; -
&lt;a href=&#34;#mount&#34;&gt;#mount()&lt;/a&gt; -
&lt;a href=&#34;#params&#34;&gt;#params&lt;/a&gt; -
&lt;a href=&#34;#query&#34;&gt;#query&lt;/a&gt; -
&lt;a href=&#34;#redirect-to&#34;&gt;#redirectTo&lt;/a&gt; -
&lt;a href=&#34;#resource&#34;&gt;#resource&lt;/a&gt; -
&lt;a href=&#34;#route-for&#34;&gt;#routeFor()&lt;/a&gt; -
&lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; -
&lt;a href=&#34;#start&#34;&gt;#start()&lt;/a&gt; -
&lt;a href=&#34;#stop&#34;&gt;#stop()&lt;/a&gt; -
&lt;a href=&#34;#vars&#34;&gt;#vars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;action&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;action:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#action&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;action name&lt;/em&gt; of the current route.&lt;/p&gt;

&lt;h4 id=&#34;example:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.action); // =&amp;gt; &amp;quot;edit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attach:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#attach()&lt;/h3&gt;

&lt;h4 id=&#34;usage:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method register the &lt;em&gt;component&lt;/em&gt; as the target of &lt;em&gt;notification&lt;/em&gt; from this router.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;before-navigation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;beforenavigation:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#beforeNavigation()&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;../../router/#before-navigation-callbacks&#34;&gt;Before-Navigation Callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;component&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;component:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#component&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;component name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.component); // =&amp;gt; &amp;quot;edit&amp;quot;
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.component); // =&amp;gt; &amp;quot;edit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;container&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;container:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#container&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;container name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-2:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.container); // =&amp;gt; &amp;quot;articles&amp;quot;
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.container); // =&amp;gt; &amp;quot;admin.articles&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;detach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;detach:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#detach()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;detach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the &lt;em&gt;component&lt;/em&gt; from the list of targets of &lt;em&gt;notification&lt;/em&gt; from this router.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;draw&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;draw:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#draw()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;draw(function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method specify a function that takes a &lt;code&gt;RoutingMapper&lt;/code&gt; object and defines routes.&lt;/p&gt;

&lt;h4 id=&#34;example-3:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;dashboard&#39;);
  m.page(&#39;about&#39;, &#39;docs.about&#39;);
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the argument &lt;code&gt;m&lt;/code&gt; is a &lt;code&gt;RoutingMapper&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;error-handler&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;errorhandler:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#errorHandler()&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;../../router/#before-navigation-callbacks&#34;&gt;Before-Navigation Callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;flash&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;flash:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#flash&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flash[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flash.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;flash&lt;/em&gt; object,
which is emptied after each navigation.&lt;/p&gt;

&lt;h4 id=&#34;example-4:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.flash.alert = &#39;The specified article has been deleted.&#39;;
router.navigate(&#39;articles&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;namespace&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;container-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#container&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;namespace&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-5:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.namespace); // =&amp;gt; null
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.namespace); // =&amp;gt; &amp;quot;admin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;navigate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;navigate:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#navigate()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;navigate(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When before-navigation callbacks are registered, they are executed
before changing the anchor part of URL.
If the before-navigation callbacks select other string for &lt;em&gt;hash&lt;/em&gt;,
it will be set to the anchor part of the browser&amp;rsquo;s current URL.&lt;/p&gt;

&lt;p&gt;After setting the anchor part of URL, this method choose a component
according to the routing table.&lt;/p&gt;

&lt;p&gt;When this component is different from the component which is mounted currently,
it unmounts the latter and mounts the former.
When this component is same with the component mounted currently
it calls the &lt;code&gt;#refresh&lt;/code&gt; method of mounted component.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code&gt;#notify()&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want the &lt;code&gt;#notify()&lt;/code&gt; method to be executed, use &lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;notify&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;notify:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#notify()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;notify()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method triggars the &lt;em&gt;notification&lt;/em&gt; process, which calls the &lt;code&gt;#refresh()&lt;/code&gt; method
of all components registerd as targets of &lt;em&gt;notification&lt;/em&gt; of this data store.&lt;/p&gt;

&lt;p&gt;Eventually, each target component executes its &lt;code&gt;#render()&lt;/code&gt; method,
which has to be defined by developers.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#notify()&lt;/code&gt; method is executed after each time the &lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; method is called.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mount:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#mount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mount(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method specifies the &lt;code&gt;id&lt;/code&gt; of the HTML element which this router
inserts the components into.&lt;/p&gt;

&lt;h4 id=&#34;example-6:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Top&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#about&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#help&amp;quot;&amp;gt;Help&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;top_page&#39;);
  m.page(&#39;about&#39;, &#39;about_page&#39;);
  m.page(&#39;help&#39;, &#39;help_page&#39;);
})
router.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, components are mounted into the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;&#39;main&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;params:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#params&lt;/h3&gt;

&lt;p&gt;This property holds a set of key-value pairs, which represents the parameters
embedded in the main part (before the first &amp;lsquo;?&amp;rsquo; symbol) of hash.&lt;/p&gt;

&lt;h4 id=&#34;example-7:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;help/:name&#39;, &#39;help.item&#39;);
  m.many(&#39;articles&#39;, function(m) {
    m.many(&#39;comments&#39;);
  });
})
router.navigate(&#39;help/password&#39;);
// router.params.name === &#39;password&#39;
router.navigate(&#39;articles/123&#39;)
// router.params.id === &#39;123&#39;
router.navigate(&#39;articles/123/comments/7&#39;)
// router.params.article_id === &#39;123&#39;
// router.params.id === &#39;7&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;query&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;query:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#query&lt;/h3&gt;

&lt;p&gt;This property holds a set of key-value pairs, which represents the parameters
embedded in the query part (after the first &amp;lsquo;?&amp;rsquo; symbol) of hash .&lt;/p&gt;

&lt;h4 id=&#34;example-8:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;)
})
router.navigate(&#39;articles&#39;)
// router.query === {}
router.navigate(&#39;articles?page=2&#39;)
// router.query.page === &#39;2&#39;
router.navigate(&#39;articles?page=2&amp;amp;deleted&#39;)
// router.query.page === &#39;2&#39;
// router.query.deleted === &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;redirect-to&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;redirectto:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#redirectTo()&lt;/h3&gt;

&lt;p&gt;This method sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; method, before-navigationi callbacks are &lt;em&gt;not&lt;/em&gt; executed
before changing the anchor part of URL.&lt;/p&gt;

&lt;p&gt;After setting the anchor part of URL, this method choose a component
according to the routing table.&lt;/p&gt;

&lt;p&gt;When this component is different from the component mounted currently,
it unmounts the latter and mounts the former.
When this component is same with the component which is mounted currently
it calls the &lt;code&gt;#refresh&lt;/code&gt; method of the mounted component.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code&gt;#notify()&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resource:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#resource&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;resource name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-9:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;);
  m.many(&#39;articles&#39;, function(m) {
    m.many(&#39;comments&#39;);
  });
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;account/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;account&amp;quot;
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles&amp;quot;
router.navigate(&#39;articles/123/comments&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles/comments&amp;quot;
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;route-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;routefor:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#routeFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;routeFor(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns the first route matching to the &lt;em&gt;hash,&lt;/em&gt; if any.&lt;/p&gt;

&lt;h4 id=&#34;example-10:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
var route = router.routeFor(&#39;admin/articles/123/edit&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;show&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;show:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#show()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;show(componentClass)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method mounts an instance of &lt;em&gt;componentClass&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt;, it does neither change the anchor part of
current URL, nor call the &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;start&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;start:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#start()&lt;/h3&gt;

&lt;p&gt;With this method call, routers begin to listen to &lt;code&gt;hashchange&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;stop&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;stop:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#stop()&lt;/h3&gt;

&lt;p&gt;With this method call, routers stop to listen to &lt;code&gt;hashchange&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;vars&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;vars:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#vars&lt;/h3&gt;

&lt;h4 id=&#34;usage-9:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vars[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vars.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;vars&lt;/em&gt; object.&lt;/p&gt;

&lt;h4 id=&#34;example-11:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.vars.signedIn = Date.now();
router.vars.currentUser = { id: 99, name: &#39;john&#39;, privileged: true };
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.RoutingMapper - API Reference</title>
      <link>http://oiax.github.io/capejs/api/routing_mapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/routing_mapper/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#collection&#34;&gt;collection()&lt;/a&gt; -
&lt;a href=&#34;#namespace&#34;&gt;namespace()&lt;/a&gt; -
&lt;a href=&#34;#new&#34;&gt;new()&lt;/a&gt; -
&lt;a href=&#34;#many&#34;&gt;many()&lt;/a&gt; -
&lt;a href=&#34;#member&#34;&gt;member()&lt;/a&gt; -
&lt;a href=&#34;#one&#34;&gt;one()&lt;/a&gt; -
&lt;a href=&#34;#page&#34;&gt;page()&lt;/a&gt; -
&lt;a href=&#34;#root&#34;&gt;root()&lt;/a&gt; -
&lt;a href=&#34;#view&#34;&gt;view()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;collection&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;collection:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#collection()&lt;/h3&gt;

&lt;h4 id=&#34;usage:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;collection(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a &lt;em&gt;collection&lt;/em&gt; route (a route which deals with multiple items).&lt;/p&gt;

&lt;h4 id=&#34;example:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.collection &#39;draft&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/draft&lt;/code&gt; to &lt;code&gt;Articles.Draft&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#collection()&lt;/code&gt; method must be called within a block that defines a plural resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;namespace&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;namespace:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#namespace()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;namespace(name, function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Introduces a &lt;em&gt;function&lt;/em&gt; tha defines resources under the specified &lt;em&gt;namespace&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Namespace&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/new&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;new&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;new:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#new()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;new(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds an alternate &lt;em&gt;new&lt;/em&gt; action to a resource, which can be plural or singular.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.new &#39;preview&#39;
  });
  m.many(&#39;articles&#39;, function(m) {
    m.new &#39;preview&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account/new/preview&lt;/code&gt; to &lt;code&gt;Account.Preview&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/new/preview&lt;/code&gt; to &lt;code&gt;Articles.Preview&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;many&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;many:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#many()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines four routes for a plural resource.&lt;/p&gt;

&lt;h4 id=&#34;example-1:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/new&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4 id=&#34;usage-4:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name, { only: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds routes for &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a plural resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;index&amp;rdquo;, &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-2:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, { only: [ &#39;index&#39;, &#39;show&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;articles/&lt;/code&gt; to &lt;code&gt;Articles.List&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/:id&lt;/code&gt; to &lt;code&gt;Articles.Item&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;usage-5:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name, { except: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds basic routes excepting &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a plural resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;index&amp;rdquo;, &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-3:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, { except: [ &#39;new&#39;, &#39;edit&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;articles/&lt;/code&gt; to &lt;code&gt;Articles.List&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/:id&lt;/code&gt; to &lt;code&gt;Articles.Item&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;member&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;member:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#member()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;member(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a &lt;em&gt;member&lt;/em&gt; route (a route which deals with a specific item).&lt;/p&gt;

&lt;h4 id=&#34;example-4:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.member &#39;info&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/:id/info&lt;/code&gt; to &lt;code&gt;Articles.Info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#member()&lt;/code&gt; method must be called within a block that defines a plural resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;one&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;one:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#one()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines four routes for a singular resource.&lt;/p&gt;

&lt;h4 id=&#34;example-5:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Content&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/new&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/edit&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4 id=&#34;usage-8:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name, { only: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds routes for &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a singular resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-6:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.new(&#39;account&#39;, { only: [ &#39;show&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account/&lt;/code&gt; to &lt;code&gt;Account.Content&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;usage-9:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name, { except: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds basic routes excepting &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a singular resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-7:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, { except: [ &#39;new&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account&lt;/code&gt; to &lt;code&gt;Account.Content&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;account/edit&lt;/code&gt; to &lt;code&gt;Account.Form&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;page&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;page:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#page()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page(hashPattern, componentClassPath)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &lt;em&gt;hashPattern&lt;/em&gt; to &lt;em&gt;componentClassPath.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-8:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;dashboard&#39;, &#39;dashboard&#39;);
  m.page(&#39;about&#39;, &#39;docs.about&#39;);
  m.page(&#39;help/:name&#39;, &#39;docs.help&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-11:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page(hashPattern, componentClassPath, constraints)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &lt;em&gt;hashPattern&lt;/em&gt; to &lt;em&gt;componentClassPath&lt;/em&gt; with constraints
on the parameters, which are specified by regular expression string.&lt;/p&gt;

&lt;h4 id=&#34;example-9:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;blog/:year/:month&#39;, &#39;blog.articles&#39;,
    { year: &#39;201\\d&#39;, month: &#39;(:?0[1-9]|1[012])&#39; });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should put &lt;code&gt;:?&lt;/code&gt; to make parentheses
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses&#34;&gt;non-capturing parentheses&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;root&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;root:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#root()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;root(componentClassPath)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &amp;ldquo;&amp;rdquo; to &lt;em&gt;componentClassPath.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-10:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  root(&#39;Dashboard&#39;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;view&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;view:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#view()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;view(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a custom route to a singular resource.&lt;/p&gt;

&lt;h4 id=&#34;example-11:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.view &#39;image&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;account/image&lt;/code&gt; to &lt;code&gt;Account.Image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#view()&lt;/code&gt; method must be called within a block that defines a singular resource.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>