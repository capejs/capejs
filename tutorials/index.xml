<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Cape.JS: Documentation</title>
    <link>http://oiax.github.io/capejs/tutorials/</link>
    <description>Recent content in Tutorials on Cape.JS: Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://oiax.github.io/capejs/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://oiax.github.io/capejs/tutorials/capejs_primer/01_hello_world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/tutorials/capejs_primer/01_hello_world/</guid>
      <description>

&lt;h1 id=&#34;hello-world:7cae6aa1b176223df2ea9b54e9ae96fb&#34;&gt;Hello, world!&lt;/h1&gt;

&lt;p&gt;The first serial story of &amp;ldquo;Cape.JS Primer&amp;rdquo; is starting from a practice to show &amp;ldquo;Hello, world!&amp;rdquo; on a browser screen as the tradition.&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
Although I&#39;m afraid to inform you this, Cape.JS supports only Firefox, Google Chrome, Safari 6.1 or later, and Internet Explore 11. Especially, it doesn&#39;t operate while using Internet Explorer 10 or earlier.
&lt;/div&gt;

&lt;p&gt;I know this is sudden, but create a HTML file by using some text editor and which content is below. And save it as &lt;code&gt;hello_message1.html&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;HELLO WORLD&amp;lt;/title&amp;gt;
  &amp;lt;script src=&amp;quot;https://cdn.rawgit.com/oiax/capejs/v1.0.1/dist/cape.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script&amp;gt;
    var HelloMessage = Cape.createComponentClass({
      render: function(m) {
        m.p(&#39;Hello, world!&#39;);
      }
    });

    var component = new HelloMessage();
    component.mount(&#39;main&#39;);
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, open the file on the browser. It&amp;rsquo;s supposed to be tiny display on the upper left of the screen.&lt;/p&gt;

&lt;div class=&#34;block-image&#34;&gt;
&lt;img src=&#34;http://oiax.github.io/capejs/capejs/images/capejs_primer/hello_message1.png&#34; alt=&#34;Screen capture&#34;&gt;
&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s very simple but also a brave program of Cape.JS.&lt;/p&gt;

&lt;p&gt;The program is written within a tag &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, world!&#39;);
  }
});

var component = new HelloMessage();
component.mount(&#39;main&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first 5 lines define &lt;strong&gt;class&lt;/strong&gt; a &lt;code&gt;HelloMessage&lt;/code&gt; . It creates the instance and put &lt;code&gt;component&lt;/code&gt; into the variable and lastly, call the method &lt;code&gt;mount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A basic pattern of programming of Cape.JS is to define the component class, make its instance and place it somewhere in a website. Each instance of the component class has the method &lt;code&gt;mount&lt;/code&gt;. When you specify an value with an &lt;code&gt;id&lt;/code&gt; attribute of an element on the website, you can mount the component there.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; is written in the HTML file of the example above. The component &lt;code&gt;HelloMessage&lt;/code&gt; is mounted within there.&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
I think observant readers may notice that the program of Cape.JS is very similar to the program of &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;. The creator of Cape.JS (that is me in fact) met React and &lt;a href=&#34;https://muut.com/riotjs/&#34;&gt;Riot&lt;/a&gt; when I looked for a JavaScript UL framework for my development project and start developing of Cape.JS because he thought he could make it by himself. Cape.JS is influenced greatly from these frameworks such as from terminology, the way to choose names of method to implementations of inside.
&lt;/div&gt;

&lt;p&gt;Well, the component class of Cape.JS has to have the instant method &lt;code&gt;render&lt;/code&gt;. The role of this method is to make &lt;strong&gt;virtual DOS tree&lt;/strong&gt;. I&amp;rsquo;ll explain what &amp;ldquo;virtual DOS tree&amp;rdquo; is in another setting, and please understand that you learn &amp;ldquo;a part of HTML document&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;render&lt;/code&gt; the class &lt;code&gt;HelloMessage&lt;/code&gt; is defined as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p(&#39;Hello, world!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A unique parameter (&lt;code&gt;m&lt;/code&gt;) of the method is an object as called as ** Markup builder**. We prescribe this object the way to make the part of HTML document.&lt;/p&gt;

&lt;p&gt;An interesting character of Cape.JS is that the method name directly corresponds to an element name of HTML. In the example above the method &lt;code&gt;p&lt;/code&gt; is used and of course it corresponds to the element &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. That means that make the part of HTML document like below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s easy to image the way to surround &amp;ldquo;Hello, world!&amp;rdquo; with the tag &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; instead of the tag &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. Yes, you&amp;rsquo;re right. It&amp;rsquo;s supposed to be written like following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.h1(&#39;Hello, world!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, what should we do if we want to make the virtual DOM tree &lt;code&gt;&amp;lt;div class=&amp;quot;greeting&amp;quot;&amp;gt;Hello, world!&amp;lt;/div&amp;gt;&lt;/code&gt;? There are 4 ways prepared by Cape.JS.  The first way is to pass the method &lt;code&gt;div&lt;/code&gt; as hash representing the name and value of HTML attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.div(&#39;Hello, world!&#39;, { class: &#39;greeting&#39; });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second way is to call the method &lt;code&gt;class&lt;/code&gt; before calling the method &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;greeting&#39;);
  m.div(&#39;Hello, world!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, decide the &lt;code&gt;class&lt;/code&gt; attribute of an element to be added to the virtual DOM tree for the method &lt;code&gt;class&lt;/code&gt; of markup builder,&lt;/p&gt;

&lt;p&gt;The third way is also to call the method &lt;code&gt;class&lt;/code&gt; but pass hash as parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class({ greeting: true });
  m.div(&#39;Hello, world!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The forth way is to enter the method &lt;code&gt;elem&lt;/code&gt;. This method used character string of CSS&amp;rsquo;s selector format to the first parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div.greeting&#39;, &#39;Hello, world!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These four ways have both advantages and disadvantages. The first way is the most intuitive but the possibility may be getting lower if the program gets more difficult. In case when you change &lt;code&gt;class&lt;/code&gt; attributes of HTML element, it&amp;rsquo;s easier to code in the second or third way. For some people, the forth way may be attractive.&lt;/p&gt;

&lt;p&gt;And, it&amp;rsquo;s possible to joint methods like a chain because markup builder return itself like following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;greeting&#39;).div(&#39;Hello, world!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the end of the first lecture. &lt;a href=&#34;../02_custom_attributes_and_nested_elements&#34;&gt;Next lecture&lt;/a&gt; will be about acquiring data from elements that components are mounted and explanation of nesting of HTML element.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://oiax.github.io/capejs/tutorials/capejs_primer/02_custom_attributes_and_nested_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/tutorials/capejs_primer/02_custom_attributes_and_nested_elements/</guid>
      <description>

&lt;h1 id=&#34;reference-of-custom-attribute-value-and-nesting-of-htlm-elements:0208ede68aad1c1201c9b6dceda9d02c&#34;&gt;Reference of custom attribute value and nesting of HTLM elements&lt;/h1&gt;

&lt;p&gt;On &lt;a href=&#34;../01_hello_world&#34;&gt;the previous lecture&lt;/a&gt;, we made the easy application displaying &amp;ldquo;Hello, world!&amp;rdquo; on the browser as an introducing of &lt;a href=&#34;http://oiax.github.io/capejs/&#34;&gt;Cape.JS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, I explain two more things. The one is the way of replacing a part of &amp;ldquo;world&amp;rdquo; with an attribute value of HTML element. And the another one is the way to nest the HTML element.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Well, let&amp;rsquo;s begin. First, open the file &lt;code&gt;hello_message1.html&lt;/code&gt; that you made on the previous lecture by your editor and change the name to  &lt;code&gt;hello_message2.html&lt;/code&gt;. Then, change the content of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element to following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;div id=&amp;quot;main&amp;quot; data-name=&amp;quot;world&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script&amp;gt;
    var HelloMessage = Cape.createComponentClass({
      render: function(m) {
        m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;);
      }
    });

    var component = new HelloMessage();
    component.mount(&#39;main&#39;);
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open this file on the browser. &amp;ldquo;Hello, world!&amp;rdquo; is supposed to be displayed on the upper left of the screen like the precious time.&lt;/p&gt;

&lt;p&gt;In case of this example, it embeds the component &lt;code&gt;HelloMessage&lt;/code&gt; to virtual DOM tree by acquiring &lt;code&gt;data-name&lt;/code&gt; attribute value from the HTML element mounted. It&amp;rsquo;s &lt;code&gt;this.root&lt;/code&gt; within the component&amp;rsquo;s method &lt;code&gt;render&lt;/code&gt; and the HTML element mounted can be referenced. Its data property returns hash holding the custom data attribute (the attribute with name started from &lt;code&gt;data-&lt;/code&gt;) name and value of HTML5.&lt;/p&gt;

&lt;p&gt;The HTML element mounted to is &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element holding &lt;code&gt;id&lt;/code&gt; of  &lt;code&gt;main&lt;/code&gt;. It has the custom data attribute &lt;code&gt;data-name=&amp;quot;world&amp;quot;&lt;/code&gt;. You can acquire its data &lt;code&gt;&amp;quot;world&amp;quot;&lt;/code&gt; from &lt;code&gt;this.root.data.name&lt;/code&gt;. So,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The character string &amp;ldquo;Hello, world!&amp;rdquo; is displayed on the browser when you write like above.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try to change the element value to &amp;ldquo;ruby&amp;rdquo; and save it and reload the browser. The screen display will change to &amp;ldquo;Hello, ruby!&amp;rdquo;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Next, I&amp;rsquo;ll explain about nesting of HTML elements.&lt;/p&gt;

&lt;p&gt;Change the name of file you made just before &lt;code&gt;hello_message2.html&lt;/code&gt; to &lt;code&gt;hello_message3.html&lt;/code&gt; and save it and add lines at the end of the element &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
  href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; imports the CSS file.&lt;/p&gt;

&lt;p&gt;And, change the content of the element &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; to following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;div id=&amp;quot;main&amp;quot; data-name=&amp;quot;world&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script&amp;gt;
    var HelloMessage = Cape.createComponentClass({
      render: function(m) {
        m.div({ class: &#39;container&#39; }, function(m) {
          m.h1(&#39;Greetings from Cape.JS&#39;);
          m.div({ class: &#39;panel panel-default&#39; }, function(m) {
            m.div(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;,
              { class: &#39;panel-body&#39; });
          });
        });
      }
    });

    var component = new HelloMessage();
    component.mount(&#39;main&#39;);
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The screen display is supposed to be like following when you open this file on your browser.&lt;/p&gt;

&lt;div class=&#34;block-image&#34;&gt;
&lt;img src=&#34;http://oiax.github.io/capejs/capejs/images/capejs_primer/hello_message3.png&#34; alt=&#34;Screen capture&#34;&gt;
&lt;/div&gt;

&lt;p&gt;In the case of this example, it runs nesting of the HTML element by specifying the unnamed function to parameter at the end of the method. The following below shows a part of HTML documents created by the code above.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Greetings from Cape.JS&amp;lt;/h1&amp;gt;
  &amp;lt;div class=&amp;quot;panel panel-default&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;Hello, world!&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The unnamed function that is specified as the parameter at the end of the method acquires one parameter (&lt;code&gt;m&lt;/code&gt;). This parameter is markup builder (the object to make virtual DOM tree) that I explained on the previous. The HTML element added into the virtual DOM tree within the unnamed function becomes child elements of the HTML element introducing the unnamed function.&lt;/p&gt;

&lt;p&gt;In the case above, the unnamed function is called again within it. That means that runs 2-level nesting. In the result, the element &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the most inner part is the &amp;ldquo;grandchild&amp;rdquo; element of the element &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the outer part.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That&amp;rsquo;s all for today. On the next lecture, I&amp;rsquo;ll explain the method &lt;code&gt;text()&lt;/code&gt; and the option &lt;code&gt;innerHTML&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://oiax.github.io/capejs/tutorials/capejs_primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/tutorials/capejs_primer/</guid>
      <description>

&lt;h1 id=&#34;cape-js-primer:c9eecd56f2d030a9e3a3fce57054be82&#34;&gt;Cape.JS Primer&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/oiax/capejs/master/doc/logo/capejs.svg&#34; alt=&#34;Cape.JS Logo&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;preface:c9eecd56f2d030a9e3a3fce57054be82&#34;&gt;Preface&lt;/h2&gt;

&lt;p&gt;I start serializing to inform a new-born JavaScript UI framework in 2015, &lt;strong&gt;Cape.JS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s learn the programming of Cape.JS by combining Ruby on Rails with Cape.JS and making an easy TODO administration application step by step.&lt;/p&gt;

&lt;p&gt;Cape.JS uses a technique &amp;ldquo;virtual DOM&amp;rdquo; like &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://muut.com/riotjs/&#34;&gt;Riot&lt;/a&gt; do. You can utilize Cape.JS to create interactive websites, which are websites that changes contents dynamically depend on users&amp;rsquo; actions.&lt;/p&gt;

&lt;p&gt;Until recently, it&amp;rsquo;s general to create interactive websites by making full use of &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;, but front-end programming will be much easier to if you adopt &amp;ldquo;virtual DOM&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I say this again just in case, the writer of this serialization is the person who made Cape.JS (Mr.Kuroda). There were several people who uses it when I started serializing, but I hope many people will use it as many as possible.&lt;/p&gt;

&lt;p&gt;Cape.JS is an open source project. It&amp;rsquo;s distributed under the license of MIT. You can use it for free and also re-distribute･sell after you modify its source code. You can find the source code at GitHub&amp;rsquo;s &lt;a href=&#34;https://github.com/oiax/capejs&#34;&gt;repository&lt;/a&gt;. Also, &lt;a href=&#34;http://oiax.github.io/capejs/&#34;&gt;documents&lt;/a&gt; in English are prepared.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents:c9eecd56f2d030a9e3a3fce57054be82&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Preface&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./01_hello_world&#34;&gt;Hello, world!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./02_custom_attributes_and_nested_elements&#34;&gt;Reference of custom attribute value and nesting of HTLM elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>