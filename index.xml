<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cape.JS: Documentation</title>
    <link>http://oiax.github.io/capejs/</link>
    <description>Recent content on Cape.JS: Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://oiax.github.io/capejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cape - API Reference</title>
      <link>http://oiax.github.io/capejs/api/cape/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/cape/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#create-component-class&#34;&gt;Cape.createComponentClass&lt;/a&gt; -
&lt;a href=&#34;#create-data-store-class&#34;&gt;Cape.createDataStoreClass&lt;/a&gt; -
&lt;a href=&#34;#deep-extend&#34;&gt;Cape.deepExtend&lt;/a&gt; -
&lt;a href=&#34;#extend&#34;&gt;Cape.extend&lt;/a&gt; -
&lt;a href=&#34;#merge&#34;&gt;Cape.merge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createcomponentclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createComponentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createComponentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.Component&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HelloMessage extends Cape.Component {
  render(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createdatastoreclass:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.createDataStoreClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createDataStoreClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.DataStore&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-1:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var TodoItemStore = Cape.createDataStoreClass({
  init: function() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
  },
  addItem: function(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  },
  toggle: function(item) {
    item.done = !item.done;
    this.propagate();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TodoItemStore extends Cape.DataStore {
  init() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
  }
  addItem(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  }
  toggle(item) {
    item.done = !item.done;
    this.propagate();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;deep-extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-deepextend:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.deepExtend&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object recursively.&lt;/p&gt;

&lt;h4 id=&#34;example-2:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-extend:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.extend&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object.&lt;/p&gt;

&lt;h4 id=&#34;example-3:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;merge&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-merge:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Cape.merge&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.merge(target&lt;em&gt;[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge (but not override) the properties of two or more objects together
into the first object&lt;/p&gt;

&lt;h4 id=&#34;example-4:e3a066ada4b0c96341f2c8dadc13df88&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  apple: 2,
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 100 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Component - API Reference</title>
      <link>http://oiax.github.io/capejs/api/component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/component/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#form-data&#34;&gt;formData()&lt;/a&gt; -
&lt;a href=&#34;#mount&#34;&gt;mount()&lt;/a&gt; -
&lt;a href=&#34;#refresh&#34;&gt;refresh()&lt;/a&gt; -
&lt;a href=&#34;#root&#34;&gt;root&lt;/a&gt; -
&lt;a href=&#34;#unmount&#34;&gt;unmount()&lt;/a&gt; -
&lt;a href=&#34;#val&#34;&gt;val()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formdata:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#formData()&lt;/h3&gt;

&lt;h4 id=&#34;usage:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formData()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thid method returns a JavaScript object that represents the values of
all form controls within the component.&lt;/p&gt;

&lt;p&gt;The values are organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-1:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;,
    addresses: {
      &#39;0&#39;: {
        country: &#39;Japan&#39;,
        city: &#39;Tokyo&#39;
      },
      &#39;1&#39;: {
        country: &#39;USA&#39;,
        city: &#39;New York&#39;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mount:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#mount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mount(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method renders the component and inserts it within the element specified by &lt;em&gt;id.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-2:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
var HelloWorld = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, World!&#39;)
  }
});
var component = new HelloWorld();
component.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the component has the &lt;code&gt;init()&lt;/code&gt; method, the &lt;code&gt;mount()&lt;/code&gt; calls it
instead of rendering the component.&lt;/p&gt;

&lt;h4 id=&#34;example-3:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloWorld = Cape.createComponentClass({
  init: function() {
    this.name = &#39;World&#39;;
    this.refresh();
  },

  render: function(m) {
    m.p(&#39;Hello, &#39; + this.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should have to call the &lt;code&gt;refresh()&lt;/code&gt; method at the end
to render the component.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;refresh:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#refresh()&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;refresh()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method rerenders the component by calling its &lt;code&gt;render()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;root&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;root:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#root&lt;/h3&gt;

&lt;p&gt;This property refers to the HTML element which the component is mounted on.&lt;/p&gt;

&lt;p&gt;Its &lt;code&gt;data&lt;/code&gt; subproperty holds the values of &lt;code&gt;data-*&lt;/code&gt; attributes of the root element.&lt;/p&gt;

&lt;h4 id=&#34;example-4:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;The following example shows &amp;ldquo;Hello, John!&amp;rdquo; on your browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=&amp;quot;main&amp;quot; data-name=&amp;quot;John&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
var component = new HelloMessage();
component.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;unmount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;unmount:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#unmount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;unmount()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the component from the HTML document.&lt;/p&gt;

&lt;p&gt;If the component has the &lt;code&gt;beforeUnmount()&lt;/code&gt; method, it is called before the component is unmounted.
If the component has the &lt;code&gt;afterUnmount()&lt;/code&gt; method, it is called after the component has been unmounted.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;val&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;val:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;#val()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;val(name)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get or set the value of a form field.&lt;/p&gt;

&lt;p&gt;When the number of arguments is one and that argument is a string,
this method returns the value of the corresponding field.&lt;/p&gt;

&lt;h4 id=&#34;example-5:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(val(&#39;user.family_name&#39;));
        console.log(val(&#39;user.given_name&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is two,
this method sets the value of a field whose name is corresponding
to the first argument to the second argument and returns
the original value of the field.&lt;/p&gt;

&lt;h4 id=&#34;example-6:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;message&#39;, function(m) {
    m.textField(&#39;body&#39;);
    m.button(&#39;Send&#39;, {
      onclick: function(e) {
        var body = val(&#39;message.body&#39;, &#39;&#39;),
            self = this;
        $.post(&#39;/api/messages&#39;, { body: body }, function() {
          self.refresh();
        });
        return false;
      }
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is one and that argument is an object,
this method sets the value of corresponding fields.&lt;/p&gt;

&lt;h4 id=&#34;example-7:202695ef52bd0f88ec46c8b4eb5ea1d8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        var self = this,
            data = self.formData();
        self.val({ user: { family_name: &#39;&#39;, given_name: &#39;&#39; } });
        $.post(&#39;/api/users&#39;, data, function() {
          self.refresh();
        })
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>API Reference</title>
      <link>http://oiax.github.io/capejs/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt; -
&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt; -
&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt; -
&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt; -
&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt; -
&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-cape-object:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;The &lt;code&gt;Cape&lt;/code&gt; object&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; defines a single global variable &lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt;.
It has some utility methods, such as &lt;code&gt;extend&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;overview-of-classes:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Overview of classes&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; consists of following five classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These classes are defined as properties of the &lt;code&gt;Cape&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The most basic class is &lt;code&gt;Cape.Component&lt;/code&gt;.
You need to define a class extending it in order to create a web widget using Cape.JS.
At least, instances of this class must have a method called &lt;code&gt;render&lt;/code&gt;, which defines
how the component should be rendered in HTML.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; is a class whose instances build &lt;em&gt;virtual dom trees.&lt;/em&gt;
Usually you don&amp;rsquo;t instantiate markup builders by yourself.
Instances of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are passed to the &lt;code&gt;render&lt;/code&gt; method of
component classes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.DataStore&lt;/code&gt; is a class to store and manipulate data, which is used by
components to render themselves.&lt;/p&gt;

&lt;p&gt;If you want to create a single page application (SPA), you may need an instance of &lt;code&gt;Cape.Router&lt;/code&gt;.
After you start it, it continues to watch the changes of &lt;em&gt;hash fragment&lt;/em&gt; of URL
and mount components according to the &lt;em&gt;routes&lt;/em&gt;
(associations between hashes and components) which you defined in advance.&lt;/p&gt;

&lt;p&gt;You have to call methods of &lt;code&gt;Cape.RoutingMapper&lt;/code&gt; in order to define the routes.
You will never instantiate it by youself, but will get its instance through the &lt;code&gt;draw&lt;/code&gt;
method of &lt;code&gt;Cape.Router&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.DataStore - API Reference</title>
      <link>http://oiax.github.io/capejs/api/data_store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/data_store/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt; -
&lt;a href=&#34;#attach&#34;&gt;#attach()&lt;/a&gt; -
&lt;a href=&#34;#detach&#34;&gt;#detach()&lt;/a&gt; -
&lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;constructor&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;constructor:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cape.DataStore&lt;/code&gt; constructor takes no argument and calls its &lt;code&gt;#init&lt;/code&gt; method
if defined.&lt;/p&gt;

&lt;h4 id=&#34;example:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var cs = new CounterStore();
// cs.counter === 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also &lt;a href=&#34;../cape/#create-data-store-class&#34;&gt;Cape.createDataStoreClass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attach:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;#attach()&lt;/h3&gt;

&lt;h4 id=&#34;usage:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method registers the &lt;em&gt;component&lt;/em&gt; as a target of &lt;em&gt;propagation&lt;/em&gt; from this data store.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;.create()&lt;/h3&gt;

&lt;p&gt;This class method returns a singleton object of this Class.&lt;/p&gt;

&lt;h4 id=&#34;example-1:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var cs1 = CounterStore.create();
var cs2 = CounterStore.create();
// cs1 === cs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;detach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;detach:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;#detach()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;detach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the &lt;em&gt;component&lt;/em&gt; from the list of targets of &lt;em&gt;propagation&lt;/em&gt; from this data store.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;propagate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;propagate:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;#propagate()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;propagate()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method triggars the &lt;em&gt;propagation&lt;/em&gt; process, which calls the &lt;code&gt;#refresh()&lt;/code&gt; method
of all components registerd as targets of &lt;em&gt;propagation&lt;/em&gt; of this data store.&lt;/p&gt;

&lt;p&gt;Eventually, the &lt;code&gt;#refresh&lt;/code&gt; method of each component calls its &lt;code&gt;#render()&lt;/code&gt; method,
which has to be defined by developers.&lt;/p&gt;

&lt;p&gt;Thus, we can assure that each time the data of a data store changes,
its all dependent components get refreshed.&lt;/p&gt;

&lt;h4 id=&#34;example-2:0e6ae5d019a4f974c32809ae28a8dc8f&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var ClickCounter = Cape.createComponentClass({
  render: function(m) {
    m.div(String(this.ds.counter),
      { onclick: function(e) { this.ds.increment() } })
  }
})

var ds = new CounterStore();
var comp1 = new ClickCounter();
var comp2 = new ClickCounter();

comp1.ds = ds;
comp2.ds = ds;
ds.attach(comp1);
ds.attach(comp2);

comp1.mount(&#39;counter1&#39;);
comp2.mount(&#39;counter2&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.MarkupBuilder - API Reference</title>
      <link>http://oiax.github.io/capejs/api/markup_builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/markup_builder/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#general-notes&#34;&gt;General notes&lt;/a&gt; -
&lt;a href=&#34;#a-abbr-address-etc&#34;&gt;#a(), #abbr(), #address()&lt;/a&gt; -
&lt;a href=&#34;#area-base-br-etc&#34;&gt;#area(), #base(), #br()&lt;/a&gt; -
&lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt; -
&lt;a href=&#34;#btn&#34;&gt;#btn()&lt;/a&gt; -
&lt;a href=&#34;#check-box&#34;&gt;#checkBox()&lt;/a&gt; -
&lt;a href=&#34;#class&#34;&gt;#class()&lt;/a&gt; -
&lt;a href=&#34;#css&#34;&gt;#css()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data()&lt;/a&gt; -
&lt;a href=&#34;#elem&#34;&gt;#elem()&lt;/a&gt; -
&lt;a href=&#34;#fa&#34;&gt;#fa()&lt;/a&gt; -
&lt;a href=&#34;#fields-for&#34;&gt;#fieldsFor()&lt;/a&gt; -
&lt;a href=&#34;#form-for&#34;&gt;#formFor()&lt;/a&gt; -
&lt;a href=&#34;#hidden-field&#34;&gt;#hiddenField()&lt;/a&gt; -
&lt;a href=&#34;#label-for&#34;&gt;#labelFor()&lt;/a&gt; -
&lt;a href=&#34;#markup&#34;&gt;#markup()&lt;/a&gt; -
&lt;a href=&#34;#on&#34;&gt;#on()&lt;/a&gt; -
&lt;a href=&#34;#password-field&#34;&gt;#passwordField()&lt;/a&gt; -
&lt;a href=&#34;#radio-button&#34;&gt;#radioButton()&lt;/a&gt; -
&lt;a href=&#34;#select-box&#34;&gt;#selectBox()&lt;/a&gt; -
&lt;a href=&#34;#sp&#34;&gt;#sp()&lt;/a&gt; -
&lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt; -
&lt;a href=&#34;#text&#34;&gt;#text()&lt;/a&gt; -
&lt;a href=&#34;#textarea-field&#34;&gt;#textareaField()&lt;/a&gt; -
&lt;a href=&#34;#text-field&#34;&gt;#textField()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;general-notes&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;general-notes:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;General notes&lt;/h3&gt;

&lt;p&gt;All instance methods of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are &lt;em&gt;chainable.&lt;/em&gt;
Each method returns the instance itself.&lt;/p&gt;

&lt;h4 id=&#34;example:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.text(&#39;Hello,&#39;).sp().text(this.guest.name).text(&#39;!&#39;);
      // The above single statement is equivalent to the
      // following four statement;
      //   m.text(&#39;Hello,&#39;);
      //   m.sp();
      //   m.text(this.guest.name);
      //   m.text(&#39;!&#39;);
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All instance methods except &lt;code&gt;#attr&lt;/code&gt;, &lt;code&gt;#class&lt;/code&gt;, &lt;code&gt;#css&lt;/code&gt;, &lt;code&gt;#data&lt;/code&gt;, &lt;code&gt;#sp&lt;/code&gt;, &lt;code&gt;#space&lt;/code&gt;
and &lt;code&gt;#text&lt;/code&gt; take the &lt;em&gt;options&lt;/em&gt; argument, which will be translated into the
attributes of element to be created.&lt;/p&gt;

&lt;h4 id=&#34;example-1:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;, { title: &#39;greeting&#39; });
      // The above code generates the following &amp;lt;p&amp;gt; tag:
      //   &amp;lt;p title=&amp;quot;greeting&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;em&gt;options&lt;/em&gt; argument has a &lt;code&gt;visible&lt;/code&gt; key and its value is &lt;em&gt;falsey&lt;/em&gt;
(&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;),
it sets the &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt; to make this element invisible.&lt;/p&gt;

&lt;h4 id=&#34;example-2:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;,
        { visible: Date.now().getDay() === 0 });
      // On sunday, the above code generates the following:
      //   &amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
      // On other days:
      //   &amp;lt;p style=&amp;quot;display: none&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;a-abbr-address-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-abbr-address-etc:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#a(), #abbr(), #address(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a, abbr, address, article, aside, audio, b, bdi, bdo,
  blockquote, body, button, canvas, caption, cite, code,
  colgroup, datalist, dd, del, details, dfn, dialog, div,
  dl, dt, em, embed, fieldset, figcaption, figure, footer,
  h1, h2, h3, h4, h5, h6, head, header, html,
  i, iframe, ins, kbd, label, legend, li, main, map, mark,
  menu, menuitem, meter, nav, noscript, object, ol, optgroup,
  option, output, p, pre, progress, q, rp, rt, ruby, s,
  samp, script, section, select, small, span, strong, style,
  sub, summary, sup, table, tbody, td, textarea, tfoot,
  th, thead, time, title, tr, u, ul, var, video&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the first argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-3:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article(function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;);
      m.ul(function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-4:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article({ id: &#39;agenda&#39; }, function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;,
        { className: &#39;statement&#39; });
      m.ul({ style: &#39;color: blue&#39; }, function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;area-base-br-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;area-base-br-etc:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#area(), #base(), #br(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;area([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;base([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;br([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 &lt;em&gt;void&lt;/em&gt; elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;area, base, br, col, embed, hr, img, input, keygen,
link, menuitem, meta, param, source, track, wbr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They don&amp;rsquo;t take a string argument nor a function argument, though.
They only accept a hash object to set the attribute values of the element.&lt;/p&gt;

&lt;h4 id=&#34;example-5:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var LogoMark = Cape.createComponentClass({
  render: function(m) {
    m.div({ id: &#39;agenda&#39; }, function(m) {
      m.img({ src: &#39;../images/logo.png&#39;, alt: &#39;Logo Image&#39; })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attr&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attr:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#attr()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attr(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the value of attributes for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-6:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute values are set cumulatively.&lt;/p&gt;

&lt;h4 id=&#34;example-7:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.attr(&#39;width&#39;, &#39;180&#39;);
  m.attr(&#39;height&#39;, &#39;120&#39;);
  m.attr(&#39;title&#39;, &#39;Cape.JS&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39;,
  //           width: &#39;180&#39;, height: &#39;120&#39;,
  //           title: &#39;Cape.JS&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The values set by &lt;code&gt;#attr&lt;/code&gt; does not affect the elements created after the next element.&lt;/p&gt;

&lt;h4 id=&#34;example-8:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  m.img({ src: &#39;../images/download.png&#39; });
  // The last statement creates a &amp;lt;img&amp;gt; tag without
  // alt attribute.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;check-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkbox:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#checkBox()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkBox(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.
See &lt;a href=&#34;#formFor&#34;&gt;#formFor&lt;/a&gt; for details.&lt;/p&gt;

&lt;h4 id=&#34;example-9:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelOf(&#39;privileged&#39;, function(m) {
      m.checkBox(&#39;privileged&#39;);
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //       &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //         id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //     &amp;lt;/label&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;btn&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;btn:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#btn()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;btn(content, options)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;btn(options, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element whose &lt;code&gt;type&lt;/code&gt; attribute is set to &lt;code&gt;button&lt;/code&gt; by default.&lt;/p&gt;

&lt;h4 id=&#34;example-10:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;test&#39;, function(m) {
    m.btn(&#39;Click&#39;);
  });
  // The above code generates the following HTML tags
  //   &amp;lt;form name=&amp;quot;test&amp;quot;&amp;gt;
  //     &amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;Click&amp;lt;/button&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;class:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#class()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;class(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;class&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-11:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;container&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#class&lt;/code&gt; method add classes cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;css&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;css:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#css()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#data()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;data-*&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-12:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data(&#39;id&#39;, &#39;7&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div data-id=&amp;quot;7&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#data&lt;/code&gt; method sets attribute values cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;elem&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;elem:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#elem()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;elem(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elem([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create an HTML element. The first argument is a CSS selector, such as &lt;code&gt;&amp;quot;div.container&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the second argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-13:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;);
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-14:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, { style: &#39;margin-top: 10px&#39; },
    function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;,
          { style: &#39;font-weight: bold&#39; });
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot; style=&amp;quot;margin-top: 10px&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;
  //           style=&amp;quot;font-weight: bold&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fa&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fa:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#fa()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fa(name [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;font awesome&lt;/a&gt; icon
(actually, it is just an empty &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag) to the virtual dom tree.
Its first argument is the icon&amp;rsquo;s name, such as &lt;code&gt;&amp;quot;download&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;gear&amp;quot;&lt;/code&gt;, etc.
You can pass a hash object as the optional second argument to set the
attribute values of &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h4 id=&#34;example-15:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.a({ href: &#39;./download.html&#39; }, function(m) {
    m.fa(&#39;download&#39;).text(&#39; Download&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;a href=&amp;quot;./download.html&amp;quot;&amp;gt;
  //     &amp;lt;i class=&amp;quot;fa fa-download&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Download&amp;lt;/a&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fields-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fieldsfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#fieldsFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-9:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fieldsFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a scope for nested forms. In this scope, a prefix is
addded to the name of each form control.&lt;/p&gt;

&lt;h4 id=&#34;example-16:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you pass the &lt;code&gt;index&lt;/code&gt; option to this method, the prefix is numbered:&lt;/p&gt;

&lt;h4 id=&#34;example-17:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;address&#39;, { index: 1 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
    m.fieldsFor(&#39;address&#39;, { index: 2 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/street&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#formFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag whose name attribute is &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Using this method instead of &lt;code&gt;#form&lt;/code&gt;, the form name prefix is
added to the &lt;code&gt;name&lt;/code&gt; attribute of subordinate form controls.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; attribute is set automatically. When the form name is &lt;code&gt;&#39;foo&#39;&lt;/code&gt;,
the &lt;code&gt;id&lt;/code&gt; attribute of a form control whose name is &lt;code&gt;bar&lt;/code&gt; becomes &lt;code&gt;&#39;foo-field-bar&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-18:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;name&#39;);
    m.checkBox(&#39;privileged&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //       id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       value=&amp;quot;0&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;hidden-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hiddenfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#hiddenField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-11:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hiddenField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-19:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.hiddenField(&#39;privileged&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;label-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;labelfor:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#labelFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;labelFor(name, label)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag whose &lt;code&gt;name&lt;/code&gt; attribute is &lt;code&gt;name&lt;/code&gt;.
Its &lt;code&gt;for&lt;/code&gt; attribute is set appropriately.&lt;/p&gt;

&lt;h4 id=&#34;example-20:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.div(function(m) {
      m.labelFor(&#39;name&#39;, &#39;User name&#39;).sp().textField(&#39;name&#39;);
    });
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.div(function(m) {
        m.labelFor(&#39;city&#39;, &#39;City&#39;).sp().textField(&#39;city&#39;);
      });
      m.div(function(m) {
        m.labelFor(&#39;street&#39;, &#39;Street&#39;).sp().textField(&#39;street&#39;);
      });
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-name&amp;quot;&amp;gt;User name&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //         id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //         City&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.home-address/city&amp;quot;
  //         id=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //         Street&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot;
  //         name=&amp;quot;user.home-address/street&amp;quot;
  //         id=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;markup&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;markup:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#markup()&lt;/h3&gt;

&lt;p&gt;This method is for internal use. Do not override it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;on&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;on:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#on()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;on(eventName, function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the handler of event &lt;em&gt;eventName&lt;/em&gt; for the element which will be added nextly
to &lt;em&gt;function.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-21:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.on(&#39;click&#39;, function(e) { this.counter++ });
  m.on(&#39;dblclick&#39;, function(e) { this.counter = 0 });
  m.span(&#39;Click me!&#39;);
  // These two statements are equivalent to the following
  // single statement:
  //   m.span(&#39;Click me!&#39;,
  //     { onclick: function(e) { this.counter++ },
  //       ondblclick: function(e) { this.counter = 0 } })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute values are set cumulatively.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;password-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;passwordfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#passwordField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-14:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;passwordField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;password&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-22:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.passwordField(&#39;password&#39;);
    m.passwordField(&#39;password_confirmation&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;user.password&amp;quot;
  //       id=&amp;quot;user-field-password&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot;
  //       name=&amp;quot;user.password_confirmation&amp;quot;
  //       id=&amp;quot;user-field-password-confirmation&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;radio-button&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;radiobutton:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#radioButton()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;select-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;selectbox:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#selectBox()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;sp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sp:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#sp()&lt;/h3&gt;

&lt;p&gt;This is an alias to &lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;space&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;space:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#space()&lt;/h3&gt;

&lt;h4 id=&#34;usage-15:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;space()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a single space character. Same as &lt;code&gt;text(&#39; &#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-23:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p(function(m) {
    m.text(this.message);
    m.space();
    m.strong(this.name);
    m.text(&#39;!&#39;);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;text:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#text()&lt;/h3&gt;

&lt;h4 id=&#34;usage-16:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text(string)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;em&gt;string&lt;/em&gt; as a text node to the virtual dom tree.
The special characters (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;) are escaped automatically.&lt;/p&gt;

&lt;h4 id=&#34;example-24:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.h1(function(m) {
    m.text(this.title).sp();
    m.small(this.subtitle);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to create a content from a string without escaping it,
use &lt;code&gt;innerHTML&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p({ innerHTML: &#39;&amp;amp;copy; &amp;lt;span&amp;gt;Foo Bar, Inc.&amp;lt;/span&amp;gt;&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;textarea-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textareafield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#textareaField()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textfield:2f94c9da1a5f7ca2887265bec799d255&#34;&gt;#textField()&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Not yet written.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Router - API Reference</title>
      <link>http://oiax.github.io/capejs/api/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/router/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#action&#34;&gt;#action&lt;/a&gt; -
&lt;a href=&#34;#attach&#34;&gt;#attach()&lt;/a&gt; -
&lt;a href=&#34;#before-navigation&#34;&gt;#beforeNavigation()&lt;/a&gt; -
&lt;a href=&#34;#component&#34;&gt;#component&lt;/a&gt; -
&lt;a href=&#34;#container&#34;&gt;#container&lt;/a&gt; -
&lt;a href=&#34;#detach&#34;&gt;#detach()&lt;/a&gt; -
&lt;a href=&#34;#draw&#34;&gt;#draw()&lt;/a&gt; -
&lt;a href=&#34;#error-handler&#34;&gt;#errorHandler()&lt;/a&gt; -
&lt;a href=&#34;#flash&#34;&gt;#flash&lt;/a&gt; -
&lt;a href=&#34;#namespace&#34;&gt;#namespace&lt;/a&gt; -
&lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; -
&lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; -
&lt;a href=&#34;#mount&#34;&gt;#mount()&lt;/a&gt; -
&lt;a href=&#34;#params&#34;&gt;#params&lt;/a&gt; -
&lt;a href=&#34;#query&#34;&gt;#query&lt;/a&gt; -
&lt;a href=&#34;#redirect-to&#34;&gt;#redirectTo&lt;/a&gt; -
&lt;a href=&#34;#resource&#34;&gt;#resource&lt;/a&gt; -
&lt;a href=&#34;#route-for&#34;&gt;#routeFor()&lt;/a&gt; -
&lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; -
&lt;a href=&#34;#start&#34;&gt;#start()&lt;/a&gt; -
&lt;a href=&#34;#stop&#34;&gt;#stop()&lt;/a&gt; -
&lt;a href=&#34;#vars&#34;&gt;#vars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;action&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;action:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#action&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;action name&lt;/em&gt; of the current route.&lt;/p&gt;

&lt;h4 id=&#34;example:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.action); // =&amp;gt; &amp;quot;edit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attach:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#attach()&lt;/h3&gt;

&lt;h4 id=&#34;usage:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method register the &lt;em&gt;component&lt;/em&gt; as the target of &lt;em&gt;notification&lt;/em&gt; from this router.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;before-navigation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;beforenavigation:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#beforeNavigation()&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;../../router/#before-navigation-callbacks&#34;&gt;Before-Navigation Callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;component&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;component:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#component&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;component name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.component); // =&amp;gt; &amp;quot;edit&amp;quot;
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.component); // =&amp;gt; &amp;quot;edit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;container&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;container:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#container&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;container name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-2:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.container); // =&amp;gt; &amp;quot;articles&amp;quot;
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.container); // =&amp;gt; &amp;quot;admin.articles&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;detach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;detach:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#detach()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;detach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the &lt;em&gt;component&lt;/em&gt; from the list of targets of &lt;em&gt;notification&lt;/em&gt; from this router.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;draw&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;draw:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#draw()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;draw(function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method specify a function that takes a &lt;code&gt;RoutingMapper&lt;/code&gt; object and defines routes.&lt;/p&gt;

&lt;h4 id=&#34;example-3:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;dashboard&#39;);
  m.page(&#39;about&#39;, &#39;docs.about&#39;);
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the argument &lt;code&gt;m&lt;/code&gt; is a &lt;code&gt;RoutingMapper&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;error-handler&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;errorhandler:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#errorHandler()&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;../../router/#before-navigation-callbacks&#34;&gt;Before-Navigation Callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;flash&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;flash:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#flash&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flash[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flash.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;flash&lt;/em&gt; object,
which is emptied after each navigation.&lt;/p&gt;

&lt;h4 id=&#34;example-4:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.flash.alert = &#39;The specified article has been deleted.&#39;;
router.navigate(&#39;articles&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;namespace&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;container-1:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#container&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;namespace&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-5:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.namespace); // =&amp;gt; null
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.namespace); // =&amp;gt; &amp;quot;admin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;navigate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;navigate:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#navigate()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;navigate(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When before-navigation callbacks are registered, they are executed
before changing the anchor part of URL.
If the before-navigation callbacks select other string for &lt;em&gt;hash&lt;/em&gt;,
it will be set to the anchor part of the browser&amp;rsquo;s current URL.&lt;/p&gt;

&lt;p&gt;After setting the anchor part of URL, this method choose a component
according to the routing table.&lt;/p&gt;

&lt;p&gt;When this component is different from the component which is mounted currently,
it unmounts the latter and mounts the former.
When this component is same with the component mounted currently
it calls the &lt;code&gt;#refresh&lt;/code&gt; method of mounted component.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code&gt;#notify()&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want the &lt;code&gt;#notify()&lt;/code&gt; method to be executed, use &lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;notify&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;notify:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#notify()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;notify()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method triggars the &lt;em&gt;notification&lt;/em&gt; process, which calls the &lt;code&gt;#refresh()&lt;/code&gt; method
of all components registerd as targets of &lt;em&gt;notification&lt;/em&gt; of this data store.&lt;/p&gt;

&lt;p&gt;Eventually, each target component executes its &lt;code&gt;#render()&lt;/code&gt; method,
which has to be defined by developers.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#notify()&lt;/code&gt; method is executed after each time the &lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; method is called.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mount:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#mount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mount(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method specifies the &lt;code&gt;id&lt;/code&gt; of the HTML element which this router
inserts the components into.&lt;/p&gt;

&lt;h4 id=&#34;example-6:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Top&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#about&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#help&amp;quot;&amp;gt;Help&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;top_page&#39;);
  m.page(&#39;about&#39;, &#39;about_page&#39;);
  m.page(&#39;help&#39;, &#39;help_page&#39;);
})
router.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, components are mounted into the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;&#39;main&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;params:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#params&lt;/h3&gt;

&lt;p&gt;This property holds a set of key-value pairs, which represents the parameters
embedded in the main part (before the first &amp;lsquo;?&amp;rsquo; symbol) of hash.&lt;/p&gt;

&lt;h4 id=&#34;example-7:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;help/:name&#39;, &#39;help.item&#39;);
  m.many(&#39;articles&#39;, function(m) {
    m.many(&#39;comments&#39;);
  });
})
router.navigate(&#39;help/password&#39;);
// router.params.name === &#39;password&#39;
router.navigate(&#39;articles/123&#39;)
// router.params.id === &#39;123&#39;
router.navigate(&#39;articles/123/comments/7&#39;)
// router.params.article_id === &#39;123&#39;
// router.params.id === &#39;7&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;query&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;query:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#query&lt;/h3&gt;

&lt;p&gt;This property holds a set of key-value pairs, which represents the parameters
embedded in the query part (after the first &amp;lsquo;?&amp;rsquo; symbol) of hash .&lt;/p&gt;

&lt;h4 id=&#34;example-8:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;)
})
router.navigate(&#39;articles&#39;)
// router.query === {}
router.navigate(&#39;articles?page=2&#39;)
// router.query.page === &#39;2&#39;
router.navigate(&#39;articles?page=2&amp;amp;deleted&#39;)
// router.query.page === &#39;2&#39;
// router.query.deleted === &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;redirect-to&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;redirectto:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#redirectTo()&lt;/h3&gt;

&lt;p&gt;This method sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; method, before-navigationi callbacks are &lt;em&gt;not&lt;/em&gt; executed
before changing the anchor part of URL.&lt;/p&gt;

&lt;p&gt;After setting the anchor part of URL, this method choose a component
according to the routing table.&lt;/p&gt;

&lt;p&gt;When this component is different from the component mounted currently,
it unmounts the latter and mounts the former.
When this component is same with the component which is mounted currently
it calls the &lt;code&gt;#refresh&lt;/code&gt; method of the mounted component.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code&gt;#notify()&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resource:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#resource&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;resource name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-9:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;);
  m.many(&#39;articles&#39;, function(m) {
    m.many(&#39;comments&#39;);
  });
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigate(&#39;account/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;account&amp;quot;
router.navigate(&#39;articles/123/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles&amp;quot;
router.navigate(&#39;articles/123/comments&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles/comments&amp;quot;
router.navigate(&#39;admin/articles/123/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;route-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;routefor:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#routeFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;routeFor(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns the first route matching to the &lt;em&gt;hash,&lt;/em&gt; if any.&lt;/p&gt;

&lt;h4 id=&#34;example-10:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
var route = router.routeFor(&#39;admin/articles/123/edit&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;show&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;show:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#show()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;show(componentClass)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method mounts an instance of &lt;em&gt;componentClass&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt;, it does neither change the anchor part of
current URL, nor call the &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;start&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;start:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#start()&lt;/h3&gt;

&lt;p&gt;With this method call, routers begin to listen to &lt;code&gt;hashchange&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;stop&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;stop:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#stop()&lt;/h3&gt;

&lt;p&gt;With this method call, routers stop to listen to &lt;code&gt;hashchange&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;vars&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;vars:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;#vars&lt;/h3&gt;

&lt;h4 id=&#34;usage-9:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vars[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vars.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;vars&lt;/em&gt; object.&lt;/p&gt;

&lt;h4 id=&#34;example-11:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.vars.signedIn = Date.now();
router.vars.currentUser = { id: 99, name: &#39;john&#39;, privileged: true };
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>http://oiax.github.io/capejs/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/components/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#hello-world&#34;&gt;Hello World&lt;/a&gt; -
&lt;a href=&#34;#es6&#34;&gt;ECMAScript 6&lt;/a&gt; -
&lt;a href=&#34;#dom-tree&#34;&gt;Building Virtual DOM Tree&lt;/a&gt; -
&lt;a href=&#34;#click-counter&#34;&gt;Click Counter&lt;/a&gt; -
&lt;a href=&#34;#todo-list&#34;&gt;Todo List&lt;/a&gt; -
&lt;a href=&#34;#mixins&#34;&gt;Mixins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;hello-world&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hello-world:d1b8a910971345212cdb562d8742fa2d&#34;&gt;Hello World&lt;/h3&gt;

&lt;p&gt;The following example will insert &lt;code&gt;&amp;lt;div&amp;gt;Hello, World!&amp;lt;/div&amp;gt;&lt;/code&gt; into the &lt;code&gt;div#hello-message&lt;/code&gt; element.&lt;/p&gt;

&lt;h4 id=&#34;index-html:d1b8a910971345212cdb562d8742fa2d&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;Greeting from Cape.JS&amp;lt;/h1&amp;gt;
&amp;lt;div id=&amp;quot;hello-message&amp;quot; data-name=&amp;quot;World&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;./hello_message.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  var component = new HelloMesage();
  component.mount(&#39;hello-message&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;hello-message-js:d1b8a910971345212cdb562d8742fa2d&#34;&gt;hello_message.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloMesage = Cape.createComponentClass({
  render: function(m) {
    m.div(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all, we &lt;em&gt;must&lt;/em&gt; define the &lt;code&gt;render&lt;/code&gt; method for Cape.JS components.
The role of this method is to create a &lt;em&gt;virtual&lt;/em&gt; DOM tree.
Cape.JS updates the &lt;em&gt;real&lt;/em&gt; DOM tree of browsers using this virtual tree.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; method should take an argument, which is called &lt;em&gt;markup builder&lt;/em&gt;.
When you call its &lt;code&gt;div&lt;/code&gt; method, a &lt;code&gt;div&lt;/code&gt; node is added to the virtual DOM tree.
The markup builder has corresponding methods for all valid tag names of HTML5,
such as &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt;, &lt;code&gt;br&lt;/code&gt;, &lt;code&gt;section&lt;/code&gt;, &lt;code&gt;video&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;You can call &lt;code&gt;this.root&lt;/code&gt; to get the node which the component was mounted on.
And you can access to &lt;code&gt;data-name&lt;/code&gt; attributes of the &lt;code&gt;root&lt;/code&gt; node by
&lt;code&gt;this.root.data.name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can find the source code of working demo on
&lt;a href=&#34;https://github.com/oiax/capejs/tree/master/demo/hello_message&#34;&gt;https://github.com/oiax/capejs/tree/master/demo/hello_message&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;es6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ecmascript-6:d1b8a910971345212cdb562d8742fa2d&#34;&gt;ECMAScript 6&lt;/h3&gt;

&lt;p&gt;If you want to write more concisely, try to define class using ECMAScript 6 (ES6) syntax.&lt;/p&gt;

&lt;h4 id=&#34;hello-message-es6:d1b8a910971345212cdb562d8742fa2d&#34;&gt;hello_message.es6&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class HelloMessage extends Cape.Component {
  render(m) {
    m.div(`Hello ${this.root.data.name}!`)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the source code of working demo on
&lt;a href=&#34;https://github.com/oiax/capejs/tree/master/es6-demo/hello_message&#34;&gt;https://github.com/oiax/capejs/tree/master/es6-demo/hello_message&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You must have &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;babel-core&lt;/code&gt; to see this demo page.
You must also have &lt;code&gt;browserify&lt;/code&gt; to convert &lt;code&gt;.es6&lt;/code&gt; file to &lt;code&gt;.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/oiax/capejs/tree/master/es6-demo/README.md&#34;&gt;https://github.com/oiax/capejs/tree/master/es6-demo/README.md&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;dom-tree&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;building-virtual-dom-tree:d1b8a910971345212cdb562d8742fa2d&#34;&gt;Building Virtual DOM Tree&lt;/h3&gt;

&lt;h4 id=&#34;index-html-1:d1b8a910971345212cdb562d8742fa2d&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1&amp;gt;Greeting from Cape.JS&amp;lt;/h1&amp;gt;
&amp;lt;div id=&amp;quot;hello-message&amp;quot; data-name=&amp;quot;World&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;./hello_message2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  var component = new HelloMesage2();
  component.mount(&#39;hello-message&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;hello-message2-js:d1b8a910971345212cdb562d8742fa2d&#34;&gt;hello_message2.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloMesage2 = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.text(&#39;Hello, &#39;);
      m.strong(function(m) {
        m.text(this.root.data.name);
        m.text(&#39;!&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example will generate &lt;code&gt;&amp;lt;p&amp;gt;Hello, &amp;lt;strong&amp;gt;World!&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;strong&lt;/code&gt; method takes a function, which create the content of &lt;code&gt;strong&lt;/code&gt; element.
In this way you can create a deeply-nested DOM tree.&lt;/p&gt;

&lt;p&gt;With ES6 syntax, you can write much tersely:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class HelloMesage2 extends Cape.Component {
  render(m) {
    m.p(m =&amp;gt; {
      m.text(&#39;Hello, &#39;);
      m.strong(m =&amp;gt; {
        m.text(this.root.data.name);
        m.text(&#39;!&#39;);
      })
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All methods of markup builder can be chained. So, you can rewrite the above code as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class HelloMesage2 extends Cape.Component {
  render(m) {
    m.p(m =&amp;gt;
      m.text(&#39;Hello, &#39;).strong(m =&amp;gt;
        m.text(this.root.data.name).text(&#39;!&#39;);
      )
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you can omit braces when the arrow function has only a single expression.
See MDN&amp;rsquo;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;Arrow functions&lt;/a&gt;
&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;click-counter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;click-counter:d1b8a910971345212cdb562d8742fa2d&#34;&gt;Click Counter&lt;/h3&gt;

&lt;p&gt;On this example, your will see the number which gets incremented each time you click on the surrounding &lt;code&gt;div&lt;/code&gt; box.&lt;/p&gt;

&lt;h4 id=&#34;index-html-2:d1b8a910971345212cdb562d8742fa2d&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;click-counter&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;./click_counter.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  var counter = new ClickCounter();
  counter.mount(&#39;click-counter&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;click-counter-js:d1b8a910971345212cdb562d8742fa2d&#34;&gt;click_counter.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var ClickCounter = Cape.createComponentClass({
  render: function(m) {
    m.div(String(this.counter), {
      class: &#39;counter&#39;,
      onclick: function(e) { this.increment() }
    })
  },

  init: function() {
    this.counter = 0;
    this.refresh();
  },

  increment: function() {
    this.counter++;
    this.refresh();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we give the second argument to the &lt;code&gt;div&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  class: &#39;counter&#39;,
  onclick: function(e) { this.increment() }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;em&gt;associative array&lt;/em&gt; represents the attributes of &lt;code&gt;div&lt;/code&gt; element.
We can attach a handler (function) to the &lt;code&gt;click&lt;/code&gt; event for this element like this.&lt;/p&gt;

&lt;p&gt;Within event handlers, &lt;code&gt;this&lt;/code&gt; denotes the component itself.
So you can call its &lt;code&gt;increment&lt;/code&gt; method by &lt;code&gt;this.increment()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A method call &lt;code&gt;this.refresh()&lt;/code&gt; redraws the component.
You should call it at the end of the &lt;code&gt;init&lt;/code&gt; method,
but if the component lacks the &lt;code&gt;init&lt;/code&gt; method, the &lt;code&gt;refresh&lt;/code&gt; method
is called when the component is mounted.&lt;/p&gt;

&lt;p&gt;You can find the source code of working demo on
&lt;a href=&#34;https://github.com/oiax/capejs/tree/master/demo/click_counter&#34;&gt;https://github.com/oiax/capejs/tree/master/demo/click_counter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;todo-list&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;todo-list:d1b8a910971345212cdb562d8742fa2d&#34;&gt;Todo List&lt;/h2&gt;

&lt;p&gt;On this example, your can add a todo item from a HTML form and toggle the
&lt;code&gt;completed&lt;/code&gt; property of todo items by clicking check boxes.&lt;/p&gt;

&lt;h4 id=&#34;index-html-3:d1b8a910971345212cdb562d8742fa2d&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;todo-list&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;./todo_list.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  var todoList = new TodoList();
  todoList.mount(&#39;todo-list&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;todo-list-js:d1b8a910971345212cdb562d8742fa2d&#34;&gt;todo_list.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var TodoList = Cape.createComponentClass({
  render: function(m) {
    m.ul(function(m) {
      this.items.forEach(function(item) {
        this.renderItem(m, item);
      }.bind(this))
    });
    this.renderForm(m);
  },

  renderItem: function(m, item) {
    m.li(function(m) {
      m.label({ class: { completed: item.done }}, function(m) {
        m.input({ type: &#39;checkbox&#39;, checked: item.done,
          onclick: function(e) { this.toggle(item) } });
        m.space().text(item.title);
      })
    })
  },

  renderForm: function(m) {
    m.form(function(m) {
      m.textField(&#39;title&#39;, { onkeyup: function(e) { this.refresh() } });
      m.button(&amp;quot;Add&amp;quot;, {
        disabled: this.val(&#39;title&#39;) === &#39;&#39;,
        onclick: function(e) { this.addItem() }
      });
    });
  },

  init: function() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
    this.refresh();
  },

  toggle: function(item) {
    item.done = !item.done;
    this.refresh();
  },

  addItem: function() {
    this.items.push({ title: this.val(&#39;title&#39;), done: false });
    this.val(&#39;title&#39;, &#39;&#39;);
    this.refresh();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we use the &lt;code&gt;textField&lt;/code&gt; method of markup builder.
This method creates an &lt;code&gt;input&lt;/code&gt; element of the type &lt;code&gt;text&lt;/code&gt;.
If we give &lt;code&gt;&#39;title&#39;&lt;/code&gt; as the first argument of the method,
it is set to the value of &lt;code&gt;name&lt;/code&gt; attribute of the &lt;code&gt;input&lt;/code&gt; element and
we can get its value by &lt;code&gt;this.val(&#39;title&#39;)&lt;/code&gt;.
You can also set its value with &lt;code&gt;val&lt;/code&gt; method by giving a new value as second argument.&lt;/p&gt;

&lt;p&gt;You can find the source code of working demo on
&lt;a href=&#34;https://github.com/oiax/capejs/tree/master/demo/todo_list&#34;&gt;https://github.com/oiax/capejs/tree/master/demo/todo_list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mixins&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mixins:d1b8a910971345212cdb562d8742fa2d&#34;&gt;Mixins&lt;/h3&gt;

&lt;p&gt;When you build a large application with many similar components,
you will want to extract common methods to &lt;em&gt;mixins&lt;/em&gt;,
objects that contain a combination of methods.&lt;/p&gt;

&lt;p&gt;The following example illustrates how to create &lt;em&gt;mixins&lt;/em&gt; and incorporate them
into component classes.&lt;/p&gt;

&lt;h4 id=&#34;index-html-4:d1b8a910971345212cdb562d8742fa2d&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;./form_controls.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;./simple_form.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  var simple_form = new SimpleForm();
  simple_form.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;form-controls-js:d1b8a910971345212cdb562d8742fa2d&#34;&gt;form_controls.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var FormControls = {
  renderTextField: function(markup, fieldName, labelText) {
    markup.div({ class: &#39;form-group&#39; }, function(m) {
      m.labelFor(fieldName, labelText).sp();
      m.textField(fieldName, { class: &#39;form-control&#39; });
    })
  },

  renderTextareaField: function(markup, fieldName, labelText) {
    markup.div({ class: &#39;form-group&#39; }, function(m) {
      m.labelFor(fieldName, labelText).sp();
      m.textareaField(fieldName, { class: &#39;form-control&#39; });
    })
  },

  renderButtons: function(markup) {
    markup.div({ class: &#39;form-group&#39; }, function(m) {
      m.button(&#39;Submit&#39;, { class: &#39;btn btn-primary&#39; }).sp();
      m.button(&#39;Cancel&#39;, { class: &#39;btn btn-default&#39; })
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;simple-form-js:d1b8a910971345212cdb562d8742fa2d&#34;&gt;simple_form.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var SimpleForm = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.formFor(&#39;user&#39;, function(m) {
        this.renderTextField(m, &#39;family_name&#39;, &#39;Family Name&#39;);
        this.renderTextField(m, &#39;given_name&#39;, &#39;Given Name&#39;);
        this.renderTextareaField(m, &#39;remarks&#39;, &#39;Remarks&#39;);
        this.renderButtons(m);
      })
    })
  }
});

Cape.merge(SimpleForm.prototype, FormControls);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Cape.merge&lt;/code&gt; method imports all properties (methods) of &lt;code&gt;FormControls&lt;/code&gt;
into &lt;code&gt;SimpleForm.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;Cape.merge&lt;/code&gt; does not rewrite existing properties of &lt;code&gt;SimpleForm.prototype&lt;/code&gt;
so that you can override one or more methods of &lt;code&gt;FormControls&lt;/code&gt;
within the definition of &lt;code&gt;SimpleForm&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;You can find the source code of working demo on
&lt;a href=&#34;https://github.com/oiax/capejs/tree/master/demo/mixins&#34;&gt;https://github.com/oiax/capejs/tree/master/demo/mixins&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.RoutingMapper - API Reference</title>
      <link>http://oiax.github.io/capejs/api/routing_mapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/api/routing_mapper/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#collection&#34;&gt;collection()&lt;/a&gt; -
&lt;a href=&#34;#namespace&#34;&gt;namespace()&lt;/a&gt; -
&lt;a href=&#34;#new&#34;&gt;new()&lt;/a&gt; -
&lt;a href=&#34;#many&#34;&gt;many()&lt;/a&gt; -
&lt;a href=&#34;#member&#34;&gt;member()&lt;/a&gt; -
&lt;a href=&#34;#one&#34;&gt;one()&lt;/a&gt; -
&lt;a href=&#34;#page&#34;&gt;page()&lt;/a&gt; -
&lt;a href=&#34;#root&#34;&gt;root()&lt;/a&gt; -
&lt;a href=&#34;#view&#34;&gt;view()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;collection&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;collection:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#collection()&lt;/h3&gt;

&lt;h4 id=&#34;usage:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;collection(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a &lt;em&gt;collection&lt;/em&gt; route (a route which deals with multiple items).&lt;/p&gt;

&lt;h4 id=&#34;example:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.collection &#39;draft&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/draft&lt;/code&gt; to &lt;code&gt;Articles.Draft&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#collection()&lt;/code&gt; method must be called within a block that defines a plural resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;namespace&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;namespace:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#namespace()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;namespace(name, function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Introduces a &lt;em&gt;function&lt;/em&gt; tha defines resources under the specified &lt;em&gt;namespace&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Namespace&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/new&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;new&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;new:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#new()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;new(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds an alternate &lt;em&gt;new&lt;/em&gt; action to a resource, which can be plural or singular.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.new &#39;preview&#39;
  });
  m.many(&#39;articles&#39;, function(m) {
    m.new &#39;preview&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account/new/preview&lt;/code&gt; to &lt;code&gt;Account.Preview&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/new/preview&lt;/code&gt; to &lt;code&gt;Articles.Preview&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;many&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;many:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#many()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines four routes for a plural resource.&lt;/p&gt;

&lt;h4 id=&#34;example-1:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/new&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4 id=&#34;usage-4:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name, { only: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds routes for &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a plural resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;index&amp;rdquo;, &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-2:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, { only: [ &#39;index&#39;, &#39;show&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;articles/&lt;/code&gt; to &lt;code&gt;Articles.List&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/:id&lt;/code&gt; to &lt;code&gt;Articles.Item&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;usage-5:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name, { except: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds basic routes excepting &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a plural resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;index&amp;rdquo;, &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-3:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, { except: [ &#39;new&#39;, &#39;edit&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;articles/&lt;/code&gt; to &lt;code&gt;Articles.List&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/:id&lt;/code&gt; to &lt;code&gt;Articles.Item&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;member&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;member:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#member()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;member(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a &lt;em&gt;member&lt;/em&gt; route (a route which deals with a specific item).&lt;/p&gt;

&lt;h4 id=&#34;example-4:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.member &#39;info&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/:id/info&lt;/code&gt; to &lt;code&gt;Articles.Info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#member()&lt;/code&gt; method must be called within a block that defines a plural resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;one&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;one:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#one()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines four routes for a singular resource.&lt;/p&gt;

&lt;h4 id=&#34;example-5:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Content&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/new&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/edit&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4 id=&#34;usage-8:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name, { only: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds routes for &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a singular resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-6:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.new(&#39;account&#39;, { only: [ &#39;show&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account/&lt;/code&gt; to &lt;code&gt;Account.Content&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;usage-9:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name, { except: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds basic routes excepting &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a singular resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-7:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, { except: [ &#39;new&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account&lt;/code&gt; to &lt;code&gt;Account.Content&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;account/edit&lt;/code&gt; to &lt;code&gt;Account.Form&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;page&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;page:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#page()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page(hashPattern, componentClassPath)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &lt;em&gt;hashPattern&lt;/em&gt; to &lt;em&gt;componentClassPath.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-8:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;dashboard&#39;, &#39;dashboard&#39;);
  m.page(&#39;about&#39;, &#39;docs.about&#39;);
  m.page(&#39;help/:name&#39;, &#39;docs.help&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-11:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page(hashPattern, componentClassPath, constraints)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &lt;em&gt;hashPattern&lt;/em&gt; to &lt;em&gt;componentClassPath&lt;/em&gt; with constraints
on the parameters, which are specified by regular expression string.&lt;/p&gt;

&lt;h4 id=&#34;example-9:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;blog/:year/:month&#39;, &#39;blog.articles&#39;,
    { year: &#39;201\\d&#39;, month: &#39;(:?0[1-9]|1[012])&#39; });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should put &lt;code&gt;:?&lt;/code&gt; to make parentheses
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses&#34;&gt;non-capturing parentheses&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;root&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;root:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#root()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;root(componentClassPath)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &amp;ldquo;&amp;rdquo; to &lt;em&gt;componentClassPath.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-10:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  root(&#39;Dashboard&#39;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;view&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;view:ae7ef07c676989612e8905eb7075ea67&#34;&gt;#view()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;view(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a custom route to a singular resource.&lt;/p&gt;

&lt;h4 id=&#34;example-11:ae7ef07c676989612e8905eb7075ea67&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.view &#39;image&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;account/image&lt;/code&gt; to &lt;code&gt;Account.Image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#view()&lt;/code&gt; method must be called within a block that defines a singular resource.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Index</title>
      <link>http://oiax.github.io/capejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/</guid>
      <description>

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;what-is&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-cape-js:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;What is Cape.JS?&lt;/h2&gt;

&lt;p&gt;Cape.JS is a lightweight JavaScript UI framework with following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Full stack:&lt;/strong&gt; You can build &lt;em&gt;single-page applications&lt;/em&gt; (SPAs) with Cape.JS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modular:&lt;/strong&gt; You can place &lt;em&gt;web widgets&lt;/em&gt; built by Cape.JS to your static web sites.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual DOM:&lt;/strong&gt; Cape.JS takes advantage of
&lt;a href=&#34;https://github.com/Matt-Esch/virtual-dom&#34;&gt;virtual-dom&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;
of Matt-Esch for high performance rendering.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markup builder:&lt;/strong&gt; The &lt;em&gt;markup builder&lt;/em&gt; helps you to construct HTML DOM trees
with its simple, easy to learn syntax.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Form manipulation:&lt;/strong&gt; You can get or set the value of form fields
without &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data stores:&lt;/strong&gt; Using &lt;em&gt;data stores&lt;/em&gt;, you can build web applications
with &lt;em&gt;unidirectional data flow.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Router:&lt;/strong&gt; You can define &lt;em&gt;routes&lt;/em&gt; with a DSL (domain specific language)
similar to that of Ruby on Rails.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The architecture and terminology of Cape.JS are strongly influenced by
&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;,
&lt;a href=&#34;https://github.com/muut/riotjs&#34;&gt;Riot&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;
and &lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Ruby on Rails&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;installation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;If you just want to use Cape.JS in your web site, insert the following snippet
to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTML files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&amp;quot;https://cdn.rawgit.com/oiax/capejs/v1.0.0-beta.7/dist/cape.min.js&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get the package for &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt; with following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install capejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get the package for &lt;a href=&#34;http://bower.io/&#34;&gt;bower&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt; with following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bower install capejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;faq&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;faq:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&#34;is-it-cape-js-capejs-or-capejs:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Is it &amp;ldquo;Cape.JS&amp;rdquo;, &amp;ldquo;CapeJS&amp;rdquo;, or &amp;ldquo;capejs&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;The official name is &lt;strong&gt;Cape.JS.&lt;/strong&gt;
Its package name for &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;
and &lt;a href=&#34;http://bower.io&#34;&gt;bower&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt; is &lt;strong&gt;capejs&lt;/strong&gt; (without the dot).&lt;/p&gt;

&lt;p&gt;At the very initial phase of development, we called it &amp;ldquo;CapeJS&amp;rdquo;, but
we don&amp;rsquo;t use it anymore.&lt;/p&gt;

&lt;h3 id=&#34;is-it-production-ready:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Is it production ready?&lt;/h3&gt;

&lt;p&gt;Not yet. We adopt &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt; for Cape.JS.
According to this system, major version (0.y.z) zero is for initial development.
We have released the version 1.0.0-beta.x, but the public API of Cape.JS should
not be considered stable.&lt;/p&gt;

&lt;h3 id=&#34;which-browsers-are-supported:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Which browsers are supported?&lt;/h3&gt;

&lt;p&gt;We test Cape.JS on Internet Explorer 11 and the latest versions of Chrome, Firefox and Safari.&lt;/p&gt;

&lt;p&gt;Note that we have no plan to support the Internet Explorer 8, 9, and 10.&lt;/p&gt;

&lt;h3 id=&#34;how-can-i-contribute:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;How can I contribute?&lt;/h3&gt;

&lt;p&gt;The Cape.JS is an open source project. Everyone can help.
See &lt;a href=&#34;https://github.com/oiax/capejs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;
&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;for details.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;The logo of Cape.JS is created by
&lt;a href=&#34;https://github.com/junya-suzuki&#34;&gt;Junya Suzuki&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;h2 id=&#34;trademarks&#34;&gt;Trademarks&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;Cape.JS&amp;rdquo; and its logo are trademarks of Oiax Inc. All rights reserved.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Cape.JS is released under
&lt;a href=&#34;https://github.com/oiax/capejs/LICENSE&#34;&gt;the MIT License&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials and Demos</title>
      <link>http://oiax.github.io/capejs/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/tutorials/</guid>
      <description>

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;setting-up-rails-with-capejs&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;setting-up-rails-with-cape-js:2f9666f86bd8527efa1103fc382863ca&#34;&gt;Setting up Rails with Cape.JS&lt;/h3&gt;

&lt;p&gt;This tutorial has not been written yet.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&#34;https://github.com/oiax/capejs-demo-on-rails&#34;&gt;https://github.com/oiax/capejs-demo-on-rails&lt;/a&gt;,
you can find a demo Cape.JS application built upon the Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Reading through its source code, you will learn how to integrate
a Rails app with Cape.JS and organize your JavaScript files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Router</title>
      <link>http://oiax.github.io/capejs/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/router/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#simple-routes&#34;&gt;Simple Routes&lt;/a&gt; -
&lt;a href=&#34;#containers&#34;&gt;Containers&lt;/a&gt; -
&lt;a href=&#34;#resource-based-routes&#34;&gt;Resource Based Routes&lt;/a&gt; -
&lt;a href=&#34;#singular-resources&#34;&gt;Singular Resources&lt;/a&gt; -
&lt;a href=&#34;#nested-resources&#34;&gt;Nested Resources&lt;/a&gt; -
&lt;a href=&#34;#namespaces&#34;&gt;Namespaces&lt;/a&gt; -
&lt;a href=&#34;#adding-custom-actions&#34;&gt;Adding Custom Actions&lt;/a&gt; -
&lt;a href=&#34;#changing-root-container&#34;&gt;Changing Root Container&lt;/a&gt; -
&lt;a href=&#34;#vars&#34;&gt;Vars&lt;/a&gt; -
&lt;a href=&#34;#flash&#34;&gt;Flash&lt;/a&gt; -
&lt;a href=&#34;#before-navigation-callbacks&#34;&gt;Before-Navigation Callbacks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;simple-routes&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;simple-routes:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Simple Routes&lt;/h3&gt;

&lt;p&gt;Cape.JS&amp;rsquo;s router reacts to the changes of URL hash fragment and replace the
component mounted on the target node.&lt;/p&gt;

&lt;p&gt;The following example illustrates the basic concept of router and routes.&lt;/p&gt;

&lt;h4 id=&#34;index-html:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Top&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#about&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#help&amp;quot;&amp;gt;Help&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;./components.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;./router.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;components-js:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;components.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var TopPage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;This is the top page.&#39;)
  }
});

var AboutPage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;This is the about page.&#39;)
  }
});

var HelpPage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;This is the help page.&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;router-js:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;router.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;top_page&#39;);
  m.page(&#39;about&#39;, &#39;about_page&#39;);
  m.page(&#39;help&#39;, &#39;help_page&#39;);
})
router.mount(&#39;main&#39;);
router.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;m.root(&#39;top_page&#39;)&lt;/code&gt; connects the empty hash to the component &lt;code&gt;TopPage&lt;/code&gt;
so that the browser displays the top page when we open this site.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;m.page(&#39;about&#39;, &#39;about_page&#39;)&lt;/code&gt; connects the hash &lt;code&gt;#about&lt;/code&gt; to the component &lt;code&gt;AboutPage&lt;/code&gt;.
When we click the &amp;lsquo;About&amp;rsquo; link, the &lt;code&gt;TopPage&lt;/code&gt; component is removed and
the &lt;code&gt;AboutPage&lt;/code&gt; component gets mounted.&lt;/p&gt;

&lt;p&gt;Each connection between a hash and a component is called &lt;em&gt;route.&lt;/em&gt;
The &lt;em&gt;router&lt;/em&gt; continues to watch the changes of URL hash and switches
components according to the routes.&lt;/p&gt;

&lt;p&gt;You can find the source code of working demo on
&lt;a href=&#34;https://github.com/oiax/capejs/tree/master/demo/simple_routes&#34;&gt;https://github.com/oiax/capejs/tree/master/demo/simple_routes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;containers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;containers:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Containers&lt;/h3&gt;

&lt;p&gt;When the number of components is getting larger, you may want to organize
them in a hyerarchical structure. In this case, you can create some objects
to contain component classes as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Top = {};
Top.IndexPage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;This is the top page.&#39;)
  }
});

Top.AboutPage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;This is the about page.&#39;)
  }
});

Top.HelpPage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;This is the help page.&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We call objects of this kind &lt;em&gt;containers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When you define routes to classes under a container, you should connect
the container&amp;rsquo;s name and the class name with a dot like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;top.index_page&#39;);
  m.page(&#39;about&#39;, &#39;top.about_page&#39;);
  m.page(&#39;help&#39;, &#39;top.help_page&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource-based-routes&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resource-based-routes:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Resource Based Routes&lt;/h3&gt;

&lt;p&gt;When you create a user interface for CRUD operations on a database table, say &lt;code&gt;articles&lt;/code&gt;,
you will need four pages typically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A page for listing articles&lt;/li&gt;
&lt;li&gt;A page for showing the details of an existing article&lt;/li&gt;
&lt;li&gt;A page to add a new article&lt;/li&gt;
&lt;li&gt;A page to update an existing article&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a framework, Cape.JS recommends you to create following routes for these pages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;articles =&amp;gt; Articles.List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;articles/:id =&amp;gt; Articles.Item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;articles/new =&amp;gt; Articles.Form&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;articles/:id/edit =&amp;gt; Articles.Form&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In line with this, you will create three component classes under a container called &lt;code&gt;Articles&lt;/code&gt;
and define routes as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;articles&#39;, &#39;articles.list&#39;);
  m.page(&#39;articles/:id&#39;, &#39;articles.item&#39;);
  m.page(&#39;articles/new&#39;, &#39;articles.form&#39;);
  m.page(&#39;articles/:id/edit&#39;, &#39;articles.form&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;many&lt;/code&gt; method, you can define them in much easier way, though.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The routes defined by the above code are summarized in the next table:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/new&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The fourth and fifth rows of the table contain the &lt;em&gt;resource name&lt;/em&gt; and &lt;em&gt;action name&lt;/em&gt; of routes.
In Cape.JS, unlike in Ruby on Rails, the concepts of resource and action don&amp;rsquo;t play important role,
but we use them occasionally.&lt;/p&gt;

&lt;p&gt;Firstly, we specify action names to the &lt;code&gt;only&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; option in order
to exclude some routes from definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, except: [ &#39;new&#39;, &#39;edit&#39; ]);
  m.many(&#39;announcement&#39;, only: [ &#39;index&#39; ]);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, we want to know the current resource and action names in order to
control the flow of processing when we render components:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Articles.Form = Cape.createComponentClass({
  render: function(m) {
    if (router.action === &#39;new&#39;) {
      // ...
    }
    else {
      // ...
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;singular-resources&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;singular-resources:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Singular Resources&lt;/h3&gt;

&lt;p&gt;When you want to define routes for a resource that can have only zero or
one instance, you should use &lt;code&gt;one&lt;/code&gt; method as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The routes defined by the above code are summarized in the next table:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Content&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/new&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/edit&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Note that the naming convension is different from that of Ruby on Rails.
The container&amp;rsquo;s name is singular, not plural.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;nested-resources&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;nested-resources:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Nested Resources&lt;/h3&gt;

&lt;p&gt;You can define resources which are logically children
of other resources as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, { only: [] }, function(m) {
    m.many(&#39;comments&#39;)
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The routes defined by the above code are summarized in the next table:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:article_id/comments&lt;/td&gt;
  &lt;td&gt;Comments&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;articles/comments&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:article_id/comments/:id&lt;/td&gt;
  &lt;td&gt;Comments&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;articles/comments&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:article_id/comments/new&lt;/td&gt;
  &lt;td&gt;Comments&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles/comments&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:article_id/comments/:id/edit&lt;/td&gt;
  &lt;td&gt;Comments&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles/comments&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Note that you should define &lt;code&gt;Comments.List&lt;/code&gt;, &lt;code&gt;Comments.Item&lt;/code&gt; and &lt;code&gt;Comments.Form&lt;/code&gt;.
They are not &lt;code&gt;Articles.Comments.List&lt;/code&gt;, &lt;code&gt;Articles.Comments.Item&lt;/code&gt; and &lt;code&gt;Articles.Comments.Form&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;namespaces&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;namespaces:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Namespaces&lt;/h3&gt;

&lt;p&gt;You can define resources under a &lt;em&gt;namespace&lt;/em&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The routes defined by the above code are summarized in the next table:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Namespace&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/new&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;adding-custom-actions&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-custom-actions:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Adding Custom Actions&lt;/h3&gt;

&lt;h4 id=&#34;adding-collection-routes:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Adding Collection Routes&lt;/h4&gt;

&lt;p&gt;To add a &lt;em&gt;collection&lt;/em&gt; route (a route which deals with multiple items), use &lt;code&gt;collection&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.collection &#39;draft&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/draft&lt;/code&gt; to &lt;code&gt;Articles.Draft&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;adding-member-routes:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Adding Member Routes&lt;/h4&gt;

&lt;p&gt;To add a &lt;em&gt;member&lt;/em&gt; route (a route which deals with a specific item), use &lt;code&gt;member&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.member &#39;info&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/:id/info&lt;/code&gt; to &lt;code&gt;Articles.Info&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;adding-routes-for-additional-new-actions:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Adding Routes for Additional New Actions&lt;/h4&gt;

&lt;p&gt;To add an alternate new action, use &lt;code&gt;new&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.new &#39;preview&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/new/preview&lt;/code&gt; to &lt;code&gt;Articles.Preview&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;adding-additional-routes-to-singular-resources:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Adding Additional Routes to Singular Resources&lt;/h4&gt;

&lt;p&gt;To add an additional route to singular resources, use &lt;code&gt;view&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.view &#39;photo&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;account/photo&lt;/code&gt; to &lt;code&gt;Account.Photo&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;adding-routes-for-additional-new-actions-of-singular-resources:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Adding Routes for Additional New Actions of Singular Resources&lt;/h4&gt;

&lt;p&gt;To add an alternate new action to singular resources, use &lt;code&gt;new&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.new &#39;preview&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;account/new/preview&lt;/code&gt; to &lt;code&gt;Account.Preview&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;changing-root-container&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;changing-root-container:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Changing Root Container&lt;/h3&gt;

&lt;p&gt;By default, the root container is &lt;code&gt;window&lt;/code&gt; object.
In other words, variables for components and containers are defined globally.&lt;/p&gt;

&lt;p&gt;But you can change it by passing an object to the &lt;code&gt;Cape.Router&lt;/code&gt;&amp;rsquo;s constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var MyApp = {};
var router = new Cape.Router(MyApp);
router.draw(function(m) {
  m.root(&#39;top_page&#39;)
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the component class for root page becomes &lt;code&gt;MyApp.TopPage&lt;/code&gt;,
and the container for the &lt;code&gt;articles&lt;/code&gt; resource becomes &lt;code&gt;MyApp.Articles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;vars&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;vars:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Vars&lt;/h3&gt;

&lt;p&gt;Routers have a property named &lt;code&gt;vars&lt;/code&gt;, which developers can store arbitrary data to.&lt;/p&gt;

&lt;p&gt;For example, you can store attributes of the current user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.vars.current_user = { id: 123, name: &#39;john&#39;, privileged: true }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this data in the &lt;code&gt;render&lt;/code&gt; method of a component like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  if (router.vars.current_user.privileged)
    m.attr(onclick: function(e) { this.deleteItem() } );
  else
    m.class(&#39;disabled&#39;)
  m.button(&#39;Delete&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;flash&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;flash:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Flash&lt;/h3&gt;

&lt;p&gt;Routers have a property named &lt;code&gt;flash&lt;/code&gt;, which developers can store arbitrary data to,
but is erased after each navigation.&lt;/p&gt;

&lt;p&gt;For example, you can store the alert message to be displayed in the next page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.flash.alert = &amp;quot;You can&#39;t delete this item.&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this data in the &lt;code&gt;render&lt;/code&gt; method of a component like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  if (router.flash.alert !== undefined) {
    m.div(router.flash.alert, { class: &#39;alert&#39; });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;before-navigation-callbacks&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;before-navigation-callbacks:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Before-Navigation Callbacks&lt;/h3&gt;

&lt;p&gt;You can register one or more callbacks which are executed before each &lt;em&gt;navigation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.beforeNavigation(function(hash) {
  return new Promise(function(resolve, reject) {
    $.ajax({
      type: &#39;GET&#39;,
      url: &#39;/session&#39;
    }).done(function(data) {
      if (data.text == &#39;OK&#39;) {
        router.vars.currentUser = data.user;
        resolve(hash);
      }
      else {
        router.vars.currentUser = null;
        resolve(&#39;login&#39;);
      }
    }).error(function() {
      reject(Error(&#39;ERROR&#39;));
    });
  });
});
router.errorHandler(function(err) {
  router.show(Errors.NetworkError);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, we get attributes of the user who is signing in to this
application through an Ajax request.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; are functions.
If we call the &lt;code&gt;resolve&lt;/code&gt; passing a hash as the first argument,
the process continues to the next callback which takes this hash as its first argument.
When all callbacks are executed successfully, the hash which is specified by the last callback
determines the component to be mounted.&lt;/p&gt;

&lt;p&gt;If we call the &lt;code&gt;reject&lt;/code&gt; method, the next and subsequent callbacks are skipped and
the error handler is executed if it exists.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; method of router mounts the specified component (&lt;code&gt;Errors.NetworkError&lt;/code&gt;)
immediately without executing before-navigation callbacks.&lt;/p&gt;

&lt;h4 id=&#34;notes-on-the-promise:b440f93c1d3adda104fcdb9ed5aa5063&#34;&gt;Notes on the &lt;em&gt;Promise&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;In this example, we use a
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt;
&lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;
object to assure that the callbacks are executed one by one in order before navigation.
Because Ajax requests are processed &lt;em&gt;asynchronously,&lt;/em&gt;
we can&amp;rsquo;t assure this without the help of &lt;em&gt;Promise&lt;/em&gt; objects.&lt;/p&gt;

&lt;p&gt;Note that all browsers currently in use in the world do not support the &lt;em&gt;Promise&lt;/em&gt; interface.
See &lt;a href=&#34;http://caniuse.com/#feat=promises&#34;&gt;http://caniuse.com/#feat=promises&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For browsers that do not support it, you should use one of these &lt;em&gt;Promise polyfills:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/taylorhakes/promise-polyfill&#34;&gt;https://github.com/taylorhakes/promise-polyfill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jakearchibald/es6-promise&#34;&gt;https://github.com/jakearchibald/es6-promise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose the former, just place the following snippet
to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTML files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&amp;quot;https://cdn.rawgit.com/taylorhakes/promise-polyfill/master/Promise.min.js&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Data Stores</title>
      <link>http://oiax.github.io/capejs/data_stores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://oiax.github.io/capejs/data_stores/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#basics&#34;&gt;Basics&lt;/a&gt; -
&lt;a href=&#34;#ajax&#34;&gt;Ajax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;basics&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;basics:f92bcc195ac1a154137ec3cd72983d7f&#34;&gt;Basics&lt;/h3&gt;

&lt;p&gt;When you develop something larger than a tiny widget, you are recommended to
create a &lt;em&gt;data store&lt;/em&gt; for your Cape.JS component.&lt;/p&gt;

&lt;p&gt;The following example illustrates the basic concept of data stores.&lt;/p&gt;

&lt;h4 id=&#34;index-html:f92bcc195ac1a154137ec3cd72983d7f&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;todo-list&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;./todo_item_store.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;./todo_list2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  var todoList = new TodoList2();
  todoList.mount(&#39;todo-list&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;todo-item-store-js:f92bcc195ac1a154137ec3cd72983d7f&#34;&gt;todo_item_store.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var TodoItemStore = Cape.createDataStoreClass({
  init: function() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
    this.propagate();
  },
  addItem: function(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  },
  toggle: function(item) {
    item.done = !item.done;
    this.propagate();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;TodoItemStore&lt;/code&gt; class has three methods and each of them ends with
&lt;code&gt;this.propagate()&lt;/code&gt;, which calls the &lt;code&gt;refresh&lt;/code&gt; method of all attached components.&lt;/p&gt;

&lt;h4 id=&#34;todo-list2-js:f92bcc195ac1a154137ec3cd72983d7f&#34;&gt;todo_list2.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var TodoList2 = Cape.createComponentClass({
  render: function(m) {
    m.ul(function(m) {
      this.ds.items.forEach(function(item) {
        this.renderItem(m, item);
      }.bind(this))
    });
    this.renderForm(m);
  },

  renderItem: function(m, item) {
    m.li(function(m) {
      m.label({ class: { completed: item.done }}, function(m) {
        m.input({ type: &#39;checkbox&#39;, checked: item.done,
          onclick: function(e) { this.ds.toggle(item) } });
        m.space().text(item.title);
      })
    })
  },

  renderForm: function(m) {
    m.form(function(m) {
      m.textField(&#39;title&#39;, { onkeyup: function(e) { this.refresh() } });
      m.button(&amp;quot;Add&amp;quot;, {
        disabled: this.val(&#39;title&#39;) === &#39;&#39;,
        onclick: function(e) { this.ds.addItem(this.val(&#39;title&#39;, &#39;&#39;)) }
      });
    });
  },

  init: function() {
    this.ds = TodoItemStore.create();
    this.ds.attach(this);
    this.ds.init();
  },

  beforeUnmount: function() {
    this.ds.detach(this);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the &lt;code&gt;init&lt;/code&gt; method, we create a singleton instance of &lt;code&gt;TodoItemStore&lt;/code&gt; class &lt;em&gt;(data store)&lt;/em&gt;,
and set it to the &lt;code&gt;ds&lt;/code&gt; property of this component.&lt;/p&gt;

&lt;p&gt;Then we call the &lt;code&gt;attach&lt;/code&gt; method of the data store to register this component
as a &lt;em&gt;listener&lt;/em&gt; to the &lt;em&gt;change event&lt;/em&gt;. When the content of data store is changed,
a &lt;em&gt;change event&lt;/em&gt; is emitted to this component.&lt;/p&gt;

&lt;p&gt;When we click a check box, the following code is executed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.ds.toggle(item)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This inverts the &lt;code&gt;done&lt;/code&gt; attribute of this item and calls &lt;code&gt;this.propagate()&lt;/code&gt;,
which will cause the re-rendering of this component.&lt;/p&gt;

&lt;p&gt;A working demo is found at
&lt;a href=&#34;https://github.com/oiax/capejs/tree/master/demo/todo_list2&#34;&gt;https://github.com/oiax/capejs/tree/master/demo/todo_list2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;ajax&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ajax:f92bcc195ac1a154137ec3cd72983d7f&#34;&gt;Ajax&lt;/h3&gt;

&lt;p&gt;In this section, we assume that an API server is running behind.
When we access it with &lt;code&gt;GET /api/items.json&lt;/code&gt;, it responds with a JSON string
such as &lt;code&gt;[{ title: &#39;Foo&#39;, done: false },{ title: &#39;Bar&#39;, done: true }]&lt;/code&gt;.
When we post to the server a JSON string such as &lt;code&gt;{ title: &#39;Baz&#39; }&lt;/code&gt;
using &lt;code&gt;POST /api/items&lt;/code&gt; interface, it stores this new item to the database.
If we post to the server a JSON string such as &lt;code&gt;{ done: true }&lt;/code&gt;
using &lt;code&gt;PATCH /api/items/123&lt;/code&gt; interface (&lt;code&gt;123&lt;/code&gt; is the &lt;code&gt;id&lt;/code&gt; value of an item),
it records this item as &amp;ldquo;done&amp;rdquo; on the database.&lt;/p&gt;

&lt;p&gt;In this settings, we can rewrite the &lt;code&gt;todo_item_store.js&lt;/code&gt; of the previous
example as follows:&lt;/p&gt;

&lt;h4 id=&#34;todo-item-store-js-1:f92bcc195ac1a154137ec3cd72983d7f&#34;&gt;todo_item_store.js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var TodoItemStore = Cape.createDataStoreClass({
  init: function() {
    this.items = [];
    this.refresh();
  },

  addItem: function(title) {
    var self = this;
    $.ajax({
      type: &#39;POST&#39;,
      url: &#39;/api/items&#39;,
      data: { title: title }
    }).done(function(data) {
      self.refresh();
    });
  },

  toggle: function(item) {
    var self = this;
    $.ajax({
      type: &#39;PATCH&#39;,
      url: &#39;/api/items/&#39; + item.id,
      data: { done: !item.done }
    }).done(function(data) {
      self.refresh();
    });
  },

  refresh: function() {
    var self = this;
    $.ajax({
      type: &#39;GET&#39;,
      url: &#39;/api/items.json&#39;
    }).done(function(data) {
      self.items.length = 0;
      data.forEach(function(item) { self.items.push(item) });
      self.propagate();
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$.ajax&lt;/code&gt; is a jQuery&amp;rsquo;s method to make an Ajax request.
See &lt;a href=&#34;http://api.jquery.com/jquery.ajax/&#34;&gt;http://api.jquery.com/jquery.ajax/&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;You can find a working demo using Ajax techniques on
&lt;a href=&#34;https://github.com/oiax/capejs-demo-on-rails&#34;&gt;https://github.com/oiax/capejs-demo-on-rails&lt;/a&gt;.
This demo is built as a Ruby on Rails application.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>