<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cape.JS: Documentation</title>
    <link>http://capejs.github.io/capejs/</link>
    <description>Recent content on Cape.JS: Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://capejs.github.io/capejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>API Reference</title>
      <link>http://capejs.github.io/capejs/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt; -
&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt; -
&lt;a href=&#34;./partial&#34;&gt;Cape.Partial&lt;/a&gt; -
&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt; -
&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt; -
&lt;a href=&#34;./collection_agent&#34;&gt;Cape.CollectionAgent&lt;/a&gt; -
&lt;a href=&#34;./resource_agent&#34;&gt;Cape.ResourceAgent&lt;/a&gt; -
&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt; -
&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-cape-object&#34;&gt;The &lt;code&gt;Cape&lt;/code&gt; object&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; defines a single global variable &lt;a href=&#34;./cape&#34;&gt;Cape&lt;/a&gt;.
It has some utility methods, such as &lt;code&gt;extend&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;overview-of-classes&#34;&gt;Overview of classes&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Cape.JS&lt;/strong&gt; consists of following eight classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./component&#34;&gt;Cape.Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./partial&#34;&gt;Cape.Partial&lt;/a&gt; &lt;span class=&#34;badge alert-info&#34;&gt;1.3&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./markup_builder&#34;&gt;Cape.MarkupBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./data_store&#34;&gt;Cape.DataStore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./collection_agent&#34;&gt;Cape.CollectionAgent&lt;/a&gt; &lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./resource_agent&#34;&gt;Cape.ResourceAgent&lt;/a&gt; &lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./router&#34;&gt;Cape.Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./routing_mapper&#34;&gt;Cape.RoutingMapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These classes are defined as properties of the &lt;code&gt;Cape&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The most basic class is &lt;code&gt;Cape.Component&lt;/code&gt;.
You need to define a class extending it in order to create a web widget using Cape.JS.
At least, instances of this class must have a method called &lt;code&gt;render&lt;/code&gt;, which defines
how the component should be rendered in HTML.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.Partial&lt;/code&gt; is a class for &lt;em&gt;partial&lt;/em&gt; components, namely
the components that are include into another component.
Partial components can not be mounted as a web widget directly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; is a class whose instances build &lt;em&gt;virtual dom trees.&lt;/em&gt;
Usually you don&amp;rsquo;t instantiate markup builders by yourself.
Instances of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are passed to the &lt;code&gt;render&lt;/code&gt; method of
component classes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.DataStore&lt;/code&gt; is a class to store and manipulate data, which is used by
components to render themselves.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.CollectionAgent&lt;/code&gt; has a role similar to the &lt;code&gt;Cape.DataStore&lt;/code&gt;,
but is much more powerful.
Using it you can perform REST requests to the web resources through simple API.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cape.ResourceAgent&lt;/code&gt; is a class to represent a particular resource on the web
and performs REST manipulations on it.&lt;/p&gt;

&lt;p&gt;Note that these two classes make use of the built-in
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&#34;&gt;Fetch API&lt;/a&gt;
in order to send Ajax requests to the servers.
They will help you to remove dependencies on jQuery from your applications.&lt;/p&gt;

&lt;p&gt;If you want to create a single page application (SPA), you may need an instance of &lt;code&gt;Cape.Router&lt;/code&gt;.
After you start it, it continues to watch the changes of &lt;em&gt;hash fragment&lt;/em&gt; of URL
and mount components according to the &lt;em&gt;routes&lt;/em&gt;
(associations between hashes and components) which you defined in advance.&lt;/p&gt;

&lt;p&gt;You have to call methods of &lt;code&gt;Cape.RoutingMapper&lt;/code&gt; in order to define the routes.
You will never instantiate it by youself, but will get its instance through the &lt;code&gt;draw&lt;/code&gt;
method of &lt;code&gt;Cape.Router&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assignment of event handler - Cape.JS Primer</title>
      <link>http://capejs.github.io/capejs/tutorials/capejs_primer/08_assignment_of_event_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/tutorials/capejs_primer/08_assignment_of_event_handler/</guid>
      <description>&lt;p&gt;On &lt;a href=&#34;../07_initializing_the_date_with_ajax&#34;&gt;the previous lecture&lt;/a&gt;, I explained how to initialize the component data of Cape.JS via Ajax.&lt;/p&gt;

&lt;p&gt;On this lecture, I&amp;rsquo;ll explain how to assign the event handler to HTML element.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Open &lt;code&gt;app/assets/javascripts/todo_list.es6&lt;/code&gt; on the text editor. At this time of now, the method &lt;code&gt;render()&lt;/code&gt; is defined as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  render(m) {
    m.ul(m =&amp;gt; {
      this.tasks.forEach(task =&amp;gt; {
        m.li(m =&amp;gt; {
          m.label(m =&amp;gt; {
            m.input({ type: &#39;checkbox&#39;, checked: task.done }).sp();
            m.span(task.title);
          });
        });
      });
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rewrite it as following. (add a line behind &lt;code&gt;m.label...&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  render(m) {
    m.ul(m =&amp;gt; {
      this.tasks.forEach(task =&amp;gt; {
        m.li(m =&amp;gt; {
          m.label(m =&amp;gt; {
            m.onclick(e =&amp;gt; this.toggleTask(task));
            m.input({ type: &#39;checkbox&#39;, checked: task.done }).sp();
            m.span(task.title);
          });
        });
      });
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The line is added is following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;m.onclick(e =&amp;gt; this.toggleTask(task));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sentence assigns &lt;code&gt;this.toggleTask(task)&lt;/code&gt; as the event &lt;code&gt;click&lt;/code&gt; handler. The object it the element added to virtual DOM right after, which is the check box.&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
Actually, the broad transcription is used that is introduced on ES6 in this sentence. When it&#39;s not simplified, it&#39;s like following.

&lt;pre&gt;&lt;code&gt;m.onclick((e) =&gt; { this.toggleTask(task) });&lt;/code&gt;&lt;/pre&gt;

You can simplify brackets surrounding the parameter when there&#39;s 1 parameter and you can simplify braces surrounding the sentence when there&#39;s 1 content of the function.
&lt;/div&gt;

&lt;p&gt;Next, let&amp;rsquo;s define the event handler and rewrite &lt;code&gt;app/assets/javascripts/todo_list.es6&lt;/code&gt;. Insert the following code to below the method&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; definition.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  toggleTask(task) {
    window.alert(task.id);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It displays the warning dialog just to make sure the event handler can reacts on the click of checkbox.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s make sure it works well. Boot the server and open &lt;code&gt;http://localhost:3000/&lt;/code&gt; on the browser. By clicking the first checkbox, it displays &amp;ldquo;1&amp;rdquo; like following in the warning dialog. This is the value of the column&amp;rsquo;s &lt;code&gt;id&lt;/code&gt; task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://capejs.github.io/capejs/capejs/images/capejs_primer/todo_list05.png&#34; alt=&#34;Screen capture&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That&amp;rsquo;s all for today. On &lt;a href=&#34;../09_updating_the_data_with_ajax&#34;&gt;the next lecture&lt;/a&gt;, I&amp;rsquo;ll explain how to update the value of the task&amp;rsquo;s  column &lt;code&gt;done&lt;/code&gt; by using Ajax call of this event handler.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape - API Reference</title>
      <link>http://capejs.github.io/capejs/api/cape/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/cape/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#create-collection-agent-class&#34;&gt;Cape.createCollectionAgentClass()&lt;/a&gt; -
&lt;a href=&#34;#create-component-class&#34;&gt;Cape.createComponentClass()&lt;/a&gt; -
&lt;a href=&#34;#create-partial-class&#34;&gt;Cape.createPartialClass()&lt;/a&gt; -
&lt;a href=&#34;#create-data-store-class&#34;&gt;Cape.createDataStoreClass()&lt;/a&gt; -
&lt;a href=&#34;#create-resource-agent-class&#34;&gt;Cape.createResourceAgentClass()&lt;/a&gt; -
&lt;a href=&#34;#deep-extend&#34;&gt;Cape.deepExtend()&lt;/a&gt; -
&lt;a href=&#34;#default-agent-adapter&#34;&gt;Cape.defaultAgentAdapter&lt;/a&gt; -
&lt;a href=&#34;#extend&#34;&gt;Cape.extend()&lt;/a&gt; -
&lt;a href=&#34;#merge&#34;&gt;Cape.merge()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-collection-agent-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createcollectionagentclass&#34;&gt;Cape.createCollectionAgentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createCollectionAgentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.CollectionAgentClass&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createcomponentclass&#34;&gt;Cape.createComponentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createComponentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.Component&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HelloMessage extends Cape.Component {
  render(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-partial-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createpartialclass&#34;&gt;Cape.createPartialClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createPartialClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.Partial&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createPartialClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HelloMessage extends Cape.Partial {
  render(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-component-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createdatastoreclass&#34;&gt;Cape.createDataStoreClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createDataStoreClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.DataStore&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var TodoItemStore = Cape.createDataStoreClass({
  init: function() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
  },
  addItem: function(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  },
  toggle: function(item) {
    item.done = !item.done;
    this.propagate();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ECMAScript 6 syntax, you can write the above as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TodoItemStore extends Cape.DataStore {
  init() {
    this.items = [
      { title: &#39;Foo&#39;, done: false },
      { title: &#39;Bar&#39;, done: true }
    ];
  }
  addItem(title) {
    this.items.push({ title: title, done: false });
    this.propagate();
  }
  toggle(item) {
    item.done = !item.done;
    this.propagate();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create-resource-agent-class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-createresourceagentclass&#34;&gt;Cape.createResourceAgentClass&lt;/h3&gt;

&lt;h4 id=&#34;usage-4&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.createResourceAgentClass(&lt;em&gt;methods&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a class extending &lt;code&gt;Cape.ResourceAgentClass&lt;/code&gt; with &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;default-agent-adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-defaultagentadapter&#34;&gt;Cape.defaultAgentAdapter&lt;/h3&gt;

&lt;p&gt;This property is used as the default value of &lt;code&gt;adapter&lt;/code&gt; property of
collection agents and resource agents.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;../collection_agent#adapter&#34;&gt;CollectionAgent#adapter&lt;/a&gt; and
&lt;a href=&#34;../resource_agent#adapter&#34;&gt;ResourceAgent#adapter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;deep-extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-deepextend&#34;&gt;Cape.deepExtend&lt;/h3&gt;

&lt;h4 id=&#34;usage-5&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object recursively.&lt;/p&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;extend&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-extend&#34;&gt;Cape.extend&lt;/h3&gt;

&lt;h4 id=&#34;usage-6&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.extend(&lt;em&gt;target[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge the properties of two or more objects together into the first object.&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { price: 200 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;merge&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cape-merge&#34;&gt;Cape.merge&lt;/h3&gt;

&lt;h4 id=&#34;usage-7&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cape.merge(target&lt;em&gt;[, object1, object2, &amp;hellip; objectN]&lt;/em&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge (but not override) the properties of two or more objects together
into the first object&lt;/p&gt;

&lt;h4 id=&#34;example-5&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  apple: 2,
  banana: { price: 200 },
  durian: 100
};

Cape.extend(object1, object2);

// [Result]
//
// object1 =&amp;gt; {
//   apple: 0,
//   banana: { weight: 52, price: 100 },
//   cherry: 97,
//   durian: 100
// }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.CollectionAgent - API Reference</title>
      <link>http://capejs.github.io/capejs/api/collection_agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/collection_agent/</guid>
      <description>

&lt;p&gt;&lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt; -
&lt;a href=&#34;#_&#34;&gt;#_&lt;/a&gt; -
&lt;a href=&#34;#adapter&#34;&gt;#adapter&lt;/a&gt; -
&lt;a href=&#34;#after-refresh&#34;&gt;#afterRefresh()&lt;/a&gt; -
&lt;a href=&#34;#ajax&#34;&gt;#ajax()&lt;/a&gt; -
&lt;a href=&#34;#auto-refresh&#34;&gt;#autoRefresh&lt;/a&gt; -
&lt;a href=&#34;#base-path&#34;&gt;#basePath&lt;/a&gt; -
&lt;a href=&#34;#collection-path&#34;&gt;#collectionPath()&lt;/a&gt; -
&lt;a href=&#34;#create&#34;&gt;#create()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data&lt;/a&gt; -
&lt;a href=&#34;#data-type&#34;&gt;#dataType&lt;/a&gt; -
&lt;a href=&#34;#default-error-handler&#34;&gt;#defaultErrorHandler()&lt;/a&gt; -
&lt;a href=&#34;#delete&#34;&gt;#delete()&lt;/a&gt; -
&lt;a href=&#34;#destroy&#34;&gt;#destroy()&lt;/a&gt; -
&lt;a href=&#34;#get&#34;&gt;#get()&lt;/a&gt; -
&lt;a href=&#34;#head&#34;&gt;#head()&lt;/a&gt; -
&lt;a href=&#34;#headers&#34;&gt;#headers&lt;/a&gt; -
&lt;a href=&#34;#index&#34;&gt;#index()&lt;/a&gt; -
&lt;a href=&#34;#member-path&#34;&gt;#memberPath()&lt;/a&gt; -
&lt;a href=&#34;#nested-in&#34;&gt;#nestedIn&lt;/a&gt; -
&lt;a href=&#34;#object&#34;&gt;#objects&lt;/a&gt; -
&lt;a href=&#34;#param-name&#34;&gt;#paramName&lt;/a&gt; -
&lt;a href=&#34;#params-for-refresh&#34;&gt;#paramsForRefresh()&lt;/a&gt; -
&lt;a href=&#34;#patch&#34;&gt;#patch()&lt;/a&gt; -
&lt;a href=&#34;#post&#34;&gt;#post()&lt;/a&gt; -
&lt;a href=&#34;#put&#34;&gt;#put()&lt;/a&gt; -
&lt;a href=&#34;#refresh&#34;&gt;#refresh()&lt;/a&gt; -
&lt;a href=&#34;#resource-name&#34;&gt;#resourceName&lt;/a&gt; -
&lt;a href=&#34;#shallow&#34;&gt;#shallow&lt;/a&gt; -
&lt;a href=&#34;#update&#34;&gt;#update()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;constructor&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;constructor&#34;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cape.CollectionAgent&lt;/code&gt; constructor takes an object &lt;em&gt;(options)&lt;/em&gt; as the first argument.&lt;/p&gt;

&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resourceName:&lt;/strong&gt; the name of resource which is located on the web.
The collection agents use it in order to construct the paths of server-side API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;basePath:&lt;/strong&gt; the string that is added to the request path.
Default value is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nestedIn:&lt;/strong&gt; the string that is inserted between path prefix and the resource
name. Default value is &lt;code&gt;&#39;&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;adapter:&lt;/strong&gt; the name of adapter (e.g., &lt;code&gt;&#39;rails&#39;&lt;/code&gt;). Default is &lt;code&gt;undefined&lt;/code&gt;.
Default value can be changed by setting &lt;code&gt;Cape.defaultAgentAdapter&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autoRefresh:&lt;/strong&gt; a boolean value that controls if a &lt;code&gt;POST/PATCH/PUT/DELETE&lt;/code&gt; request
triggers &lt;code&gt;this.refresh()&lt;/code&gt; after its completion. Default is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dataType:&lt;/strong&gt; the type of data that you&amp;rsquo;re expecting from the server.
The value must be &lt;code&gt;undefined&lt;/code&gt; (default), &lt;code&gt;&#39;json&#39;&lt;/code&gt; or &lt;code&gt;&#39;text&#39;&lt;/code&gt;.
If this property is not set, the collection agents detect the data type
automatically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paramName:&lt;/strong&gt; the name of parameter to be used when the &lt;code&gt;objects&lt;/code&gt;
property is refreshed. Default is &lt;code&gt;undefiend&lt;/code&gt;.
When the &lt;code&gt;paramName&lt;/code&gt; option is not defined, the name is derived from the
&lt;code&gt;resourceName&lt;/code&gt; property, e.g. &lt;code&gt;users&lt;/code&gt; if the resource name is &lt;code&gt;users&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shallow:&lt;/strong&gt; a boolean value that controls whether the agent should omit
the &lt;code&gt;nestedIn&lt;/code&gt; string from the member path. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;
var comp = new Cape.Component();
var agent1 = new Cape.CollectionAgent(comp, { resourceName: &#39;users&#39; });
var agent2 = new Cape.CollectionAgent(comp, { resourceName: &#39;tags&#39;, basePath: &#39;/api/&#39; });
var agent3 = new Cape.CollectionAgent(comp, { resourceName: &#39;members&#39;, nestedIn: &#39;teams/123/&#39; });
var agent4 = new Cape.CollectionAgent(comp, { resourceName: &#39;articles&#39;, dataType: &#39;text&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;_&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;#_&lt;/h3&gt;

&lt;p&gt;This property holds the agent&amp;rsquo;s &lt;em&gt;inner object,&lt;/em&gt; which keeps &lt;em&gt;private&lt;/em&gt; properties
and methods. Developers should not tamper with it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adapter&#34;&gt;#adapter&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;after-refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;afterrefresh&#34;&gt;#afterRefresh&lt;/h3&gt;

&lt;p&gt;This method gets called by the &lt;code&gt;refresh()&lt;/code&gt; method after it updates the &lt;code&gt;data&lt;/code&gt;
and &lt;code&gt;objects&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;afterRefresh()&lt;/code&gt; does &lt;code&gt;this.client.refresh()&lt;/code&gt; by default.
Developers may override this method to let the agent do some
post-processing jobs.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adapter-1&#34;&gt;#adapter&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;ajax&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ajax&#34;&gt;#ajax()&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;auto-refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;autorefresh&#34;&gt;#autoRefresh&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;base-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;basepath&#34;&gt;#basePath&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;collection-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;collectionpath&#34;&gt;#collectionPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a collection of resources in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#collectionPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create&#34;&gt;#create()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;create(params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with POST method to the URL that is constructed
by the &lt;a href=&#34;#collection-path&#34;&gt;collectionPath()&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The first argument (&lt;code&gt;params&lt;/code&gt;) must be an object (hash).&lt;/p&gt;

&lt;p&gt;The optional second argument (&lt;code&gt;callback&lt;/code&gt;) must be a function, which takes the
response data from the server as the single argument and does some post-processing jobs.&lt;/p&gt;

&lt;p&gt;Ths optional third argument (&lt;code&gt;errorHandler&lt;/code&gt;) must be a function,
which takes an exception and does some error-handling jobs.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserList extends Cape.Component {
  init() {
    this.agent = new Cape.CollectionAgent(this, { resourceName: &#39;users&#39; })
    this.agent.refresh()
  }

  render(m) {
    m.ol(m =&amp;gt; {
      this.agent.objects.forEach(user =&amp;gt; {
        m.li(m =&amp;gt; {
          m.text(user.name);
        });
      });
    });
    m.formFor(&#39;user&#39;, m =&amp;gt; {
      m.labelFor(&#39;name&#39;, &#39;Name&#39;);
      m.textField(&#39;name&#39;);
      m.onclick(e =&amp;gt; {
        this.agent.create(this.paramsFor(&#39;user&#39;))
      });
      m.btn(&#39;Add User&#39;);
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data&#34;&gt;#data&lt;/h3&gt;

&lt;p&gt;This property holds an object (hash)
if the response data is a valid JSON string.
Otherwise, it holds the original string value.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;datatype&#34;&gt;#dataType&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;default-error-hander&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;defaulterrorhandler&#34;&gt;#defaultErrorHandler()&lt;/h3&gt;

&lt;p&gt;This method handles the exception thrown during the Fetch API.&lt;/p&gt;

&lt;p&gt;The default implementation is just &lt;code&gt;console.log(ex)&lt;/code&gt;.
Developers may override this for a better exception handling.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;delete&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;delete&#34;&gt;#delete()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;delete(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;delete(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;delete(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with DELETE method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;destroy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;destroy&#34;&gt;#destroy()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;destroy(id)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(id, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(id, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with DELETE method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The first argument (&lt;code&gt;id&lt;/code&gt;) specifies the &lt;em&gt;id&lt;/em&gt; of the resource to be updated.
This is usually the value of primary key of a database record, but is not
always the case.&lt;/p&gt;

&lt;p&gt;The optional second argument (&lt;code&gt;callback&lt;/code&gt;) must be a function, which takes the
response data from the server as the single argument and does some post-processing jobs.&lt;/p&gt;

&lt;p&gt;Ths optional third argument (&lt;code&gt;errorHandler&lt;/code&gt;) must be a function,
which takes an exception and does some error-handling jobs.&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserList extends Cape.Component {
  init() {
    this.agent = new Cape.CollectionAgent(this, { resourceName: &#39;users&#39; })
    this.agent.refresh()
  }

  render(m) {
    m.ol(m =&amp;gt; {
      this.agent.objects.forEach(user =&amp;gt; {
        m.li(m =&amp;gt; {
          m.text(user.name);
          m.onclick(e =&amp;gt; {
            this.agent.destroy(user.id);
          });
          m.btn(&#39;Delete&#39;);
        });
      });
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;get&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;get&#34;&gt;#get()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;get(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;get(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;get(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with GET method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;get-instance&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;getinstance&#34;&gt;.getInstance()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5&#34;&gt;Usage&lt;/h4&gt;

&lt;p&gt;Returns an instance of collection agent.&lt;/p&gt;

&lt;p&gt;This class method is implemented as a &lt;em&gt;multiton&lt;/em&gt; method,
which keeps a map of named instances
of the class as key-value pairs in order to ensure a single instance per key.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; options are used to construct
the key.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;head&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;head&#34;&gt;#head()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;head(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;head(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;head(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with HEAD method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;headers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;headers&#34;&gt;#headers&lt;/h3&gt;

&lt;p&gt;This property holds the HTTP headers for Ajax requests.&lt;/p&gt;

&lt;p&gt;The default value is &lt;code&gt;{ &#39;Content-Type&#39;: &#39;application/json&#39; }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;index&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;index&#34;&gt;#index()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index(params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index(params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index(params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with GET method to the URL that is constructed
by the &lt;code&gt;collectionPath()&lt;/code&gt; method and the &lt;code&gt;params&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;member-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;memberpath&#34;&gt;#memberPath()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;memberPath(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the URL path to a resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#memberPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; part of the URL path (&lt;code&gt;9&lt;/code&gt;) derives from the &lt;code&gt;id&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;nested-in&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;nestedin&#34;&gt;#nestedIn&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;objects&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;objects&#34;&gt;#objects&lt;/h3&gt;

&lt;p&gt;This property holds an array of objects (hashes) that represents the
collection of resources which the agent is associated to.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;param-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramname&#34;&gt;#paramName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params-for-refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramsforrefresh&#34;&gt;#paramsForRefresh()&lt;/h3&gt;

&lt;h4 id=&#34;usage-9&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;paramsForRefresh()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns an empty object (&lt;code&gt;{}&lt;/code&gt;) always. This object is used to construct
the query string of the request URL during the &lt;code&gt;refresh()&lt;/code&gt; process.&lt;/p&gt;

&lt;p&gt;Developers may override this method to change this behavior.&lt;/p&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserAgent extends Cape.CollectionAgent {
  constructor(options) {
    super(options);
    this.page = 1;
    this.perPage = 20;
  }

  paramsForRefresh() {
    return { page: this.page, per_page: this.perPage };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;patch&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;patch&#34;&gt;#patch()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;patch(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;patch(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;patch(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PATCH method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;post&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;post&#34;&gt;#post()&lt;/h3&gt;

&lt;h4 id=&#34;usage-11&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;post(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;post(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;post(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with POST method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;put&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;put&#34;&gt;#put()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;put(actionName, id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;put(actionName, id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;put(actionName, id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PUT method to the URL that is constructed
by given arguments.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;refresh&#34;&gt;#refresh()&lt;/h3&gt;

&lt;p&gt;This method sends an Ajax request with GET method to the URL that is constructed
by the &lt;a href=&#34;#collection-path&#34;&gt;#collectionPath()&lt;/a&gt; and
&lt;a href=&#34;#params-for-refresh&#34;&gt;#paramsForRefresh()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resourcename&#34;&gt;#resourceName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;shallow&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shallow&#34;&gt;#shallow&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;update&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;#update()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;update(id, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(id, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(id, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PATCH method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The first argument (&lt;code&gt;id&lt;/code&gt;) specifies the &lt;em&gt;id&lt;/em&gt; of the resource to be updated.
This is usually the value of primary key of a database record, but is not
always the case.&lt;/p&gt;

&lt;p&gt;The second argument (&lt;code&gt;params&lt;/code&gt;) must be an object (hash).&lt;/p&gt;

&lt;p&gt;The optional third argument (&lt;code&gt;callback&lt;/code&gt;) must be a function, which takes the
response data from the server as the single argument and does some post-processing jobs.&lt;/p&gt;

&lt;p&gt;Ths optional fourth argument (&lt;code&gt;errorHandler&lt;/code&gt;) must be a function,
which takes an exception and does some error-handling jobs.&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserList extends Cape.Component {
  init() {
    this.agent = new Cape.CollectionAgent(this, { resourceName: &#39;users&#39; })
    this.agent.refresh()
  }

  render(m) {
    m.ol(m =&amp;gt; {
      this.agent.objects.forEach(user =&amp;gt; {
        m.li(m =&amp;gt; {
          m.text(user.name);
          m.onclick(e =&amp;gt; {
            this.agent.update(user.id, { user: { deleted: 1 } });
          });
          m.btn(&#39;Delete&#39;);
        });
      });
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Component - API Reference</title>
      <link>http://capejs.github.io/capejs/api/component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/component/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#checked-on&#34;&gt;checkedOn()&lt;/a&gt; -
&lt;a href=&#34;#form-data&#34;&gt;formData()&lt;/a&gt; -
&lt;a href=&#34;#json-for&#34;&gt;jsonFor()&lt;/a&gt; -
&lt;a href=&#34;#mount&#34;&gt;mount()&lt;/a&gt; -
&lt;a href=&#34;#params-for&#34;&gt;paramsFor()&lt;/a&gt; -
&lt;a href=&#34;#refresh&#34;&gt;refresh()&lt;/a&gt; -
&lt;a href=&#34;#root&#34;&gt;root&lt;/a&gt; -
&lt;a href=&#34;#unmount&#34;&gt;unmount()&lt;/a&gt; -
&lt;a href=&#34;#val&#34;&gt;val()&lt;/a&gt; -
&lt;a href=&#34;#values-for&#34;&gt;valuesFor()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;checked-on&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkedon-span-class-badge-alert-info-1-2-span&#34;&gt;#checkedOn() &lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkedOn(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; is checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; exists but is not checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.checkBox(&#39;done&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.checkedOn(&#39;done&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the form has a &lt;code&gt;name&lt;/code&gt; attribute, you should prepend its value and a dot
to the name of check box.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;task&#39;, function(m) {
    m.checkBox(&#39;done&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.checkedOn(&#39;task.done&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formdata&#34;&gt;#formData()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formData()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns a JavaScript object that represents the values of
all form controls within the component.&lt;/p&gt;

&lt;p&gt;The values are organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;,
    addresses: {
      &#39;0&#39;: {
        country: &#39;Japan&#39;,
        city: &#39;Tokyo&#39;
      },
      &#39;1&#39;: {
        country: &#39;USA&#39;,
        city: &#39;New York&#39;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;json-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;jsonfor-span-class-badge-alert-info-1-1-span&#34;&gt;#jsonFor() &lt;span class=&#34;badge alert-info&#34;&gt;1.1&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jsonFor(formName)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thid method returns a JSON string that represents the field values of
a named form.&lt;/p&gt;

&lt;p&gt;The values are organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;jsonFor()&lt;/code&gt; method of its instances returns a string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;user&amp;quot;: { &amp;quot;login_name&amp;quot;: &amp;quot;john&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-5&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;jsonFor()&lt;/code&gt; method of its instances returns a string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;user&amp;quot;: {&amp;quot;login_name&amp;quot;: &amp;quot;john&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;}, &amp;quot;addresses&amp;quot;: [{&amp;quot;country&amp;quot;: &amp;quot;Japan&amp;quot;, &amp;quot;city&amp;quot;: &amp;quot;Tokyo&amp;quot; }, {&amp;quot;country&amp;quot;: &amp;quot;USA&amp;quot;, &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mount&#34;&gt;#mount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mount(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method renders the component and inserts it within the element specified by &lt;em&gt;id.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-6&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
var HelloWorld = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, World!&#39;)
  }
});
var component = new HelloWorld();
component.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the component has the &lt;code&gt;init()&lt;/code&gt; method, the &lt;code&gt;mount()&lt;/code&gt; calls it
instead of rendering the component.&lt;/p&gt;

&lt;h4 id=&#34;example-7&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloWorld = Cape.createComponentClass({
  init: function() {
    this.name = &#39;World&#39;;
    this.refresh();
  },

  render: function(m) {
    m.p(&#39;Hello, &#39; + this.name + &#39;!&#39;)
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should have to call the &lt;code&gt;refresh()&lt;/code&gt; method at the end
to render the component.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramsfor-span-class-badge-alert-info-1-1-span&#34;&gt;#paramsFor() &lt;span class=&#34;badge alert-info&#34;&gt;1.1&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Thid method returns an object that represents the field values of
a named form.&lt;/p&gt;

&lt;p&gt;The returned object is organized in hierarchical structure
so that you can pass it to the &lt;a href=&#34;http://api.jquery.com/jquery.ajax/&#34;&gt;ajax()&lt;/a&gt; method of jQuery.&lt;/p&gt;

&lt;h4 id=&#34;example-8&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose that you have a component defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;name&#39;);
      m.passwordField(&#39;password&#39;);
      m.btn(&#39;Sign in&#39;, { onclick: function(e) { this.save(); } });
    });
  },
  save: function() {
    $.ajax({
      url: &#39;/sessions/&#39;,
      method: &#39;POST&#39;,
      data: this.paramsFor(&#39;user&#39;)
    }).done(function(data) {
      // Do something.
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you fill in &lt;code&gt;name&lt;/code&gt; field with &amp;lsquo;john&amp;rsquo; and &lt;code&gt;password&lt;/code&gt; field with &lt;code&gt;1234&lt;/code&gt;
and click the &amp;lsquo;Sign in&amp;rsquo; button, &lt;code&gt;this.paramsFor(&#39;user&#39;)&lt;/code&gt; passes
to the &lt;code&gt;data&lt;/code&gt; option of the &lt;code&gt;ajax()&lt;/code&gt; the following object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    name: &amp;quot;john&amp;quot;,
    password: &amp;quot;1234&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that jQuery converts this object to a query string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user[name]=john&amp;amp;user[password]=1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-9&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose that you have a component defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  init: function() {
    this.user_id = 123;
    this.setValues({
      user: {
        name: &#39;john&#39;,
        addresses: [
          { country: &#39;Japan&#39;, city: &#39;Tokyo&#39; },
          { country: &#39;USA&#39;, city: &#39;New York&#39; }
        ]
      }
    });
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;name&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        });
      }
      m.btn(&#39;Save&#39;, { onclick: function(e) { this.save(); } });
    });
  },
  save: function() {
    $.ajax({
      url: &#39;/sessions/&#39; + this.user_id,
      method: &#39;PATH&#39;,
      data: this.paramsFor(&#39;user&#39;)
    }).done(function(data) {
      // Do something.
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you change the value of &lt;code&gt;name&lt;/code&gt; field from &amp;lsquo;john&amp;rsquo; to &amp;lsquo;mike&amp;rsquo; and click &amp;lsquo;Save&amp;rsquo;
button, &lt;code&gt;this.paramsFor(&#39;user&#39;)&lt;/code&gt; passes to the &lt;code&gt;data&lt;/code&gt; option of the &lt;code&gt;ajax()&lt;/code&gt;
the following object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    name: &amp;quot;mike&amp;quot;,
    addresses: {
      &#39;0&#39;: {
        country: &amp;quot;Japan&amp;quot;,
        city: &amp;quot;Tokyo&amp;quot;
      },
      &#39;1&#39;: {
        country: &amp;quot;USA&amp;quot;,
        city: &amp;quot;New York&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that jQuery converts this object to a query string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user[name]=mike&amp;amp;user[addresses][0][country]=Japan&amp;amp;user[addresses][0][city]=Tokyo&amp;amp;user[addresses][1][country]=USA&amp;amp;user[addresses][1][city]=New+York
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;refresh&#34;&gt;#refresh()&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;refresh()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method rerenders the component by calling its &lt;code&gt;render()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;root&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;root&#34;&gt;#root&lt;/h3&gt;

&lt;p&gt;This property refers to the HTML element which the component is mounted on.&lt;/p&gt;

&lt;p&gt;Its &lt;code&gt;data&lt;/code&gt; subproperty holds the values of &lt;code&gt;data-*&lt;/code&gt; attributes of the root element.&lt;/p&gt;

&lt;h4 id=&#34;example-10&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;The following example shows &amp;ldquo;Hello, John!&amp;rdquo; on your browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=&amp;quot;main&amp;quot; data-name=&amp;quot;John&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(&#39;Hello, &#39; + this.root.data.name + &#39;!&#39;)
  }
});
var component = new HelloMessage();
component.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;unmount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;unmount&#34;&gt;#unmount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;unmount()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the component from the HTML document.&lt;/p&gt;

&lt;p&gt;If the component has the &lt;code&gt;beforeUnmount()&lt;/code&gt; method, it is called before the component is unmounted.
If the component has the &lt;code&gt;afterUnmount()&lt;/code&gt; method, it is called after the component has been unmounted.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;val&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;val&#34;&gt;#val()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;val(name)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get or set the value of a form field.&lt;/p&gt;

&lt;p&gt;When the number of arguments is one and that argument is a string,
this method returns the value of the corresponding field.&lt;/p&gt;

&lt;h4 id=&#34;example-11&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.val(&#39;user.family_name&#39;));
        console.log(this.val(&#39;user.given_name&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is two,
this method sets the value of a field whose name is corresponding
to the first argument to the second argument and returns
the original value of the field.&lt;/p&gt;

&lt;h4 id=&#34;example-12&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;message&#39;, function(m) {
    m.textField(&#39;body&#39;);
    m.button(&#39;Send&#39;, {
      onclick: function(e) {
        var body = this.val(&#39;message.body&#39;, &#39;&#39;),
            self = this;
        $.post(&#39;/api/messages&#39;, { body: body }, function() {
          self.refresh();
        });
        return false;
      }
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is one and that argument is an object,
this method sets the value of corresponding fields.&lt;/p&gt;

&lt;h4 id=&#34;example-13&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        var self = this,
            data = self.formData();
        self.val({ user: { family_name: &#39;&#39;, given_name: &#39;&#39; } });
        $.post(&#39;/api/users&#39;, data, function() {
          self.refresh();
        })
        return false;
      }
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;values-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;valuesfor-span-class-badge-alert-info-1-1-span&#34;&gt;#valuesFor() &lt;span class=&#34;badge alert-info&#34;&gt;1.1&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Thid method sets the field values of a named form by passing an object as the first argument.&lt;/p&gt;

&lt;p&gt;The values of this object must be organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-14&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you render a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  init: function() {
    this.valuesFor({
      user: {
        login_name: &#39;john&#39;,
        gender: &#39;m&#39;
      }
    });
    this.refresh();
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.radioButton(&#39;gender&#39;, &#39;m&#39;);
      m.radioButton(&#39;gender&#39;, &#39;f&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the only text field is filled with a string &amp;ldquo;john&amp;rdquo; and the first
radio button is checked.&lt;/p&gt;

&lt;h4 id=&#34;example-15&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you render a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createComponentClass({
  init: function() {
    this.valuesFor({
      user: {
        login_name: &#39;john&#39;,
        addresses: [
          { country: &#39;Japan&#39;, city: &#39;Tokyo&#39; },
          { country: &#39;USA&#39;, city: &#39;New York&#39; }
        ]
      }
    });
    this.refresh();
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the all text fields are filled in.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.DataStore - API Reference</title>
      <link>http://capejs.github.io/capejs/api/data_store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/data_store/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt; -
&lt;a href=&#34;#attach&#34;&gt;#attach()&lt;/a&gt; -
&lt;a href=&#34;#create&#34;&gt;.create()&lt;/a&gt; -
&lt;a href=&#34;#detach&#34;&gt;#detach()&lt;/a&gt; -
&lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;constructor&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;constructor&#34;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cape.DataStore&lt;/code&gt; constructor takes no argument and calls its &lt;code&gt;#init&lt;/code&gt; method
if defined.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var cs = new CounterStore();
// cs.counter === 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also &lt;a href=&#34;../cape/#create-data-store-class&#34;&gt;Cape.createDataStoreClass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attach&#34;&gt;#attach()&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method registers the &lt;em&gt;component&lt;/em&gt; as a target of &lt;em&gt;propagation&lt;/em&gt; from this data store.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create&#34;&gt;.create()&lt;/h3&gt;

&lt;p&gt;This class method returns a singleton object of this Class.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var cs1 = CounterStore.create();
var cs2 = CounterStore.create();
// cs1 === cs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;detach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;detach&#34;&gt;#detach()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;detach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the &lt;em&gt;component&lt;/em&gt; from the list of targets of &lt;em&gt;propagation&lt;/em&gt; from this data store.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#propagate&#34;&gt;#propagate()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;propagate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;propagate&#34;&gt;#propagate()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;propagate()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method triggars the &lt;em&gt;propagation&lt;/em&gt; process, which calls the &lt;code&gt;#refresh()&lt;/code&gt; method
of all components registerd as targets of &lt;em&gt;propagation&lt;/em&gt; of this data store.&lt;/p&gt;

&lt;p&gt;Eventually, the &lt;code&gt;#refresh&lt;/code&gt; method of each component calls its &lt;code&gt;#render()&lt;/code&gt; method,
which has to be defined by developers.&lt;/p&gt;

&lt;p&gt;Thus, we can assure that each time the data of a data store changes,
its all dependent components get refreshed.&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CounterStore = Cape.createDataStoreClass({
  init: function() {
    this.counter = 0;
  },
  increment: function() {
    this.counter++;
    this.propagate();
  }
});

var ClickCounter = Cape.createComponentClass({
  render: function(m) {
    m.div(String(this.ds.counter),
      { onclick: function(e) { this.ds.increment() } })
  }
})

var ds = new CounterStore();
var comp1 = new ClickCounter();
var comp2 = new ClickCounter();

comp1.ds = ds;
comp2.ds = ds;
ds.attach(comp1);
ds.attach(comp2);

comp1.mount(&#39;counter1&#39;);
comp2.mount(&#39;counter2&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.JS 1.2 - Cape.JS Primer</title>
      <link>http://capejs.github.io/capejs/tutorials/capejs_primer/16_capejs_1_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/tutorials/capejs_primer/16_capejs_1_2/</guid>
      <description>&lt;p&gt;It has passed about a month from &lt;a href=&#34;../15_deleting_task&#34;&gt;the previous lecture&lt;/a&gt;.
I thought I could release Cape.JS 1.2 soon at the time I wrote the article but I&amp;rsquo;ve noticed there are some &amp;ldquo;holes&amp;rdquo; of the spec since my co-workers and I actually use it. It&amp;rsquo;s already updated for 16 times (!) since the first Release Candidate (RC) version.&lt;/p&gt;

&lt;p&gt;Now, two new classes are introduced on Cape.JS 1.2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ResourceAgent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CollectionAgent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each one is the class to handle &amp;ldquo;resource&amp;rdquo; in the Rails terminology. For more information, I&amp;rsquo;ll explain later of the next time, you can write JavaScript program that accesses REST API easier than ever by using them.&lt;/p&gt;

&lt;p&gt;On this lecture, I&amp;rsquo;ll explain how to upgrade Cape.JS to 1.2 of &amp;ldquo;Todo list&amp;rdquo; application you have created.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First update the server.(Rails) Open &lt;code&gt;Gemfile&lt;/code&gt; on the text editor and rewrite the line starting from &lt;code&gt;gem &#39;rails&#39;&lt;/code&gt; as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gem &#39;rails&#39;, &#39;4.2.4&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, rewrite the last line as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gem &#39;sprockets-es6&#39;, &#39;~&amp;gt; 0.7.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, run the next command on the terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ bin/bundle update
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;note&#34;&gt;
In actually, you can use Cape.JS 1.2 if you don&#39;t update them. In this opportunity, I hope you to update the version.
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Next, update the front (JavaScript) side. Open &lt;code&gt;bower.json&lt;/code&gt; on the text editor and rewrite it as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;todo_list&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
  &amp;quot;authors&amp;quot;: [
    &amp;quot;Tsutomu Kuroda &amp;lt;t-kuroda@oiax.jp&amp;gt;&amp;quot;
  ],
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;ignore&amp;quot;: [
    &amp;quot;**/.*&amp;quot;,
    &amp;quot;node_modules&amp;quot;,
    &amp;quot;bower_components&amp;quot;,
    &amp;quot;vendor/assets/components&amp;quot;,
    &amp;quot;test&amp;quot;,
    &amp;quot;tests&amp;quot;
  ],
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;capejs&amp;quot;: &amp;quot;~1.2.0&amp;quot;,
    &amp;quot;bootstrap&amp;quot;: &amp;quot;=3.3.4&amp;quot;,
    &amp;quot;es6-promise&amp;quot;: &amp;quot;~3.0.2&amp;quot;,
    &amp;quot;fetch&amp;quot;: &amp;quot;~0.9.0&amp;quot;,
    &amp;quot;fontawesome&amp;quot;: &amp;quot;~4.4.0&amp;quot;,
    &amp;quot;lodash&amp;quot;: &amp;quot;~3.10.1&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I rewrote &lt;code&gt;&amp;quot;versions&amp;quot;: &amp;quot;0.0.0&amp;quot;,&lt;/code&gt; to  &lt;code&gt;&amp;quot;versions&amp;quot;: &amp;quot;0.1.0&amp;quot;,&lt;/code&gt; on the third line. And then, I added the points to the section &lt;code&gt;&amp;quot;dependencies&amp;quot;&lt;/code&gt; and update the version number of original one. The ones added are &lt;code&gt;es6-promise&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; and I&amp;rsquo;ll explain their roles later. About original one, it updated the version of &lt;code&gt;capejs&lt;/code&gt; to &lt;code&gt;~1.2.0&lt;/code&gt; and upgrade each of &lt;code&gt;fontawesome&lt;/code&gt; and &lt;code&gt;lodash&lt;/code&gt;. But, about &lt;code&gt;bootstrap&lt;/code&gt;, the newest 3.3.5 has bad chemistry with Sprockets so it stabilizes &lt;code&gt;=3.3.4&lt;/code&gt; and the version.&lt;/p&gt;

&lt;p&gt;Run the next command on the terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ bower update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can upgrade Cape.JS of &amp;ldquo;Todo list&amp;rdquo; application to 1.2.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I&amp;rsquo;ll explain &lt;code&gt;es6-promise&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; added to the section &lt;code&gt;&amp;quot;dependencies&amp;quot;&lt;/code&gt; of &lt;code&gt;bower.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jakearchibald/es6-promise&#34;&gt;es6-promise&lt;/a&gt; is &amp;ldquo;polyfill&amp;rdquo; for
the new function of ECMAScript 6 &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
There is a case that a JavaScript library exists in order to realize the equal function that modern browsers (generally, the newest Chrome and Firefox) provide but other browsers (Internet Explorer and Safari) do not. It&#39;s called polyfill.
&lt;/div&gt;

&lt;p&gt;When you use Promise, it&amp;rsquo;s easier to write the non-synchronous processing on JavaScript.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;a href=&#34;https://github.com/github/fetch&#34;&gt;fetch&lt;/a&gt; is the polyfill for another new functional called as &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/Fetch_API&#34;&gt;Fetch API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fetch API is the new interface to acquire the resource beyond the network. It&amp;rsquo;s an alternative to the &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/XMLHttpRequest&#34;&gt;XMLHttpRequest&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
jQuery calls Ajax request by using XMLHttpRequest in it. If it can uses Fetch API, it&#39;s not necessary to use jQuery for Ajax.
&lt;/div&gt;

&lt;p&gt;The class &lt;code&gt;ResourceAgent&lt;/code&gt; and the class &lt;code&gt;CollectionAgent&lt;/code&gt; introduced on Cape.JS 1.2 use this Fetch API in it. And, the polyfill &lt;code&gt;fetch&lt;/code&gt; depends Promise.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;From &lt;a href=&#34;../17_collection_agent1&#34;&gt;the next lecture&lt;/a&gt;, I&amp;rsquo;ll rewrite &amp;ldquo;Todo list&amp;rdquo; application by using the new function of Cape.JS 1.2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.JS Primer - A Tutorial</title>
      <link>http://capejs.github.io/capejs/tutorials/capejs_primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/tutorials/capejs_primer/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/oiax/capejs/master/doc/logo/capejs.svg&#34; alt=&#34;Cape.JS Logo&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;

&lt;p&gt;With this series of tutorials you can learn the the programming of &lt;em&gt;Cape.JS,&lt;/em&gt;
a JavaScript UI framework that was born in 2015.&lt;/p&gt;

&lt;p&gt;You will also learn how to integrate it with a back-end server written in Ruby on Rails,
by creating a simple &lt;em&gt;to-do&lt;/em&gt; list application step by step.&lt;/p&gt;

&lt;p&gt;Cape.JS uses a technique &amp;ldquo;virtual DOM&amp;rdquo; just like &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://muut.com/riotjs/&#34;&gt;Riot&lt;/a&gt; do.
You can utilize Cape.JS to create interactive websites, whose contents change dynamically in response to user actions.&lt;/p&gt;

&lt;p&gt;Until recently, it&amp;rsquo;s general to create such interactive websites by making full use of &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;,
but front-end programming will be much easier to if you adopt &amp;ldquo;virtual DOM&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Cape.JS is an open source project. It&amp;rsquo;s distributed under the MIT license.
You can use it for free and also redistribute or sell it after you modify its source code.
You can find the source code at GitHub&amp;rsquo;s &lt;a href=&#34;https://github.com/capejs/capejs&#34;&gt;repository&lt;/a&gt;.
Also, &lt;a href=&#34;http://oiax.github.io/capejs/&#34;&gt;documents&lt;/a&gt; are prepared.&lt;/p&gt;

&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Preface&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./01_hello_world&#34;&gt;Hello, world!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./02_custom_attributes_and_nested_elements&#34;&gt;Reference of custom attribute value and nesting of HTML elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./03_creating_text_nodes&#34;&gt;Creating the text nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./04_rails_integration1&#34;&gt;Integrate Cape.JS with Ruby on Rails (1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./05_rails_integration2&#34;&gt;Integrate Cape.JS with Ruby on Rails (2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./06_let_the_component_have_the_date&#34;&gt;Let the component have the date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./07_initializing_the_date_with_ajax&#34;&gt;Initializing the date with Ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./08_assignment_of_event_handler&#34;&gt;Assignment of event handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./09_updating_the_data_with_ajax&#34;&gt;Updating the data with Ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./10_the_data_store&#34;&gt;The data store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./11_form_for_new_task&#34;&gt;Show the form for new task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./12_creating_new_task&#34;&gt;Creating new task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./13_editing_task&#34;&gt;The edit form of the task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./14_updating_task&#34;&gt;Update the task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./15_deleting_task&#34;&gt;Delete the task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./16_capejs_1_2&#34;&gt;Cape.JS 1.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./17_collection_agent1&#34;&gt;Collection agent (1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./18_collection_agent2&#34;&gt;Collection agent (2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./19_collection_agent3&#34;&gt;Collection agent (3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./20_reordering1&#34;&gt;Change displaying order (1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./21_reordering2&#34;&gt;Change displaying order (2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./22_reordering3&#34;&gt;Change displaying order (3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cape.MarkupBuilder - API Reference</title>
      <link>http://capejs.github.io/capejs/api/markup_builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/markup_builder/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#general-notes&#34;&gt;General notes&lt;/a&gt; -
&lt;a href=&#34;#a-abbr-address-etc&#34;&gt;#a(), #abbr(), #address()&lt;/a&gt; -
&lt;a href=&#34;#area-base-br-etc&#34;&gt;#area(), #base(), #br()&lt;/a&gt; -
&lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt; -
&lt;a href=&#34;#btn&#34;&gt;#btn()&lt;/a&gt; -
&lt;a href=&#34;#check-box&#34;&gt;#checkBox()&lt;/a&gt; -
&lt;a href=&#34;#checked&#34;&gt;#checked()&lt;/a&gt; -
&lt;a href=&#34;#class&#34;&gt;#class()&lt;/a&gt; -
&lt;a href=&#34;#css&#34;&gt;#css()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data()&lt;/a&gt; -
&lt;a href=&#34;#disabled&#34;&gt;#disabled()&lt;/a&gt; -
&lt;a href=&#34;#elem&#34;&gt;#elem()&lt;/a&gt; -
&lt;a href=&#34;#fa&#34;&gt;#fa()&lt;/a&gt; -
&lt;a href=&#34;#fields-for&#34;&gt;#fieldsFor()&lt;/a&gt; -
&lt;a href=&#34;#form-for&#34;&gt;#formFor()&lt;/a&gt; -
&lt;a href=&#34;#hidden-field&#34;&gt;#hiddenField()&lt;/a&gt; -
&lt;a href=&#34;#label-for&#34;&gt;#labelFor()&lt;/a&gt; -
&lt;a href=&#34;#markup&#34;&gt;#markup()&lt;/a&gt; -
&lt;a href=&#34;#on&#34;&gt;#on()&lt;/a&gt; -
&lt;a href=&#34;#onblur-onfocus-etc&#34;&gt;#onblur(), #onfocus(), etc.&lt;/a&gt; -
&lt;a href=&#34;#password-field&#34;&gt;#passwordField()&lt;/a&gt; -
&lt;a href=&#34;#radio-button&#34;&gt;#radioButton()&lt;/a&gt; -
&lt;a href=&#34;#select-box&#34;&gt;#selectBox()&lt;/a&gt; -
&lt;a href=&#34;#sp&#34;&gt;#sp()&lt;/a&gt; -
&lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt; -
&lt;a href=&#34;#text&#34;&gt;#text()&lt;/a&gt; -
&lt;a href=&#34;#textarea-field&#34;&gt;#textareaField()&lt;/a&gt; -
&lt;a href=&#34;#text-field&#34;&gt;#textField()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;general-notes&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;general-notes&#34;&gt;General notes&lt;/h3&gt;

&lt;p&gt;All instance methods of &lt;code&gt;Cape.MarkupBuilder&lt;/code&gt; are &lt;em&gt;chainable.&lt;/em&gt;
Each method returns the instance itself.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.text(&#39;Hello,&#39;).sp().text(this.guest.name).text(&#39;!&#39;);
      // The above single statement is equivalent to the
      // following four statement;
      //   m.text(&#39;Hello,&#39;);
      //   m.sp();
      //   m.text(this.guest.name);
      //   m.text(&#39;!&#39;);
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All instance methods except &lt;code&gt;#attr&lt;/code&gt;, &lt;code&gt;#class&lt;/code&gt;, &lt;code&gt;#css&lt;/code&gt;, &lt;code&gt;#data&lt;/code&gt;, &lt;code&gt;#sp&lt;/code&gt;, &lt;code&gt;#space&lt;/code&gt;
and &lt;code&gt;#text&lt;/code&gt; take the &lt;em&gt;options&lt;/em&gt; argument, which will be translated into the
attributes of element to be created.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;, { title: &#39;greeting&#39; });
      // The above code generates the following &amp;lt;p&amp;gt; tag:
      //   &amp;lt;p title=&amp;quot;greeting&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;em&gt;options&lt;/em&gt; argument has a &lt;code&gt;visible&lt;/code&gt; key and its value is &lt;em&gt;falsey&lt;/em&gt;
(&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt;),
it sets the &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt; to make this element invisible.&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascrpt&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.p(function(m) {
      m.p(&#39;Hello, world!&#39;,
        { visible: Date.now().getDay() === 0 });
      // On sunday, the above code generates the following:
      //   &amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
      // On other days:
      //   &amp;lt;p style=&amp;quot;display: none&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;
    })
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;a-abbr-address-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-abbr-address-etc&#34;&gt;#a(), #abbr(), #address(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abbr([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;address([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a, abbr, address, article, aside, audio, b, bdi, bdo,
  blockquote, body, button, canvas, caption, cite, code,
  colgroup, datalist, dd, del, details, dfn, dialog, div,
  dl, dt, em, embed, fieldset, figcaption, figure, footer,
  h1, h2, h3, h4, h5, h6, head, header, html,
  i, iframe, ins, kbd, label, legend, li, main, map, mark,
  menu, menuitem, meter, nav, noscript, object, ol, optgroup,
  option, output, p, pre, progress, q, rp, rt, ruby, s,
  samp, script, section, select, small, span, strong, style,
  sub, summary, sup, table, tbody, td, textarea, tfoot,
  th, thead, time, title, tr, u, ul, var, video&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the first argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article(function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;);
      m.ul(function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var HelloMessage = Cape.createComponentClass({
  render: function(m) {
    m.article({ id: &#39;agenda&#39; }, function(m) {
      m.p(&#39;The agenda for the meeting is as follows:&#39;,
        { className: &#39;statement&#39; });
      m.ul({ style: &#39;color: blue&#39; }, function(m) {
        m.li(&#39;Performance of business&#39;);
        m.li(&#39;Challenges on business&#39;);
        m.li(&#39;Our next goal&#39;);
      })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;area-base-br-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;area-base-br-etc&#34;&gt;#area(), #base(), #br(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;area([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;base([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;br([options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following HTML 5 &lt;em&gt;void&lt;/em&gt; elements can be added to the virtual dom tree by the markup builder&amp;rsquo;s
method with the same name:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;area, base, br, col, embed, hr, img, input, keygen,
link, menuitem, meta, param, source, track, wbr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They don&amp;rsquo;t take a string argument nor a function argument, though.
They only accept a hash object to set the attribute values of the element.&lt;/p&gt;

&lt;h4 id=&#34;example-5&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var LogoMark = Cape.createComponentClass({
  render: function(m) {
    m.div({ id: &#39;agenda&#39; }, function(m) {
      m.img({ src: &#39;../images/logo.png&#39;, alt: &#39;Logo Image&#39; })
    })
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attr&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attr&#34;&gt;#attr()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attr(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;attr({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the value of attributes for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-6&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  // Or, m.attr({ alt: &#39;Logo Image&#39; });
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute values are set cumulatively.&lt;/p&gt;

&lt;h4 id=&#34;example-7&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.attr(&#39;width&#39;, &#39;180&#39;);
  m.attr(&#39;height&#39;, &#39;120&#39;);
  m.attr(&#39;title&#39;, &#39;Cape.JS&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  // These two statements are equivalent to the following
  // single statement:
  //   m.img({ src: &#39;../images/logo.png&#39;,
  //           alt: &#39;Logo Image&#39;,
  //           width: &#39;180&#39;, height: &#39;120&#39;,
  //           title: &#39;Cape.JS&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The values set by &lt;code&gt;#attr&lt;/code&gt; does not affect the elements created after the next element.&lt;/p&gt;

&lt;h4 id=&#34;example-8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.attr(&#39;alt&#39;, &#39;Logo Image&#39;);
  m.img({ src: &#39;../images/logo.png&#39; });
  m.img({ src: &#39;../images/download.png&#39; });
  // The last statement creates a &amp;lt;img&amp;gt; tag without
  // alt attribute.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;check-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkbox&#34;&gt;#checkBox()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkBox(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.
See &lt;a href=&#34;#formFor&#34;&gt;#formFor&lt;/a&gt; for details.&lt;/p&gt;

&lt;h4 id=&#34;example-9&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelOf(&#39;privileged&#39;, function(m) {
      m.checkBox(&#39;privileged&#39;);
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //       &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //         id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //     &amp;lt;/label&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;btn&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;btn&#34;&gt;#btn()&lt;/h3&gt;

&lt;h4 id=&#34;usage-4&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;btn(content, options)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;btn(options, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element whose &lt;code&gt;type&lt;/code&gt; attribute is set to &lt;code&gt;button&lt;/code&gt; by default.&lt;/p&gt;

&lt;h4 id=&#34;example-10&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;test&#39;, function(m) {
    m.btn(&#39;Click&#39;);
  });
  // The above code generates the following HTML tags
  //   &amp;lt;form name=&amp;quot;test&amp;quot;&amp;gt;
  //     &amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;Click&amp;lt;/button&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;checked&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checked&#34;&gt;#checked()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checked(boolean)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a shortcut method which has the same effect with &lt;code&gt;#attr(&#39;checked&#39;, boolean)&lt;/code&gt;.
See &lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-11&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.checked(true).input({ type: &#39;checkbox&#39; })
  // The above code generates the following HTML tag
  //   &amp;lt;input type=&amp;quot;checkbox&amp;quot; checked&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;class&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;class&#34;&gt;#class()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;class(name)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;class(names)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;class({ name1: boolean1, name2: boolean2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;class&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-12&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;container&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-13&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class(&#39;panel panel-standard&#39;);
  m.div(&#39;Hello World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;panel panel-standard&amp;quot;&amp;gt;
  //     Hello, World!
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-14&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.class({ panel: true, &#39;panel-standard&#39;: true, top: false });
  m.div(&#39;Hello World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;div class=&amp;quot;panel panel-standard&amp;quot;&amp;gt;
  //     Hello, World!
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#class&lt;/code&gt; method add classes cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;css&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;css&#34;&gt;#css()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;css(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the styles for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-15&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.css(&#39;color&#39;, &#39;red&#39;).span(&#39;Danger&#39;);
  // This is equivalent to the following statement:
  //   m.span(&#39;Danger&#39;, { style: &#39;color: red&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should write names of style in camel case.&lt;/p&gt;

&lt;h4 id=&#34;example-16&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.css({ backgroundColor: &#39;red&#39; }).p(&#39;Danger&#39;);
  // This is equivalent to the following statement:
  //   m.p(&#39;Danger&#39;, { style: &#39;background-color: red&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data&#34;&gt;#data()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;data(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;data-*&lt;/code&gt; attribute value for the element which will be added nextly.&lt;/p&gt;

&lt;h4 id=&#34;example-17&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data(&#39;id&#39;, &#39;7&#39;);
  m.div(function(m) {
    m.p(&#39;Hello, World!&#39;)
  });
  // The above code generates the following HTML tags
  //   &amp;lt;div data-id=&amp;quot;7&amp;quot;&amp;gt;
  //     &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;#attr&#34;&gt;#attr&lt;/a&gt;, the &lt;code&gt;#data&lt;/code&gt; method sets attribute values cumulatively and
affects only the nextly added element.&lt;/p&gt;

&lt;h4 id=&#34;example-18&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data({ id: &#39;7&#39; });
  m.p(&#39;Hello, World!&#39;);
  m.p(&#39;Hello, World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;p data-id=&amp;quot;7&amp;quot;&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
  //   &amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names specified in camel case are converted into a string separated by dashes.&lt;/p&gt;

&lt;h4 id=&#34;example-19&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.data({ messageId: &#39;7&#39; });
  m.p(&#39;Hello, World!&#39;);
  // The above code generates the following HTML tags
  //   &amp;lt;p data-message-id=&amp;quot;7&amp;quot;&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;disabled&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;disabled&#34;&gt;#disabled()&lt;/h3&gt;

&lt;h4 id=&#34;usage-9&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;disabled(boolean)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a shortcut method which has the same effect with &lt;code&gt;#attr(&#39;disabled&#39;, boolean)&lt;/code&gt;.
See &lt;a href=&#34;#attr&#34;&gt;#attr()&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-20&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.disabled(true).input({ type: &#39;text&#39; })
  // The above code generates the following HTML tag
  //   &amp;lt;input type=&amp;quot;text&amp;quot; disabled&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;elem&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;elem&#34;&gt;#elem()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;elem(content [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elem([options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create an HTML element. The first argument is a CSS selector, such as &lt;code&gt;&amp;quot;div.container&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the second argument is a string, it becomes the content of element.
When the last argument is a function, it creates a dependent virtual dom tree.&lt;/p&gt;

&lt;h4 id=&#34;example-21&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;);
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can pass a hash object as &lt;em&gt;options&lt;/em&gt; to these methods to set the attribute values
of the element. The position of this argument should be after the string argument
and before the function argument.&lt;/p&gt;

&lt;h4 id=&#34;example-22&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.elem(&#39;div#wrapper&#39;, { style: &#39;margin-top: 10px&#39; },
    function(m) {
    m.elem(&#39;div.container&#39;, function(m) {
      m.elem(&#39;div.row&#39;, function(m) {
        m.elem(&#39;div.col-md-6&#39;, &#39;Hello&#39;,
          { style: &#39;font-weight: bold&#39; });
        m.elem(&#39;div.col-md-6&#39;, &#39;World&#39;);
      })
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;div id=&amp;quot;wrapper&amp;quot; style=&amp;quot;margin-top: 10px&amp;quot;&amp;gt;
  //     &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  //       &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;
  //           style=&amp;quot;font-weight: bold&amp;quot;&amp;gt;Hello&amp;lt;/div&amp;gt;
  //         &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;World&amp;lt;/div&amp;gt;
  //       &amp;lt;/div&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fa&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fa&#34;&gt;#fa()&lt;/h3&gt;

&lt;h4 id=&#34;usage-11&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fa(name [, options])&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;font awesome&lt;/a&gt; icon
(actually, it is just an empty &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag) to the virtual dom tree.
Its first argument is the icon&amp;rsquo;s name, such as &lt;code&gt;&amp;quot;download&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;gear&amp;quot;&lt;/code&gt;, etc.
You can pass a hash object as the optional second argument to set the
attribute values of &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h4 id=&#34;example-23&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.a({ href: &#39;./download.html&#39; }, function(m) {
    m.fa(&#39;download&#39;).text(&#39; Download&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;a href=&amp;quot;./download.html&amp;quot;&amp;gt;
  //     &amp;lt;i class=&amp;quot;fa fa-download&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Download&amp;lt;/a&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;fields-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fieldsfor&#34;&gt;#fieldsFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fieldsFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a scope for nested forms. In this scope, a prefix is
addded to the name of each form control.&lt;/p&gt;

&lt;h4 id=&#34;example-24&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;home_address/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you pass the &lt;code&gt;index&lt;/code&gt; option to this method, the prefix is numbered:&lt;/p&gt;

&lt;h4 id=&#34;example-25&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.textField(&#39;name&#39;);
    m.fieldsFor(&#39;address&#39;, { index: 1 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
    m.fieldsFor(&#39;address&#39;, { index: 2 } function(m) {
      m.textField(&#39;city&#39;);
      m.textField(&#39;street&#39;);
    })
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/1/street&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/city&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;address/2/street&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formfor&#34;&gt;#formFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formFor(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag whose name attribute is &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Using this method instead of &lt;code&gt;#form&lt;/code&gt;, the form name prefix is
added to the &lt;code&gt;name&lt;/code&gt; attribute of subordinate form controls.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; attribute is set automatically. When the form name is &lt;code&gt;&#39;foo&#39;&lt;/code&gt;,
the &lt;code&gt;id&lt;/code&gt; attribute of a form control whose name is &lt;code&gt;bar&lt;/code&gt; becomes &lt;code&gt;&#39;foo-field-bar&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-26&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;name&#39;);
    m.checkBox(&#39;privileged&#39;);
  })
  // The above code generates the following HTML tags
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //       id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       value=&amp;quot;0&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;hidden-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hiddenfield&#34;&gt;#hiddenField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-14&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hiddenField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;hidden&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-27&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.hiddenField(&#39;privileged&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;user.privileged&amp;quot;
  //       id=&amp;quot;user-field-privileged&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;label-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;labelfor&#34;&gt;#labelFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-15&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;labelFor(name, label)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag whose &lt;code&gt;name&lt;/code&gt; attribute is &lt;code&gt;name&lt;/code&gt;.
Its &lt;code&gt;for&lt;/code&gt; attribute is set appropriately.&lt;/p&gt;

&lt;h4 id=&#34;example-28&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.div(function(m) {
      m.labelFor(&#39;name&#39;, &#39;User name&#39;).sp().textField(&#39;name&#39;);
    });
    m.fieldsFor(&#39;home_address&#39;, function(m) {
      m.div(function(m) {
        m.labelFor(&#39;city&#39;, &#39;City&#39;).sp().textField(&#39;city&#39;);
      });
      m.div(function(m) {
        m.labelFor(&#39;street&#39;, &#39;Street&#39;).sp().textField(&#39;street&#39;);
      });
    });
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-name&amp;quot;&amp;gt;User name&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.name&amp;quot;
  //         id=&amp;quot;user-field-name&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //         City&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.home-address/city&amp;quot;
  //         id=&amp;quot;user-field-home-address-city&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //     &amp;lt;div&amp;gt;
  //       &amp;lt;label for=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //         Street&amp;lt;/label&amp;gt;
  //       &amp;lt;input type=&amp;quot;text&amp;quot;
  //         name=&amp;quot;user.home-address/street&amp;quot;
  //         id=&amp;quot;user-field-home-address-street&amp;quot;&amp;gt;
  //     &amp;lt;/div&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;markup&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;markup&#34;&gt;#markup()&lt;/h3&gt;

&lt;p&gt;This method is for internal use. Do not override it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;on&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;on&#34;&gt;#on()&lt;/h3&gt;

&lt;h4 id=&#34;usage-16&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;on(eventName, function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the handler of event &lt;em&gt;eventName&lt;/em&gt; for the element which will be added nextly
to &lt;em&gt;function.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-29&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.on(&#39;click&#39;, function(e) { this.counter++ });
  m.on(&#39;dblclick&#39;, function(e) { this.counter = 0 });
  m.span(&#39;Click me!&#39;);
  // These two statements are equivalent to the following
  // single statement:
  //   m.span(&#39;Click me!&#39;,
  //     { onclick: function(e) { this.counter++ },
  //       ondblclick: function(e) { this.counter = 0 } })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute values are set cumulatively.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;onblur-onfocus-etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;onblur-onfocus-etc&#34;&gt;#onblur(), #onfocus(), etc.&lt;/h3&gt;

&lt;h4 id=&#34;usage-17&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;onblur(function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onfocus(function)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are shortcut methods which have same effects with &lt;code&gt;#on(&#39;blur&#39;, function)&lt;/code&gt;,
&lt;code&gt;#on(&#39;focus&#39;, function)&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Similar shortcut methods are defined for the following events:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;blur, focus, change, select, submit, reset, abort, error,
load, unload, click, dblclick, keyup, keydown, keypress,
mouseout, mouseover, mouseup, mousedown, mousemove&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;example-30&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.onclick(function(e) { this.counter++ });
  m.ondblclick(function(e) { this.counter = 0 });
  m.span(&#39;Click me!&#39;);
  // These two statements are equivalent to the following
  // single statement:
  //   m.span(&#39;Click me!&#39;,
  //     { onclick: function(e) { this.counter++ },
  //       ondblclick: function(e) { this.counter = 0 } })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;password-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;passwordfield&#34;&gt;#passwordField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-18&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;passwordField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;password&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-31&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.passwordField(&#39;password&#39;);
    m.passwordField(&#39;password_confirmation&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;user.password&amp;quot;
  //       id=&amp;quot;user-field-password&amp;quot;&amp;gt;
  //     &amp;lt;input type=&amp;quot;password&amp;quot;
  //       name=&amp;quot;user.password_confirmation&amp;quot;
  //       id=&amp;quot;user-field-password-confirmation&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;radio-button&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;radiobutton&#34;&gt;#radioButton()&lt;/h3&gt;

&lt;h4 id=&#34;usage-19&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;radioButton(name, value[, options])&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second argument becomes the value of this radio button.&lt;/p&gt;

&lt;h4 id=&#34;example-32&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.label(&#39;A&#39;, function(m) {
      m.radioButton(&#39;plan&#39;, &#39;a&#39;);
    })
    m.label(&#39;B&#39;, function(m) {
      m.radioButton(&#39;plan&#39;, &#39;b&#39;);
    })
    m.label(&#39;C&#39;, function(m) {
      m.radioButton(&#39;plan&#39;, &#39;c&#39;);
    })
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label&amp;gt;
  //       &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;user.plan&amp;quot;
  //         id=&amp;quot;user-field-plan-a&amp;quot; value=&amp;quot;a&amp;quot;&amp;gt;A
  //     &amp;lt;/label&amp;gt;
  //     &amp;lt;label&amp;gt;
  //       &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;user.plan&amp;quot;
  //         id=&amp;quot;user-field-plan-b&amp;quot; value=&amp;quot;b&amp;quot;&amp;gt;B
  //     &amp;lt;/label&amp;gt;
  //     &amp;lt;label&amp;gt;
  //       &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;user.plan&amp;quot;
  //         id=&amp;quot;user-field-plan-c&amp;quot; value=&amp;quot;c&amp;quot;&amp;gt;C
  //     &amp;lt;/label&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;select-box&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;selectbox&#34;&gt;#selectBox()&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;selectBox(name, [options,] callback)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-33&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.selectBox(&#39;plan&#39;, function(m) {
      m.option(&#39;A&#39;, { value: &#39;a&#39; });
      m.option(&#39;B&#39;, { value: &#39;b&#39; });
      m.option(&#39;C&#39;, { value: &#39;c&#39; });
    })
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //      &amp;lt;select name=&amp;quot;plan&amp;quot; id=&amp;quot;user-field-plan&amp;quot;&amp;gt;
  //        &amp;lt;option value=&amp;quot;a&amp;quot;&amp;gt;A&amp;lt;/option&amp;gt;
  //        &amp;lt;option value=&amp;quot;b&amp;quot;&amp;gt;B&amp;lt;/option&amp;gt;
  //        &amp;lt;option value=&amp;quot;c&amp;quot;&amp;gt;C&amp;lt;/option&amp;gt;
  //      &amp;lt;/select&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;sp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sp&#34;&gt;#sp()&lt;/h3&gt;

&lt;p&gt;This is an alias to &lt;a href=&#34;#space&#34;&gt;#space()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;space&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;space&#34;&gt;#space()&lt;/h3&gt;

&lt;h4 id=&#34;usage-20&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;space()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a single space character. Same as &lt;code&gt;text(&#39; &#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-34&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p(function(m) {
    m.text(this.message);
    m.space();
    m.strong(this.name);
    m.text(&#39;!&#39;);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;text&#34;&gt;#text()&lt;/h3&gt;

&lt;h4 id=&#34;usage-21&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text(string)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;em&gt;string&lt;/em&gt; as a text node to the virtual dom tree.
The special characters (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;) are escaped automatically.&lt;/p&gt;

&lt;h4 id=&#34;example-35&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.h1(function(m) {
    m.text(this.title).sp();
    m.small(this.subtitle);
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to create a content from a string without escaping it,
use &lt;code&gt;innerHTML&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.p({ innerHTML: &#39;&amp;amp;copy; &amp;lt;span&amp;gt;Foo Bar, Inc.&amp;lt;/span&amp;gt;&#39; })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;textarea-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textareafield&#34;&gt;#textareaField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-22&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;textField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-36&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelFor(&#39;remarks&#39;, &#39;Remarks&#39;).br();
    m.textareaField(&#39;remarks&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-remarks&amp;quot;&amp;gt;
  //       Remarks&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
  //     &amp;lt;textarea name=&amp;quot;user.remarks&amp;quot;
  //       id=&amp;quot;user-field-remarks&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;text-field&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;textfield&#34;&gt;#textField()&lt;/h3&gt;

&lt;h4 id=&#34;usage-23&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;textField(name, [options,] function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; tag tailored for form manipulation.
Its first argument is the base of &lt;code&gt;name&lt;/code&gt; attribute value.
If the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag has a name &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt;,
then the &lt;code&gt;name&lt;/code&gt; attribute becomes &lt;code&gt;&amp;quot;user.name&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;example-37&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.labelFor(&#39;login_name&#39;, &#39;Login Name&#39;).sp();
    m.textField(&#39;login_name&#39;);
  });
  // The above code generates the following HTML tags:
  //   &amp;lt;form name=&amp;quot;user&amp;quot;&amp;gt;
  //     &amp;lt;label for=&amp;quot;user-field-login-name&amp;quot;&amp;gt;
  //       Login Name&amp;lt;/label&amp;gt;
  //     &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user.login_name&amp;quot;
  //       id=&amp;quot;user-field-login-name&amp;quot;&amp;gt;
  //   &amp;lt;/form&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Partial - API Reference</title>
      <link>http://capejs.github.io/capejs/api/partial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/partial/</guid>
      <description>

&lt;p&gt;&lt;span class=&#34;badge alert-info&#34;&gt;1.3&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#checked-on&#34;&gt;checkedOn()&lt;/a&gt; -
&lt;a href=&#34;#form-data&#34;&gt;formData()&lt;/a&gt; -
&lt;a href=&#34;#json-for&#34;&gt;jsonFor()&lt;/a&gt; -
&lt;a href=&#34;#params-for&#34;&gt;paramsFor()&lt;/a&gt; -
&lt;a href=&#34;#refresh&#34;&gt;refresh()&lt;/a&gt; -
&lt;a href=&#34;#val&#34;&gt;val()&lt;/a&gt; -
&lt;a href=&#34;#values-for&#34;&gt;valuesFor()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;checked-on&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkedon&#34;&gt;#checkedOn()&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkedOn(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; is checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; exists but is not checked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; if the check box whose name is &lt;code&gt;name&lt;/code&gt; does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.form(function(m) {
    m.checkBox(&#39;done&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.checkedOn(&#39;done&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the form has a &lt;code&gt;name&lt;/code&gt; attribute, you should prepend its value and a dot
to the name of check box.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;task&#39;, function(m) {
    m.checkBox(&#39;done&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.checkedOn(&#39;task.done&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formdata&#34;&gt;#formData()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;formData()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns a JavaScript object that represents the values of
all form controls within the partial&amp;rsquo;s root component.&lt;/p&gt;

&lt;p&gt;The values are organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a partial defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a partial defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;formData()&lt;/code&gt; method of its instances returns an object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    login_name: &#39;john&#39;,
    password: &#39;p@ssw0rd&#39;,
    addresses: {
      &#39;0&#39;: {
        country: &#39;Japan&#39;,
        city: &#39;Tokyo&#39;
      },
      &#39;1&#39;: {
        country: &#39;USA&#39;,
        city: &#39;New York&#39;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;json-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;jsonfor&#34;&gt;#jsonFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jsonFor(formName)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thid method returns a JSON string that represents the field values of
a named form.&lt;/p&gt;

&lt;p&gt;The values are organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;jsonFor()&lt;/code&gt; method of its instances returns a string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;user&amp;quot;: { &amp;quot;login_name&amp;quot;: &amp;quot;john&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-5&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you have a partial defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.passwordField(&#39;password&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;jsonFor()&lt;/code&gt; method of its instances returns a string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;user&amp;quot;: {&amp;quot;login_name&amp;quot;: &amp;quot;john&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;p@ssw0rd&amp;quot;}, &amp;quot;addresses&amp;quot;: [{&amp;quot;country&amp;quot;: &amp;quot;Japan&amp;quot;, &amp;quot;city&amp;quot;: &amp;quot;Tokyo&amp;quot; }, {&amp;quot;country&amp;quot;: &amp;quot;USA&amp;quot;, &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramsfor&#34;&gt;#paramsFor()&lt;/h3&gt;

&lt;p&gt;Thid method returns an object that represents the field values of
a named form.&lt;/p&gt;

&lt;p&gt;The returned object is organized in hierarchical structure
so that you can pass it to the &lt;a href=&#34;http://api.jquery.com/jquery.ajax/&#34;&gt;ajax()&lt;/a&gt; method of jQuery.&lt;/p&gt;

&lt;h4 id=&#34;example-6&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose that you have a partial defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;name&#39;);
      m.passwordField(&#39;password&#39;);
      m.btn(&#39;Sign in&#39;, { onclick: function(e) { this.save(); } });
    });
  },
  save: function() {
    $.ajax({
      url: &#39;/sessions/&#39;,
      method: &#39;POST&#39;,
      data: this.paramsFor(&#39;user&#39;)
    }).done(function(data) {
      // Do something.
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you fill in &lt;code&gt;name&lt;/code&gt; field with &amp;lsquo;john&amp;rsquo; and &lt;code&gt;password&lt;/code&gt; field with &lt;code&gt;1234&lt;/code&gt;
and click the &amp;lsquo;Sign in&amp;rsquo; button, &lt;code&gt;this.paramsFor(&#39;user&#39;)&lt;/code&gt; passes
to the &lt;code&gt;data&lt;/code&gt; option of the &lt;code&gt;ajax()&lt;/code&gt; the following object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    name: &amp;quot;john&amp;quot;,
    password: &amp;quot;1234&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that jQuery converts this object to a query string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user[name]=john&amp;amp;user[password]=1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-7&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose that you have a partial defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  init: function() {
    this.user_id = 123;
    this.setValues({
      user: {
        name: &#39;john&#39;,
        addresses: [
          { country: &#39;Japan&#39;, city: &#39;Tokyo&#39; },
          { country: &#39;USA&#39;, city: &#39;New York&#39; }
        ]
      }
    });
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;name&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        });
      }
      m.btn(&#39;Save&#39;, { onclick: function(e) { this.save(); } });
    });
  },
  save: function() {
    $.ajax({
      url: &#39;/sessions/&#39; + this.user_id,
      method: &#39;PATH&#39;,
      data: this.paramsFor(&#39;user&#39;)
    }).done(function(data) {
      // Do something.
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you change the value of &lt;code&gt;name&lt;/code&gt; field from &amp;lsquo;john&amp;rsquo; to &amp;lsquo;mike&amp;rsquo; and click &amp;lsquo;Save&amp;rsquo;
button, &lt;code&gt;this.paramsFor(&#39;user&#39;)&lt;/code&gt; passes to the &lt;code&gt;data&lt;/code&gt; option of the &lt;code&gt;ajax()&lt;/code&gt;
the following object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  user: {
    name: &amp;quot;mike&amp;quot;,
    addresses: {
      &#39;0&#39;: {
        country: &amp;quot;Japan&amp;quot;,
        city: &amp;quot;Tokyo&amp;quot;
      },
      &#39;1&#39;: {
        country: &amp;quot;USA&amp;quot;,
        city: &amp;quot;New York&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that jQuery converts this object to a query string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user[name]=mike&amp;amp;user[addresses][0][country]=Japan&amp;amp;user[addresses][0][city]=Tokyo&amp;amp;user[addresses][1][country]=USA&amp;amp;user[addresses][1][city]=New+York
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;refresh&#34;&gt;#refresh()&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;refresh()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method rerenders the partial&amp;rsquo;s root component by calling its &lt;code&gt;render()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;val&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;val&#34;&gt;#val()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;val(name)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val(name, value)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;val({ name1: value1, name2: value2, &amp;hellip; })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get or set the value of a form field.&lt;/p&gt;

&lt;p&gt;When the number of arguments is one and that argument is a string,
this method returns the value of the corresponding field.&lt;/p&gt;

&lt;h4 id=&#34;example-8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        console.log(this.val(&#39;user.family_name&#39;));
        console.log(this.val(&#39;user.given_name&#39;));
        return false;
      }
    })
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is two,
this method sets the value of a field whose name is corresponding
to the first argument to the second argument and returns
the original value of the field.&lt;/p&gt;

&lt;h4 id=&#34;example-9&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;message&#39;, function(m) {
    m.textField(&#39;body&#39;);
    m.button(&#39;Send&#39;, {
      onclick: function(e) {
        var body = this.val(&#39;message.body&#39;, &#39;&#39;),
            self = this;
        $.post(&#39;/api/messages&#39;, { body: body }, function() {
          self.refresh();
        });
        return false;
      }
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the number of arguments is one and that argument is an object,
this method sets the value of corresponding fields.&lt;/p&gt;

&lt;h4 id=&#34;example-10&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render: function(m) {
  m.formFor(&#39;user&#39;, function(m) {
    m.textField(&#39;family_name&#39;).sp()
      .textField(&#39;given_name&#39;);
    m.button(&#39;Check&#39;, {
      onclick: function(e) {
        var self = this,
            data = self.formData();
        self.val({ user: { family_name: &#39;&#39;, given_name: &#39;&#39; } });
        $.post(&#39;/api/users&#39;, data, function() {
          self.refresh();
        })
        return false;
      }
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;values-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;valuesfor&#34;&gt;#valuesFor()&lt;/h3&gt;

&lt;p&gt;Thid method sets the field values of a named form by passing an object as the first argument.&lt;/p&gt;

&lt;p&gt;The values of this object must be organized in hierarchical structure as explained following examples:&lt;/p&gt;

&lt;h4 id=&#34;example-11&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you render a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  init: function() {
    this.valuesFor({
      user: {
        login_name: &#39;john&#39;,
        gender: &#39;m&#39;
      }
    });
    this.refresh();
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.radioButton(&#39;gender&#39;, &#39;m&#39;);
      m.radioButton(&#39;gender&#39;, &#39;f&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the only text field is filled with a string &amp;ldquo;john&amp;rdquo; and the first
radio button is checked.&lt;/p&gt;

&lt;h4 id=&#34;example-12&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;If you render a component defined like this,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Form = Cape.createPartialClass({
  init: function() {
    this.valuesFor({
      user: {
        login_name: &#39;john&#39;,
        addresses: [
          { country: &#39;Japan&#39;, city: &#39;Tokyo&#39; },
          { country: &#39;USA&#39;, city: &#39;New York&#39; }
        ]
      }
    });
    this.refresh();
  },
  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      for (var index = 0; index &amp;lt; 2; i++) {
        m.fieldsFor(&#39;addresses&#39;, { index: index }, function(m) {
          m.textField(&#39;country&#39;);
          m.textField(&#39;city&#39;);
        })
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will see the all text fields are filled in.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.ResourceAgent - API Reference</title>
      <link>http://capejs.github.io/capejs/api/resource_agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/resource_agent/</guid>
      <description>

&lt;p&gt;&lt;span class=&#34;badge alert-info&#34;&gt;1.2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt; -
&lt;a href=&#34;#_&#34;&gt;#_&lt;/a&gt; -
&lt;a href=&#34;#adapter&#34;&gt;#adapter&lt;/a&gt; -
&lt;a href=&#34;#after-refresh&#34;&gt;#afterRefresh()&lt;/a&gt; -
&lt;a href=&#34;#ajax&#34;&gt;#ajax()&lt;/a&gt; -
&lt;a href=&#34;#base-path&#34;&gt;#basePath&lt;/a&gt; -
&lt;a href=&#34;#client&#34;&gt;#client&lt;/a&gt; -
&lt;a href=&#34;#collection-path&#34;&gt;#collectionPath()&lt;/a&gt; -
&lt;a href=&#34;#create&#34;&gt;#create()&lt;/a&gt; -
&lt;a href=&#34;#data&#34;&gt;#data&lt;/a&gt; -
&lt;a href=&#34;#data-type&#34;&gt;#dataType&lt;/a&gt; -
&lt;a href=&#34;#default-error-hander&#34;&gt;#defaultErrorHandler()&lt;/a&gt; -
&lt;a href=&#34;#destroy&#34;&gt;#destroy()&lt;/a&gt; -
&lt;a href=&#34;#errors&#34;&gt;#errors&lt;/a&gt; -
&lt;a href=&#34;#formName&#34;&gt;#formName&lt;/a&gt; -
&lt;a href=&#34;#headers&#34;&gt;#headers&lt;/a&gt; -
&lt;a href=&#34;#id&#34;&gt;#id&lt;/a&gt; -
&lt;a href=&#34;#init&#34;&gt;#init()&lt;/a&gt; -
&lt;a href=&#34;#member-path&#34;&gt;#memberPath()&lt;/a&gt; -
&lt;a href=&#34;#object&#34;&gt;#object&lt;/a&gt; -
&lt;a href=&#34;#new-path&#34;&gt;#newPath()&lt;/a&gt; -
&lt;a href=&#34;#nested-in&#34;&gt;#nestedIn&lt;/a&gt; -
&lt;a href=&#34;#param-name&#34;&gt;#paramName&lt;/a&gt; -
&lt;a href=&#34;#refresh&#34;&gt;#refresh()&lt;/a&gt; -
&lt;a href=&#34;#resource-name&#34;&gt;#resourceName&lt;/a&gt; -
&lt;a href=&#34;#shallow&#34;&gt;#shallow&lt;/a&gt; -
&lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; -
&lt;a href=&#34;#singular&#34;&gt;#singular&lt;/a&gt; -
&lt;a href=&#34;#singular-path&#34;&gt;#singularPath()&lt;/a&gt; -
&lt;a href=&#34;#update&#34;&gt;#update()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;constructor&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;constructor&#34;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cape.ResourceAgent&lt;/code&gt; constructor takes
a &lt;code&gt;Cape.Component&lt;/code&gt; object and an optional object (options) as arguments.&lt;/p&gt;

&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resourceName:&lt;/strong&gt; the name of resource.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;basePath:&lt;/strong&gt; the string that is added to the request path. Default value is &amp;lsquo;/&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nestedIn:&lt;/strong&gt; the string that is inserted between path prefix and the resource
name. Default value is &amp;ldquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;adapter:&lt;/strong&gt; the name of adapter (e.g., &lt;code&gt;&#39;rails&#39;&lt;/code&gt;). Default is &lt;code&gt;undefined&lt;/code&gt;.
Default value can be changed by setting &lt;code&gt;Cape.defaultAgentAdapter&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autoRefresh:&lt;/strong&gt; a boolean value that controls if a &lt;code&gt;POST/PATCH/PUT/DELETE&lt;/code&gt; request
triggers &lt;code&gt;this.refresh()&lt;/code&gt; after its completion. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dataType:&lt;/strong&gt; the type of data that you&amp;rsquo;re expecting from the server.
The value must be &lt;code&gt;&#39;json&#39;&lt;/code&gt; (default) or &lt;code&gt;&#39;text&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pathPrefix:&lt;/strong&gt; the string that is added to the request path.
Default value is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;singular:&lt;/strong&gt; a boolean value that specifies if the resource is singular or not.
Resources are called &lt;em&gt;singular&lt;/em&gt; when they have a URL without ID. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;formName:&lt;/strong&gt; the name of form with which the users edit the properties
of the resource. Default is &lt;code&gt;undefiend&lt;/code&gt;.
When the &lt;code&gt;formName&lt;/code&gt; option is not defined, the name is derived from the
&lt;code&gt;resourceName&lt;/code&gt; property, e.g. &lt;code&gt;user&lt;/code&gt; if the resource name is &lt;code&gt;user&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paramName:&lt;/strong&gt; the name of parameter to be used when the &lt;code&gt;object&lt;/code&gt;
property is initialized and the request parameter is constructed.
Default is &lt;code&gt;undefiend&lt;/code&gt;.
When the &lt;code&gt;paramName&lt;/code&gt; option is not defined, the name is derived from the
&lt;code&gt;resourceName&lt;/code&gt; property, e.g. &lt;code&gt;user&lt;/code&gt; if the resource name is &lt;code&gt;user&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shallow:&lt;/strong&gt; a boolean value that controls whether the agent should omit
the &lt;code&gt;nestedIn&lt;/code&gt; string from the member path. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;adapters&#34;&gt;Adapters&lt;/h4&gt;

&lt;p&gt;Currently, Cape.JS provides only &lt;code&gt;RailsAdapter&lt;/code&gt;, which sets the &lt;code&gt;X-CSRF-Token&lt;/code&gt; header
for Ajax requests.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;

var Form = Cape.createComponentClass({
  init: function() {
    this.agent = new Cape.ResourceAgent(this, { resourceName: &#39;user&#39; });
    this.agent.id = 123;
    this.agent.init();
  },

  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.onclick(e =&amp;gt; this.agent.update()).btn(&#39;Update&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually, You will want to define a class inheriting &lt;code&gt;Cape.ResourceAgent&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;

var UserAgent = Cape.createResourceAgentClass({
  constructor: function(client, options) {
    super(client, options);
    this.resourceName = &#39;user&#39;;
  }
})

var Form = Cape.createComponentClass({
  init: function() {
    this.agent = new UserAgent(this);
    this.agent.id = 123;
    this.agent.init();
  },

  render: function(m) {
    m.formFor(&#39;user&#39;, function(m) {
      m.textField(&#39;login_name&#39;);
      m.onclick(e =&amp;gt; this.agent.update()).btn(&#39;Update&#39;);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;_&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;#_&lt;/h3&gt;

&lt;p&gt;This property holds the agent&amp;rsquo;s &lt;em&gt;inner object,&lt;/em&gt; which keeps &lt;em&gt;private&lt;/em&gt; properties
and methods. Developers should not tamper with it.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;adapter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;adapter&#34;&gt;#adapter&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;after-refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;afterrefresh-span-class-badge-alert-info-1-5-span&#34;&gt;#afterRefresh &lt;span class=&#34;badge alert-info&#34;&gt;1.5&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This method gets called by the &lt;code&gt;refresh()&lt;/code&gt; method after it updates the &lt;code&gt;data&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;afterRefresh()&lt;/code&gt; does &lt;code&gt;this.client.refresh()&lt;/code&gt; by default.
Developers may override this method to let the agent do some
post-processing jobs.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;ajax&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ajax&#34;&gt;#ajax()&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ajax(httpMethod, path, params, callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request to the server.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Cape.defaultAgentAdapter = &#39;rails&#39;;

var Page = Cape.createComponentClass({
  init: function() {
    this.agent = new Cape.ResourceAgent(this);
    this.refresh();
  },

  render: function(m) {
    m.onclick(e =&amp;gt; {
      this.agent.ajax(&#39;POST&#39;, &#39;/counter&#39;, {}, function(data) {
        alert(data);
      })
    });
    m.btn(&#39;Click&#39;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;base-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;basepath&#34;&gt;#basePath&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;client&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;client&#34;&gt;#client&lt;/h3&gt;

&lt;p&gt;This property holds an instance of &lt;code&gt;Cape.Component&lt;/code&gt; class, which has been
passed as the first argument of constructor.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;collection-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;collectionpath&#34;&gt;#collectionPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a collection of resources in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#collectionPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;create&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;create&#34;&gt;#create()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;create()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send an Ajax request with POST method to the URL that is constructed
by the &lt;code&gt;collectionPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;data&#34;&gt;#data&lt;/h3&gt;

&lt;p&gt;This property holds the object that is build from the JSON string returned
from the server during &lt;code&gt;refresh()&lt;/code&gt; process if the response data from the server
is a valid JSON string.&lt;/p&gt;

&lt;p&gt;Otherwise, it holds the response data from the server as is.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;data-type&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;datatype&#34;&gt;#dataType&lt;/h3&gt;

&lt;p&gt;This property holds the type of data that you&amp;rsquo;re expecting from the server.
The value must be &lt;code&gt;&#39;json&#39;&lt;/code&gt;, &lt;code&gt;&#39;text&#39;&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.
When the &lt;code&gt;dataType&lt;/code&gt; option is not defined, the type is detected automatically.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;default-error-hander&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;defaulterrorhandler&#34;&gt;#defaultErrorHandler()&lt;/h3&gt;

&lt;p&gt;This method handles the exception thrown during the Fetch API.&lt;/p&gt;

&lt;p&gt;The default implementation is just &lt;code&gt;console.log(ex)&lt;/code&gt;.
Developers may override this for a better exception handling.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;destroy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;destroy&#34;&gt;#destroy()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;destroy()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send an Ajax request with DELETE method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;errors&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;errors&#34;&gt;#errors&lt;/h3&gt;

&lt;p&gt;This property holds an object (key-value pairs) whose keys are the
attribute names of the resource and whose values are the validation
error messages.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;form-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;formname&#34;&gt;#formName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;headers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;headers&#34;&gt;#headers&lt;/h3&gt;

&lt;p&gt;This property holds the HTTP headers for Ajax requests.
The default valued is &lt;code&gt;{ &#39;Content-Type&#39;: &#39;application/json&#39; }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;id&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;id&#34;&gt;#id&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;id&lt;/em&gt; of resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;init&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;init&#34;&gt;#init()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;init()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method initializes the &lt;a href=&#34;#object&#34;&gt;object&lt;/a&gt; property by sending an Ajax
request to the server.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;member-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;memberpath&#34;&gt;#memberPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#memberPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users/9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; part of the URL path (&lt;code&gt;9&lt;/code&gt;) derives from the &lt;code&gt;id&lt;/code&gt; property of the agent.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;object&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;object&#34;&gt;#object&lt;/h3&gt;

&lt;p&gt;This property holds an object (hash) that represents the resource which
the agent is associated to.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;new-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;newpath&#34;&gt;#newPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a &lt;em&gt;new&lt;/em&gt; resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#newPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/users/new&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/users/new&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/users/new&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/users/new&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A &lt;em&gt;new&lt;/em&gt; resource is a resource for a form for creating an resource.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;nested-in&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;nestedin&#34;&gt;#nestedIn&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;param-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;paramname&#34;&gt;#paramName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;refresh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;refresh-span-class-badge-alert-info-1-5-span&#34;&gt;#refresh() &lt;span class=&#34;badge alert-info&#34;&gt;1.5&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;This method sends an Ajax request with GET method to the URL that is constructed
by the &lt;a href=&#34;#request-path&#34;&gt;#requestPath()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;request-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;requestpath&#34;&gt;#requestPath()&lt;/h3&gt;

&lt;p&gt;This method returns the return value of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#singular-path&#34;&gt;#singularPath()&lt;/a&gt; if the attribute &lt;code&gt;singular&lt;/code&gt; is set true&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collection-path&#34;&gt;#collectionPath()&lt;/a&gt; if the attribute &lt;code&gt;singular&lt;/code&gt; is set false and the attribute &lt;code&gt;id&lt;/code&gt; is undefined&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#member-path&#34;&gt;#memberPath()&lt;/a&gt; if the attribute &lt;code&gt;singular&lt;/code&gt; is set false and the attribute &lt;code&gt;id&lt;/code&gt; is defined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource-name&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resourcename&#34;&gt;#resourceName&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;shallow&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shallow&#34;&gt;#shallow&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;show&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;show-span-class-badge-alert-info-1-5-span&#34;&gt;#show() &lt;span class=&#34;badge alert-info&#34;&gt;1.5&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;usage-4&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;show()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;show(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;show(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send an Ajax request with POST method to the URL that is constructed
by the &lt;a href=&#34;#request-path&#34;&gt;#requestPath()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;singular&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;singular&#34;&gt;#singular&lt;/h3&gt;

&lt;p&gt;See &amp;ldquo;Options&amp;rdquo; section of the &lt;a href=&#34;#constructor&#34;&gt;Constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;singular-path&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;singularpath&#34;&gt;#singularPath()&lt;/h3&gt;

&lt;p&gt;Returns the URL path to a &lt;em&gt;singular&lt;/em&gt; resource in accordance with the
values of &lt;code&gt;resourceName&lt;/code&gt;, &lt;code&gt;basePath&lt;/code&gt; and &lt;code&gt;nestedIn&lt;/code&gt; properties:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#resourceName&lt;/th&gt;
&lt;th&gt;#basePath&lt;/th&gt;
&lt;th&gt;#nestedIn&lt;/th&gt;
&lt;th&gt;#singularPath()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/account&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;/api/account&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/teams/123/account&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;/api/&lt;/td&gt;
&lt;td&gt;teams/123/&lt;/td&gt;
&lt;td&gt;/api/teams/123/account&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A singular resource is a resource that clients always look up without
referencing an ID.&lt;/p&gt;

&lt;p&gt;Note that the default value of &lt;code&gt;basePath&lt;/code&gt; property is &lt;code&gt;&#39;/&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;update&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;#update()&lt;/h3&gt;

&lt;h4 id=&#34;usage-5&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;update()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(callback)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(callback, errorHandler)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sends an Ajax request with PATCH method to the URL that is constructed
by the &lt;code&gt;memberPath()&lt;/code&gt; method.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cape.Router - API Reference</title>
      <link>http://capejs.github.io/capejs/api/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/router/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#action&#34;&gt;#action&lt;/a&gt; -
&lt;a href=&#34;#attach&#34;&gt;#attach()&lt;/a&gt; -
&lt;a href=&#34;#before-navigation&#34;&gt;#beforeNavigation()&lt;/a&gt; -
&lt;a href=&#34;#component&#34;&gt;#component&lt;/a&gt; -
&lt;a href=&#34;#container&#34;&gt;#container&lt;/a&gt; -
&lt;a href=&#34;#detach&#34;&gt;#detach()&lt;/a&gt; -
&lt;a href=&#34;#draw&#34;&gt;#draw()&lt;/a&gt; -
&lt;a href=&#34;#error-handler&#34;&gt;#errorHandler()&lt;/a&gt; -
&lt;a href=&#34;#flash&#34;&gt;#flash&lt;/a&gt; -
&lt;a href=&#34;#namespace&#34;&gt;#namespace&lt;/a&gt; -
&lt;a href=&#34;#navigate&#34;&gt;#navigate()&lt;/a&gt; -
&lt;a href=&#34;#navigate-to&#34;&gt;#navigateTo()&lt;/a&gt; -
&lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; -
&lt;a href=&#34;#mount&#34;&gt;#mount()&lt;/a&gt; -
&lt;a href=&#34;#params&#34;&gt;#params&lt;/a&gt; -
&lt;a href=&#34;#query&#34;&gt;#query&lt;/a&gt; -
&lt;a href=&#34;#redirect-to&#34;&gt;#redirectTo&lt;/a&gt; -
&lt;a href=&#34;#resource&#34;&gt;#resource&lt;/a&gt; -
&lt;a href=&#34;#route-for&#34;&gt;#routeFor()&lt;/a&gt; -
&lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; -
&lt;a href=&#34;#start&#34;&gt;#start()&lt;/a&gt; -
&lt;a href=&#34;#stop&#34;&gt;#stop()&lt;/a&gt; -
&lt;a href=&#34;#vars&#34;&gt;#vars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;action&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;action&#34;&gt;#action&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;action name&lt;/em&gt; of the current route.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
});
router.navigateTo(&#39;articles/123/edit&#39;);
console.log(router.action); // =&amp;gt; &amp;quot;edit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;attach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attach&#34;&gt;#attach()&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method register the &lt;em&gt;component&lt;/em&gt; as the target of &lt;em&gt;notification&lt;/em&gt; from this router.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;before-navigation&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;beforenavigation&#34;&gt;#beforeNavigation()&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;../../router/#before-navigation-callbacks&#34;&gt;Before-Navigation Callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;component&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;component&#34;&gt;#component&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;component name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigateTo(&#39;articles/123/edit&#39;);
console.log(router.component); // =&amp;gt; &amp;quot;edit&amp;quot;
router.navigateTo(&#39;admin/articles/123/edit&#39;);
console.log(router.component); // =&amp;gt; &amp;quot;edit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;container&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;container&#34;&gt;#container&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;container name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigateTo(&#39;articles/123/edit&#39;);
console.log(router.container); // =&amp;gt; &amp;quot;articles&amp;quot;
router.navigateTo(&#39;admin/articles/123/edit&#39;);
console.log(router.container); // =&amp;gt; &amp;quot;admin.articles&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;detach&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;detach&#34;&gt;#detach()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;detach(component)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method removes the &lt;em&gt;component&lt;/em&gt; from the list of targets of &lt;em&gt;notification&lt;/em&gt; from this router.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;draw&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;draw&#34;&gt;#draw()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;draw(function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method specify a function that takes a &lt;code&gt;RoutingMapper&lt;/code&gt; object and defines routes.&lt;/p&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;dashboard&#39;);
  m.page(&#39;about&#39;, &#39;docs.about&#39;);
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the argument &lt;code&gt;m&lt;/code&gt; is a &lt;code&gt;RoutingMapper&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;error-handler&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;errorhandler&#34;&gt;#errorHandler()&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;../../router/#before-navigation-callbacks&#34;&gt;Before-Navigation Callbacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;flash&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;flash&#34;&gt;#flash&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flash[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flash.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;flash&lt;/em&gt; object,
which is emptied after each navigation.&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.flash.alert = &#39;The specified article has been deleted.&#39;;
router.navigateTo(&#39;articles&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;namespace&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;container-1&#34;&gt;#container&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;namespace&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-5&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigateTo(&#39;articles/123/edit&#39;);
console.log(router.namespace); // =&amp;gt; null
router.navigateTo(&#39;admin/articles/123/edit&#39;);
console.log(router.namespace); // =&amp;gt; &amp;quot;admin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;navigate&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;navigate&#34;&gt;#navigate()&lt;/h3&gt;

&lt;p&gt;This method is &lt;em&gt;deprecated&lt;/em&gt; as of v1.4.&lt;/p&gt;

&lt;h4 id=&#34;usage-4&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;navigate(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;
See &lt;a href=&#34;#navigateTo&#34;&gt;#navigateTo()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;navigate-to&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;navigateto-span-class-badge-alert-info-1-4-span&#34;&gt;#navigateTo() &lt;span class=&#34;badge alert-info&#34;&gt;1.4&lt;/span&gt;&lt;/h3&gt;

&lt;h4 id=&#34;usage-5&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;navigateTo(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When before-navigation callbacks are registered, they are executed
before changing the anchor part of URL.
If the before-navigation callbacks select other string for &lt;em&gt;hash&lt;/em&gt;,
it will be set to the anchor part of the browser&amp;rsquo;s current URL.&lt;/p&gt;

&lt;p&gt;After setting the anchor part of URL, this method choose a component
according to the routing table.&lt;/p&gt;

&lt;p&gt;When this component is different from the component which is mounted currently,
it unmounts the latter and mounts the former.
When this component is same with the component mounted currently
it calls the &lt;code&gt;#refresh&lt;/code&gt; method of mounted component.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code&gt;#notify()&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want the &lt;code&gt;#notify()&lt;/code&gt; method to be executed, use &lt;a href=&#34;#show&#34;&gt;#show()&lt;/a&gt; instead.&lt;/p&gt;

&lt;h4 id=&#34;usage-6&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;navigateTo(hash, params)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash&lt;/em&gt;
adding query string which is constructed from &lt;em&gt;params.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-6&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.navigateTo(&#39;articles&#39;, { page: &#39;2&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-7&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;navigateTo(hash, params, options)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Same as the previous usage, except that the flash messages are set using &lt;em&gt;options.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-7&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.navigateTo(&#39;articles&#39;, {}, { notice: &#39;A new article has been uploaded.&#39; });
router.navigateTo(&#39;articles/new&#39;, {}, { alert: &#39;Failed to upload a new article.&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;notify&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;notify&#34;&gt;#notify()&lt;/h3&gt;

&lt;h4 id=&#34;usage-8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;notify()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method triggars the &lt;em&gt;notification&lt;/em&gt; process, which calls the &lt;code&gt;#refresh()&lt;/code&gt; method
of all components registerd as targets of &lt;em&gt;notification&lt;/em&gt; of this data store.&lt;/p&gt;

&lt;p&gt;Eventually, each target component executes its &lt;code&gt;#render()&lt;/code&gt; method,
which has to be defined by developers.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#notify()&lt;/code&gt; method is executed after each time the &lt;a href=&#34;#navigateTo&#34;&gt;#navigateTo()&lt;/a&gt; method is called.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;mount&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mount&#34;&gt;#mount()&lt;/h3&gt;

&lt;h4 id=&#34;usage-9&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mount(id)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method specifies the &lt;code&gt;id&lt;/code&gt; of the HTML element which this router
inserts the components into.&lt;/p&gt;

&lt;h4 id=&#34;example-8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Top&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#about&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#help&amp;quot;&amp;gt;Help&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
var router = new Cape.Router();
router.draw(function(m) {
  m.root(&#39;top_page&#39;);
  m.page(&#39;about&#39;, &#39;about_page&#39;);
  m.page(&#39;help&#39;, &#39;help_page&#39;);
})
router.mount(&#39;main&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, components are mounted into the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;&#39;main&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;params&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;params&#34;&gt;#params&lt;/h3&gt;

&lt;p&gt;This property holds a set of key-value pairs, which represents the parameters
embedded in the main part (before the first &amp;lsquo;?&amp;rsquo; symbol) of hash.&lt;/p&gt;

&lt;h4 id=&#34;example-9&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;help/:name&#39;, &#39;help.item&#39;);
  m.many(&#39;articles&#39;, function(m) {
    m.many(&#39;comments&#39;);
  });
})
router.navigateTo(&#39;help/password&#39;);
// router.params.name === &#39;password&#39;
router.navigateTo(&#39;articles/123&#39;)
// router.params.id === &#39;123&#39;
router.navigateTo(&#39;articles/123/comments/7&#39;)
// router.params.article_id === &#39;123&#39;
// router.params.id === &#39;7&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;query&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;query&#34;&gt;#query&lt;/h3&gt;

&lt;p&gt;This property holds a set of key-value pairs, which represents the parameters
embedded in the query part (after the first &amp;lsquo;?&amp;rsquo; symbol) of hash .&lt;/p&gt;

&lt;h4 id=&#34;example-10&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;)
})
router.navigateTo(&#39;articles&#39;)
// router.query === {}
router.navigateTo(&#39;articles?page=2&#39;)
// router.query.page === &#39;2&#39;
router.navigateTo(&#39;articles?page=2&amp;amp;deleted&#39;)
// router.query.page === &#39;2&#39;
// router.query.deleted === &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;redirect-to&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;redirectto&#34;&gt;#redirectTo()&lt;/h3&gt;

&lt;p&gt;This method sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&#34;#navigate-to&#34;&gt;#navigateTo()&lt;/a&gt; method, before-navigation callbacks are &lt;em&gt;not&lt;/em&gt; executed
before changing the anchor part of URL.&lt;/p&gt;

&lt;p&gt;After setting the anchor part of URL, this method choose a component
according to the routing table.&lt;/p&gt;

&lt;p&gt;When this component is different from the component mounted currently,
it unmounts the latter and mounts the former.
When this component is same with the component which is mounted currently
it calls the &lt;code&gt;#refresh&lt;/code&gt; method of the mounted component.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code&gt;#notify()&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;h4 id=&#34;usage-10&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;redirectTo(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-11&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.redirectTo(&#39;docs/help&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-span-class-badge-alert-info-1-5-span&#34;&gt;Usage &lt;span class=&#34;badge alert-info&#34;&gt;1.5&lt;/span&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;redirectTo(hash, params)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sets the anchor part (begins with a &lt;code&gt;#&lt;/code&gt; symbol) of the browser&amp;rsquo;s current URL to &lt;em&gt;hash&lt;/em&gt;
adding query string which is constructed from &lt;em&gt;params.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-12&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.redirectTo(&#39;articles&#39;, { page: &#39;2&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-span-class-badge-alert-info-1-5-span-1&#34;&gt;Usage &lt;span class=&#34;badge alert-info&#34;&gt;1.5&lt;/span&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;redirectTo(hash, params, options)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Same as the previous usage, except that the flash messages are set using &lt;em&gt;options.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-13&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.redirectTo(&#39;articles&#39;, {}, { notice: &#39;A new article has been uploaded.&#39; });
router.redirectTo(&#39;articles/new&#39;, {}, { alert: &#39;Failed to upload a new article.&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-span-class-badge-alert-warning-deprecated-span&#34;&gt;Usage &lt;span class=&#34;badge alert-warning&#34;&gt;Deprecated&lt;/span&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;redirectTo(hash, options)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This usage is deprecated as of version 1.5.&lt;/p&gt;

&lt;p&gt;For backward compatibility, if the second argument has &amp;lsquo;notice&amp;rsquo; or &amp;lsquo;alert&amp;rsquo; as a key
and the third argument is not given, the second argument should be treated as &lt;em&gt;options.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-14&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.redirectTo(&#39;articles&#39;, { notice: &#39;A new article has been uploaded.&#39; });
router.redirectTo(&#39;articles/new&#39;, { alert: &#39;Failed to upload a new article.&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;resource&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;resource&#34;&gt;#resource&lt;/h3&gt;

&lt;p&gt;This property holds the &lt;em&gt;resource name&lt;/em&gt; of the current route in lower case.&lt;/p&gt;

&lt;h4 id=&#34;example-15&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;);
  m.many(&#39;articles&#39;, function(m) {
    m.many(&#39;comments&#39;);
  });
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
router.navigateTo(&#39;account/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;account&amp;quot;
router.navigateTo(&#39;articles/123/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles&amp;quot;
router.navigateTo(&#39;articles/123/comments&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles/comments&amp;quot;
router.navigateTo(&#39;admin/articles/123/edit&#39;);
console.log(router.resource); // =&amp;gt; &amp;quot;articles&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;route-for&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;routefor&#34;&gt;#routeFor()&lt;/h3&gt;

&lt;h4 id=&#34;usage-11&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;routeFor(hash)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method returns the first route matching to the &lt;em&gt;hash,&lt;/em&gt; if any.&lt;/p&gt;

&lt;h4 id=&#34;example-16&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  });
});
var route = router.routeFor(&#39;admin/articles/123/edit&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;show&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;show&#34;&gt;#show()&lt;/h3&gt;

&lt;h4 id=&#34;usage-12&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;show(componentClass)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method mounts an instance of &lt;em&gt;componentClass&lt;/em&gt; class.&lt;/p&gt;

&lt;p&gt;Unlike &lt;a href=&#34;#navigateTo&#34;&gt;#navigateTo()&lt;/a&gt;, it does neither change the anchor part of
current URL, nor call the &lt;a href=&#34;#notify&#34;&gt;#notify()&lt;/a&gt; method.&lt;/p&gt;

&lt;h4 id=&#34;example-17&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.show(LoginForm);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-span-class-badge-alert-info-1-5-span-2&#34;&gt;Usage &lt;span class=&#34;badge alert-info&#34;&gt;1.5&lt;/span&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;show(componentClass, params)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mounts an instance of &lt;em&gt;componentClass&lt;/em&gt; class passing values to the &lt;em&gt;query&lt;/em&gt; attribute
of the router.&lt;/p&gt;

&lt;h4 id=&#34;example-18&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.show(LoginForm, { email: &#39;alice@example.com&#39;, checked: &#39;1&#39; });
console.log(router.query.email); // =&amp;gt; &#39;alice@example.com&#39;
console.log(router.query.checked); // =&amp;gt; &#39;1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;start&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;start&#34;&gt;#start()&lt;/h3&gt;

&lt;p&gt;With this method call, routers begin to listen to &lt;code&gt;hashchange&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;stop&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;stop&#34;&gt;#stop()&lt;/h3&gt;

&lt;p&gt;With this method call, routers stop to listen to &lt;code&gt;hashchange&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;vars&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;vars&#34;&gt;#vars&lt;/h3&gt;

&lt;h4 id=&#34;usage-13&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vars[key] = value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vars.key = value&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an arbitrary value (object, string, integer, etc.) to the &lt;em&gt;vars&lt;/em&gt; object.&lt;/p&gt;

&lt;h4 id=&#34;example-19&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;router.vars.signedIn = Date.now();
router.vars.currentUser = { id: 99, name: &#39;john&#39;, privileged: true };
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cape.RoutingMapper - API Reference</title>
      <link>http://capejs.github.io/capejs/api/routing_mapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/api/routing_mapper/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;#collection&#34;&gt;collection()&lt;/a&gt; -
&lt;a href=&#34;#namespace&#34;&gt;namespace()&lt;/a&gt; -
&lt;a href=&#34;#new&#34;&gt;new()&lt;/a&gt; -
&lt;a href=&#34;#many&#34;&gt;many()&lt;/a&gt; -
&lt;a href=&#34;#member&#34;&gt;member()&lt;/a&gt; -
&lt;a href=&#34;#one&#34;&gt;one()&lt;/a&gt; -
&lt;a href=&#34;#page&#34;&gt;page()&lt;/a&gt; -
&lt;a href=&#34;#root&#34;&gt;root()&lt;/a&gt; -
&lt;a href=&#34;#view&#34;&gt;view()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;collection&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;collection&#34;&gt;#collection()&lt;/h3&gt;

&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;collection(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a &lt;em&gt;collection&lt;/em&gt; route (a route which deals with multiple items).&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.collection &#39;draft&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/draft&lt;/code&gt; to &lt;code&gt;Articles.Draft&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#collection()&lt;/code&gt; method must be called within a block that defines a plural resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;namespace&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;namespace&#34;&gt;#namespace()&lt;/h3&gt;

&lt;h4 id=&#34;usage-1&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;namespace(name, function)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Introduces a &lt;em&gt;function&lt;/em&gt; tha defines resources under the specified &lt;em&gt;namespace&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.namespace(&#39;admin&#39;, function(m) {
    m.many(&#39;articles&#39;);
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Namespace&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/new&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;admin/articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Admin.Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;admin&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;new&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;new&#34;&gt;#new()&lt;/h3&gt;

&lt;h4 id=&#34;usage-2&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;new(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds an alternate &lt;em&gt;new&lt;/em&gt; action to a resource, which can be plural or singular.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.new &#39;preview&#39;
  });
  m.many(&#39;articles&#39;, function(m) {
    m.new &#39;preview&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account/new/preview&lt;/code&gt; to &lt;code&gt;Account.Preview&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/new/preview&lt;/code&gt; to &lt;code&gt;Articles.Preview&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;many&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;many&#34;&gt;#many()&lt;/h3&gt;

&lt;h4 id=&#34;usage-3&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines four routes for a plural resource.&lt;/p&gt;

&lt;h4 id=&#34;example-1&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;List&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Item&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/new&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;articles/:id/edit&lt;/td&gt;
  &lt;td&gt;Articles&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;articles&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4 id=&#34;usage-4&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name, { only: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds routes for &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a plural resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;index&amp;rdquo;, &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-2&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, { only: [ &#39;index&#39;, &#39;show&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;articles/&lt;/code&gt; to &lt;code&gt;Articles.List&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/:id&lt;/code&gt; to &lt;code&gt;Articles.Item&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;usage-5&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;many(name, { except: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds basic routes excepting &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a plural resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;index&amp;rdquo;, &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-3&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, { except: [ &#39;new&#39;, &#39;edit&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;articles/&lt;/code&gt; to &lt;code&gt;Articles.List&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;articles/:id&lt;/code&gt; to &lt;code&gt;Articles.Item&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;member&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;member&#34;&gt;#member()&lt;/h3&gt;

&lt;h4 id=&#34;usage-6&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;member(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a &lt;em&gt;member&lt;/em&gt; route (a route which deals with a specific item).&lt;/p&gt;

&lt;h4 id=&#34;example-4&#34;&gt;Example.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.many(&#39;articles&#39;, function(m) {
    m.member &#39;info&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;articles/:id/info&lt;/code&gt; to &lt;code&gt;Articles.Info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#member()&lt;/code&gt; method must be called within a block that defines a plural resource.&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;one&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;one&#34;&gt;#one()&lt;/h3&gt;

&lt;h4 id=&#34;usage-7&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines four routes for a singular resource.&lt;/p&gt;

&lt;h4 id=&#34;example-5&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines four routes. See the table below:&lt;/p&gt;

&lt;table class=&#34;table&#34;&gt;
&lt;tr&gt;
  &lt;th&gt;Hash pattern&lt;/th&gt;
  &lt;th&gt;Container&lt;/th&gt;
  &lt;th&gt;Component&lt;/th&gt;
  &lt;th&gt;Resource&lt;/th&gt;
  &lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Content&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;show&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/new&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;account/edit&lt;/td&gt;
  &lt;td&gt;Account&lt;/td&gt;
  &lt;td&gt;Form&lt;/td&gt;
  &lt;td&gt;account&lt;/td&gt;
  &lt;td&gt;edit&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4 id=&#34;usage-8&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name, { only: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds routes for &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a singular resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-6&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.new(&#39;account&#39;, { only: [ &#39;show&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account/&lt;/code&gt; to &lt;code&gt;Account.Content&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;usage-9&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one(name, { except: [ action1, action2, &amp;hellip; ] })&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds basic routes excepting &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; to a singular resource.
The value of &lt;em&gt;action1, action2, &amp;hellip;&lt;/em&gt; must be &amp;ldquo;show&amp;rdquo;, &amp;ldquo;new&amp;rdquo; or &amp;ldquo;edit&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;example-7&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, { except: [ &#39;new&#39; ] });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines two routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;account&lt;/code&gt; to &lt;code&gt;Account.Content&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;account/edit&lt;/code&gt; to &lt;code&gt;Account.Form&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;page&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;page&#34;&gt;#page()&lt;/h3&gt;

&lt;h4 id=&#34;usage-10&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page(hashPattern, componentClassPath)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &lt;em&gt;hashPattern&lt;/em&gt; to &lt;em&gt;componentClassPath.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-8&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;dashboard&#39;, &#39;dashboard&#39;);
  m.page(&#39;about&#39;, &#39;docs.about&#39;);
  m.page(&#39;help/:name&#39;, &#39;docs.help&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;usage-11&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page(hashPattern, componentClassPath, constraints)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &lt;em&gt;hashPattern&lt;/em&gt; to &lt;em&gt;componentClassPath&lt;/em&gt; with constraints
on the parameters, which are specified by regular expression string.&lt;/p&gt;

&lt;h4 id=&#34;example-9&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;blog/:year/:month&#39;, &#39;blog.articles&#39;,
    { year: &#39;201\\d&#39;, month: &#39;(:?0[1-9]|1[012])&#39; });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should put &lt;code&gt;:?&lt;/code&gt; to make parentheses
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses&#34;&gt;non-capturing parentheses&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;h4 id=&#34;usage-12&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;page(hashPattern)&lt;/strong&gt; &lt;span class=&#34;badge alert-info&#34;&gt;1.4&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &lt;em&gt;hashPattern&lt;/em&gt; to the component class path which is consturcted
from &lt;em&gt;hashPattern&lt;/em&gt; by replacing all slashes with dots.&lt;/p&gt;

&lt;h4 id=&#34;example-10&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.page(&#39;dashboard&#39;);
  m.page(&#39;docs/about&#39;);
  // The above codes have same meanings as the following alternatives:
  //   m.page(&#39;dashboard&#39;, &#39;dashboard&#39;);
  //   m.page(&#39;docs/about&#39;, &#39;docs.about&#39;);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;root&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;root&#34;&gt;#root()&lt;/h3&gt;

&lt;h4 id=&#34;usage-13&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;root(componentClassPath)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defines a route from &amp;ldquo;&amp;rdquo; to &lt;em&gt;componentClassPath.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-11&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  root(&#39;Dashboard&#39;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a class=&#34;anchor&#34; id=&#34;view&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;view&#34;&gt;#view()&lt;/h3&gt;

&lt;h4 id=&#34;usage-14&#34;&gt;Usage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;view(name)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adds a custom route to a singular resource.&lt;/p&gt;

&lt;h4 id=&#34;example-12&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var router = new Cape.Router();
router.draw(function(m) {
  m.one(&#39;account&#39;, function(m) {
    m.view &#39;image&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines a route from &lt;code&gt;account/image&lt;/code&gt; to &lt;code&gt;Account.Image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#view()&lt;/code&gt; method must be called within a block that defines a singular resource.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change displaying order (1) - Cape.JS Primer</title>
      <link>http://capejs.github.io/capejs/tutorials/capejs_primer/20_reordering1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/tutorials/capejs_primer/20_reordering1/</guid>
      <description>&lt;p&gt;On the three lectures from this one, I&amp;rsquo;ll add the function to change the displaying order of the tasks to our &amp;ldquo;Todo list&amp;rdquo; application.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For preparation, organize the source code a little. Look at the code of the method &lt;code&gt;renderTask()&lt;/code&gt; of the class &lt;code&gt;TodoList&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  renderTask(m, task) {
    m.class({ completed: task.done });
    m.label(m =&amp;gt; {
      m.onclick(e =&amp;gt; this.agent.toggleTask(task));
      m.input({ type: &#39;checkbox&#39;, checked: task.done }).sp();
      m.class({ modifying: task.modifying });
      m.span(task.title);
    });
    m.onclick(e =&amp;gt; this.editTask(task));
    m.span(&#39;Edit&#39;, { class: &#39;button&#39; });
    m.onclick(e =&amp;gt; {
      if (confirm(&#39;Are you sure you want to delete this task?&#39;))
        this.agent.destroyTask(task);
    });
    m.span(&#39;Delete&#39;, { class: &#39;button&#39; });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s separate it because it&amp;rsquo;s too long.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  renderTask(m, task) {
    m.class({ completed: task.done });
    m.label(m =&amp;gt; {
      m.onclick(e =&amp;gt; this.agent.toggleTask(task));
      m.input({ type: &#39;checkbox&#39;, checked: task.done }).sp();
      m.class({ modifying: task.modifying });
      m.span(task.title);
    });
  }

  renderButtons(m, task) {
    m.onclick(e =&amp;gt; this.editTask(task));
    m.span(&#39;Edit&#39;, { class: &#39;button&#39; });
    m.onclick(e =&amp;gt; {
      if (confirm(&#39;Are you sure you want to delete this task?&#39;))
        this.agent.destroyTask(task);
    });
    m.span(&#39;Delete&#39;, { class: &#39;button&#39; });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rewrite the code of the method &lt;code&gt;render()&lt;/code&gt;. This is the one before rewriting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  render(m) {
    m.ul(m =&amp;gt; {
      this.agent.objects.forEach(task =&amp;gt; {
        m.li(m =&amp;gt; this.renderTask(m, task));
      });
    });
    if (this.editingTask) this.renderUpdateForm(m);
    else this.renderCreateForm(m);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rewrite the fourth line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  render(m) {
    m.ul(m =&amp;gt; {
      this.agent.objects.forEach(task =&amp;gt; {
        m.li(m =&amp;gt; {
          this.renderTask(m, task);
          this.renderButtons(m, task);
        });
      });
    });
    if (this.editingTask) this.renderUpdateForm(m);
    else this.renderCreateForm(m);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;note&#34;&gt;
When the content of arrow function of ECMAScript6 includes many statements, it needs to be surrounded by brace (&lt;code&gt;{}&lt;/code&gt;).
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Let&amp;rsquo;s get the implementation. First, set the button to move up and down.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  renderButtons(m, task) {
    m.onclick(e =&amp;gt; this.editTask(task));
    m.span(&#39;Edit&#39;, { class: &#39;button&#39; });
    m.onclick(e =&amp;gt; {
      if (confirm(&#39;Are you sure you want to delete this task?&#39;))
        this.agent.destroyTask(task);
    });
    m.span(&#39;Delete&#39;, { class: &#39;button&#39; });
    m.span({ class: &#39;button&#39; }, m =&amp;gt; m.fa(&#39;arrow-circle-up&#39;));
    m.span({ class: &#39;button&#39; }, m =&amp;gt; m.fa(&#39;arrow-circle-down&#39;));
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added the third and second lines.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;fa()&lt;/code&gt; of markup builder creates the tag to show the icon &lt;a href=&#34;https://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The screen will be like following when the top page displays on the browser. There are up-way and down-way arrows on the button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://capejs.github.io/capejs/capejs/images/capejs_primer/todo_list21.png&#34; alt=&#34;Screen capture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try some more. It should better to make the up button on the first line and down button on the last line have no effect.&lt;/p&gt;

&lt;p&gt;First, change the method &lt;code&gt;render()&lt;/code&gt; like following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  render(m) {
    m.ul(m =&amp;gt; {
      this.agent.objects.forEach((task, index) =&amp;gt; {
        m.li(m =&amp;gt; {
          this.renderTask(m, task);
          this.renderButtons(m, task, index);
        });
      });
    });
    if (this.editingTask) this.renderUpdateForm(m);
    else this.renderCreateForm(m);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I rewrote 2 points. I rewrote &lt;code&gt;forEach(task =&amp;gt;&lt;/code&gt; to &lt;code&gt;forEach((task, index) =&amp;gt;&lt;/code&gt; on the third line, and &lt;code&gt;this.renderButtons(m, task);&lt;/code&gt; to &lt;code&gt;this.renderButtons(m, task, index);&lt;/code&gt; on the sixth line.&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
When the arrow function of ECMAScript6 takes only one argument, we can omit the parentheses (&lt;code&gt;()&lt;/code&gt;) around the argument but if it takes zero, two or more arguments, we must surround them with parentheses.
&lt;/div&gt;

&lt;p&gt;Then, rewrite the method &lt;code&gt;renderButtons()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  renderButtons(m, task, index) {
    m.onclick(e =&amp;gt; this.editTask(task));
    m.span(&#39;Edit&#39;, { class: &#39;button&#39; });
    m.onclick(e =&amp;gt; {
      if (confirm(&#39;Are you sure you want to delete this task?&#39;))
        this.agent.destroyTask(task);
    });
    m.span(&#39;Delete&#39;, { class: &#39;button&#39; });
    if (index === 0) m.class(&#39;disabled&#39;);
    m.span({ class: &#39;button&#39; }, m =&amp;gt; m.fa(&#39;arrow-circle-up&#39;));
    if (index === this.agent.objects.length - 1) m.class(&#39;disabled&#39;);
    m.span({ class: &#39;button&#39; }, m =&amp;gt; m.fa(&#39;arrow-circle-down&#39;));
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I rewrote three points. First, I added the third parameter &lt;code&gt;index&lt;/code&gt; to the method &lt;code&gt;renderbuttons()&lt;/code&gt;. In addition, I added the statements starting from &lt;code&gt;if&lt;/code&gt; on the fifth and third lines.&lt;/p&gt;

&lt;p&gt;On the fifth line from the bottom, I added &lt;code&gt;disabled&lt;/code&gt; to the attribute &lt;code&gt;class&lt;/code&gt; of the tag &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; surrounding the up button during &lt;code&gt;index == 0&lt;/code&gt;. On the third line from the bottom, I added &lt;code&gt;disabled&lt;/code&gt; the attribute&lt;code&gt;class&lt;/code&gt; of the tag &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; surrounding the down button during &lt;code&gt;index == this.agent.object.length - 1&lt;/code&gt;, the last sentence.&lt;/p&gt;

&lt;p&gt;Next, rewrite the style sheet (&lt;code&gt;app/assets/stylesheets/todo_list.es6&lt;/code&gt;) as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#todo-list {
  label.completed span {
    color: #888;
    text-decoration: line-through;
  }
  button[disabled] {
    color: #888;
  }
  button + button {
    margin-left: 4px;
  }
  span.modifying {
    font-weight: bold;
    color: #800;
  }
  span.button {
    cursor: pointer;
    background-color: #888;
    color: #fff;
    margin-left: 4px;
    padding: 4px 8px;
    font-size: 60%;
  }
  span.button.disabled {
    cursor: not-allowed;
    background-color: #ccc;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added lines from the fifth to second from the bottom. Reload the browser and the screen will be like following.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://capejs.github.io/capejs/capejs/images/capejs_primer/todo_list22.png&#34; alt=&#34;Screen capture&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That&amp;rsquo;s all for today. On &lt;a href=&#34;../21_reordering2&#34;&gt;the next lecture&lt;/a&gt;, I&amp;rsquo;ll make API on the server to change the displaying order of tasks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Change displaying order (2) - Cape.JS Primer</title>
      <link>http://capejs.github.io/capejs/tutorials/capejs_primer/21_reordering2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://capejs.github.io/capejs/tutorials/capejs_primer/21_reordering2/</guid>
      <description>&lt;p&gt;From &lt;a href=&#34;../20_reordering1&#34;&gt;the previous lecture&lt;/a&gt;, I started making the function to interchange the displaying order of the task. I just set the button moving up and down now. I&amp;rsquo;ll make API on the server this time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First, introduce Gem package &lt;a href=&#34;https://github.com/swanandp/acts_as_list&#34;&gt;acts_as_list&lt;/a&gt; that make processing to interchange the list&amp;rsquo;s order.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gem &#39;acts_as_list&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run next command on the terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bin/bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the commands below by following &lt;code&gt;acts_as_list&lt;/code&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/swanandp/acts_as_list#example&#34;&gt;README.md&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bin/rails g migration AddPositionToTasks position:integer
bin/rake db:migrate
bin/rake db:reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mount &lt;code&gt;acts_as_list&lt;/code&gt; to the class &lt;code&gt;Task&lt;/code&gt;. Rewrite &lt;code&gt;app/models/task.rb&lt;/code&gt; as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;class Task &amp;lt; ActiveRecord::Base
  acts_as_list
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Next, I&amp;rsquo;ll make API. &lt;code&gt;config/routes.rb&lt;/code&gt; is now like following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Rails.application.routes.draw do
  root &#39;top#index&#39;

  namespace :api do
    resources :tasks, only: [ :index, :create, :update, :destroy ]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rewrite it as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Rails.application.routes.draw do
  root &#39;top#index&#39;

  namespace :api do
    resources :tasks, only: [ :index, :create, :update, :destroy ] do
      patch :move_higher, :move_lower, on: :member
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;acts_as_list&lt;/code&gt; means &amp;ldquo;move up&amp;rdquo; and as &lt;code&gt;move_higher&lt;/code&gt; and &amp;ldquo;move down&amp;rdquo; as &lt;code&gt;move_lower&lt;/code&gt;. I named API like them.&lt;/p&gt;

&lt;p&gt;Next, implement the action  &lt;code&gt;move_higher&lt;/code&gt; and &lt;code&gt;move_lower&lt;/code&gt;. Rewrite &lt;code&gt;app/controllers/tasks_controller.rb&lt;/code&gt; as following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;class Api::TasksController &amp;lt; ApplicationController
  def index
    @tasks = Task.order(position: :asc)
  end

  (snip)

  def destroy
    Task.find(params[:id]).destroy
    render text: &#39;OK&#39;
  end

  def move_higher
    task = Task.find(params[:id])
    task.move_higher
    render text: &#39;OK&#39;
  end

  def move_lower
    task = Task.find(params[:id])
    task.move_lower
    render text: &#39;OK&#39;
  end

  private
  (snip)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thank to the &lt;code&gt;acts_as_list&lt;/code&gt; gem, it&amp;rsquo;s very simple code. I use these actions for Ajax requests. It just returns the string &amp;ldquo;OK&amp;rdquo; to the browser from the server.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now API is ready. On &lt;a href=&#34;../22_reordering3&#34;&gt;the next lecture&lt;/a&gt;, I&amp;rsquo;ll finish JavaScript by using this API.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>